//
// This file was auto-generated using the following command:
//
// jai generate.jai
//



D3D_FL9_1_REQ_TEXTURE1D_U_DIMENSION :: 2048;
D3D_FL9_3_REQ_TEXTURE1D_U_DIMENSION :: 4096;
D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION :: 2048;
D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION :: 4096;
D3D_FL9_1_REQ_TEXTURECUBE_DIMENSION :: 512;
D3D_FL9_3_REQ_TEXTURECUBE_DIMENSION :: 4096;
D3D_FL9_1_REQ_TEXTURE3D_U_V_OR_W_DIMENSION :: 256;
D3D_FL9_1_DEFAULT_MAX_ANISOTROPY :: 2;
D3D_FL9_1_IA_PRIMITIVE_MAX_COUNT :: 65535;
D3D_FL9_2_IA_PRIMITIVE_MAX_COUNT :: 1048575;
D3D_FL9_1_SIMULTANEOUS_RENDER_TARGET_COUNT :: 1;
D3D_FL9_3_SIMULTANEOUS_RENDER_TARGET_COUNT :: 4;
D3D_FL9_1_MAX_TEXTURE_REPEAT :: 128;
D3D_FL9_2_MAX_TEXTURE_REPEAT :: 2048;
D3D_FL9_3_MAX_TEXTURE_REPEAT :: 8192;

D3D_SHADER_FEATURE_DOUBLES :: 0x00001;
D3D_SHADER_FEATURE_COMPUTE_SHADERS_PLUS_RAW_AND_STRUCTURED_BUFFERS_VIA_SHADER_4_X :: 0x00002;
D3D_SHADER_FEATURE_UAVS_AT_EVERY_STAGE :: 0x00004;
D3D_SHADER_FEATURE_64_UAVS :: 0x00008;
D3D_SHADER_FEATURE_MINIMUM_PRECISION :: 0x00010;
D3D_SHADER_FEATURE_11_1_DOUBLE_EXTENSIONS :: 0x00020;
D3D_SHADER_FEATURE_11_1_SHADER_EXTENSIONS :: 0x00040;
D3D_SHADER_FEATURE_LEVEL_9_COMPARISON_FILTERING :: 0x00080;
D3D_SHADER_FEATURE_TILED_RESOURCES :: 0x00100;
D3D_SHADER_FEATURE_STENCIL_REF :: 0x00200;
D3D_SHADER_FEATURE_INNER_COVERAGE :: 0x00400;
D3D_SHADER_FEATURE_TYPED_UAV_LOAD_ADDITIONAL_FORMATS :: 0x00800;
D3D_SHADER_FEATURE_ROVS :: 0x01000;
D3D_SHADER_FEATURE_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER :: 0x02000;
D3D_SHADER_FEATURE_WAVE_OPS :: 0x04000;
D3D_SHADER_FEATURE_INT64_OPS :: 0x08000;
D3D_SHADER_FEATURE_VIEW_ID :: 0x10000;
D3D_SHADER_FEATURE_BARYCENTRICS :: 0x20000;
D3D_SHADER_FEATURE_NATIVE_16BIT_OPS :: 0x40000;
D3D_SHADER_FEATURE_SHADING_RATE :: 0x80000;
D3D_SHADER_FEATURE_RAYTRACING_TIER_1_1 :: 0x100000;
D3D_SHADER_FEATURE_SAMPLER_FEEDBACK :: 0x200000;
D3D_SHADER_FEATURE_ATOMIC_INT64_ON_TYPED_RESOURCE :: 0x400000;
D3D_SHADER_FEATURE_ATOMIC_INT64_ON_GROUP_SHARED :: 0x800000;
D3D_SHADER_FEATURE_DERIVATIVES_IN_MESH_AND_AMPLIFICATION_SHADERS :: 0x1000000;
D3D_SHADER_FEATURE_RESOURCE_DESCRIPTOR_HEAP_INDEXING :: 0x2000000;
D3D_SHADER_FEATURE_SAMPLER_DESCRIPTOR_HEAP_INDEXING :: 0x4000000;
D3D_SHADER_FEATURE_WAVE_MMA :: 0x8000000;
D3D_SHADER_FEATURE_ATOMIC_INT64_ON_DESCRIPTOR_HEAP_RESOURCE :: 0x10000000;

D3D_COMPONENT_MASK_X :: 1;
D3D_COMPONENT_MASK_Y :: 2;
D3D_COMPONENT_MASK_Z :: 4;
D3D_COMPONENT_MASK_W :: 8;

D3D12_16BIT_INDEX_STRIP_CUT_VALUE :: 0xffff;

D3D12_32BIT_INDEX_STRIP_CUT_VALUE :: 0xffffffff;

D3D12_8BIT_INDEX_STRIP_CUT_VALUE :: 0xff;

D3D12_APPEND_ALIGNED_ELEMENT :: 0xffffffff;

D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT :: 9;

D3D12_CLIP_OR_CULL_DISTANCE_COUNT :: 8;

D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT :: 2;

D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT :: 14;

D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS :: 4;

D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT :: 32;

D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT :: 15;

D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT :: 16;

D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS :: 4;

D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT :: 15;

D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST :: 1;

D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS :: 1;

D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT :: 64;

D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS :: 4;

D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT :: 1;

D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST :: 1;

D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS :: 1;

D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT :: 32;

D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS :: 1;

D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT :: 128;

D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST :: 1;

D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS :: 1;

D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT :: 128;

D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS :: 1;

D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT :: 16;

D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST :: 1;

D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS :: 1;

D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT :: 16;

D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT :: 32;

D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS :: 4;

D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_COMMONSHADER_TEMP_REGISTER_COUNT :: 4096;

D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST :: 3;

D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS :: 3;

D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX :: 10;

D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN :: -10;

D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE :: -8;

D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE :: 7;

D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT :: 256;

D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 256;

D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP :: 64;

D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 240;

D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP :: 68;

D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 224;

D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP :: 72;

D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 208;

D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP :: 76;

D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 192;

D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP :: 84;

D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 176;

D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP :: 92;

D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 160;

D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP :: 100;

D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 144;

D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP :: 112;

D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 128;

D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP :: 128;

D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 112;

D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP :: 144;

D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 96;

D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP :: 168;

D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 80;

D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP :: 204;

D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 64;

D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP :: 256;

D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 48;

D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP :: 340;

D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 32;

D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP :: 512;

D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD :: 16;

D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP :: 768;

D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION :: 1;

D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT :: 256;

D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP :: 768;

D3D12_CS_4_X_THREAD_GROUP_MAX_X :: 768;

D3D12_CS_4_X_THREAD_GROUP_MAX_Y :: 768;

D3D12_CS_4_X_UAV_REGISTER_COUNT :: 1;

D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION :: 65535;

D3D12_CS_TGSM_REGISTER_COUNT :: 8192;

D3D12_CS_TGSM_REGISTER_READS_PER_INST :: 1;

D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS :: 1;

D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS :: 1;

D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS :: 3;

D3D12_CS_THREADGROUPID_REGISTER_COUNT :: 1;

D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS :: 1;

D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT :: 1;

D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS :: 3;

D3D12_CS_THREADIDINGROUP_REGISTER_COUNT :: 1;

D3D12_CS_THREADID_REGISTER_COMPONENTS :: 3;

D3D12_CS_THREADID_REGISTER_COUNT :: 1;

D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP :: 1024;

D3D12_CS_THREAD_GROUP_MAX_X :: 1024;

D3D12_CS_THREAD_GROUP_MAX_Y :: 1024;

D3D12_CS_THREAD_GROUP_MAX_Z :: 64;

D3D12_CS_THREAD_GROUP_MIN_X :: 1;

D3D12_CS_THREAD_GROUP_MIN_Y :: 1;

D3D12_CS_THREAD_GROUP_MIN_Z :: 1;

D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL :: 16384;

D3D12_DEFAULT_BLEND_FACTOR_ALPHA :: 1.0;
D3D12_DEFAULT_BLEND_FACTOR_BLUE :: 1.0;
D3D12_DEFAULT_BLEND_FACTOR_GREEN :: 1.0;
D3D12_DEFAULT_BLEND_FACTOR_RED :: 1.0;
D3D12_DEFAULT_BORDER_COLOR_COMPONENT :: 0.0;
D3D12_DEFAULT_DEPTH_BIAS :: 0;

D3D12_DEFAULT_DEPTH_BIAS_CLAMP :: 0.0;
D3D12_DEFAULT_MAX_ANISOTROPY :: 16;

D3D12_DEFAULT_MIP_LOD_BIAS :: 0.0;
D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT :: 4194304;

D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX :: 0;

D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT :: 65536;

D3D12_DEFAULT_SAMPLE_MASK :: 0xffffffff;

D3D12_DEFAULT_SCISSOR_ENDX :: 0;

D3D12_DEFAULT_SCISSOR_ENDY :: 0;

D3D12_DEFAULT_SCISSOR_STARTX :: 0;

D3D12_DEFAULT_SCISSOR_STARTY :: 0;

D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS :: 0.0;
D3D12_DEFAULT_STENCIL_READ_MASK :: 0xff;

D3D12_DEFAULT_STENCIL_REFERENCE :: 0;

D3D12_DEFAULT_STENCIL_WRITE_MASK :: 0xff;

D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX :: 0;

D3D12_DEFAULT_VIEWPORT_HEIGHT :: 0;

D3D12_DEFAULT_VIEWPORT_MAX_DEPTH :: 0.0;
D3D12_DEFAULT_VIEWPORT_MIN_DEPTH :: 0.0;
D3D12_DEFAULT_VIEWPORT_TOPLEFTX :: 0;

D3D12_DEFAULT_VIEWPORT_TOPLEFTY :: 0;

D3D12_DEFAULT_VIEWPORT_WIDTH :: 0;

D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND :: 0xffffffff;

D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END :: 0xfffffff7;

D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START :: 0xfffffff0;

D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS :: 3968;

D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS :: 4;

D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT :: 32;

D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST :: 2;

D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS :: 1;

D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS :: 3;

D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT :: 1;

D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST :: 2;

D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS :: 1;

D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS :: 4;

D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT :: 32;

D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST :: 2;

D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS :: 1;

D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS :: 1;

D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT :: 1;

D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST :: 2;

D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS :: 1;

D3D12_DS_OUTPUT_REGISTER_COMPONENTS :: 4;

D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_DS_OUTPUT_REGISTER_COUNT :: 32;

D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP :: 0.6;
D3D12_FLOAT32_MAX :: 3.402823466e+38;
D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP :: 0.6;
D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR :: 2.4;
D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR :: 1.0;
D3D12_FLOAT_TO_SRGB_OFFSET :: 0.055;
D3D12_FLOAT_TO_SRGB_SCALE_1 :: 12.92;
D3D12_FLOAT_TO_SRGB_SCALE_2 :: 1.055;
D3D12_FLOAT_TO_SRGB_THRESHOLD :: 0.0031308;
D3D12_FTOI_INSTRUCTION_MAX_INPUT :: 2147483647.999;
D3D12_FTOI_INSTRUCTION_MIN_INPUT :: -2147483648.999;
D3D12_FTOU_INSTRUCTION_MAX_INPUT :: 4294967295.999;
D3D12_FTOU_INSTRUCTION_MIN_INPUT :: 0.0;
D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST :: 2;

D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS :: 1;

D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS :: 1;

D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT :: 1;

D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS :: 1;

D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT :: 1;

D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST :: 2;

D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS :: 1;

D3D12_GS_INPUT_REGISTER_COMPONENTS :: 4;

D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_GS_INPUT_REGISTER_COUNT :: 32;

D3D12_GS_INPUT_REGISTER_READS_PER_INST :: 2;

D3D12_GS_INPUT_REGISTER_READ_PORTS :: 1;

D3D12_GS_INPUT_REGISTER_VERTICES :: 32;

D3D12_GS_MAX_INSTANCE_COUNT :: 32;

D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES :: 1024;

D3D12_GS_OUTPUT_ELEMENTS :: 32;

D3D12_GS_OUTPUT_REGISTER_COMPONENTS :: 4;

D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_GS_OUTPUT_REGISTER_COUNT :: 32;

D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT :: 32;

D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT :: 32;

D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS :: 4;

D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST :: 2;

D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS :: 1;

D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND :: 0xffffffff;

D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS :: 1;

D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT :: 1;

D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST :: 2;

D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS :: 1;

D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS :: 1;

D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT :: 1;

D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST :: 2;

D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS :: 1;

D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS :: 1;

D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT :: 1;

D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST :: 2;

D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS :: 1;

D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND :: 0xffffffff;

D3D12_HS_MAXTESSFACTOR_LOWER_BOUND :: 1.0;
D3D12_HS_MAXTESSFACTOR_UPPER_BOUND :: 64.0;
D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS :: 3968;

D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS :: 1;

D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT :: 1;

D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST :: 2;

D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS :: 1;

D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS :: 4;

D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT :: 32;

D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST :: 2;

D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS :: 1;

D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS :: 128;

D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES :: 0;

D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY :: 0;

D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES :: 0;

D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT :: 1;

D3D12_IA_INSTANCE_ID_BIT_COUNT :: 32;

D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT :: 32;

D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT :: 32;

D3D12_IA_PRIMITIVE_ID_BIT_COUNT :: 32;

D3D12_IA_VERTEX_ID_BIT_COUNT :: 32;

D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT :: 32;

D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS :: 128;

D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT :: 32;

D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT :: 0xffffffff;

D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER :: 0xffffffff;

D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL :: 0xffffffff;

D3D12_KEEP_UNORDERED_ACCESS_VIEWS :: 0xffffffff;

D3D12_LINEAR_GAMMA :: 1.0;
D3D12_MAJOR_VERSION :: 12;

D3D12_MAX_BORDER_COLOR_COMPONENT :: 1.0;
D3D12_MAX_DEPTH :: 1.0;
D3D12_MAX_LIVE_STATIC_SAMPLERS :: 2032;

D3D12_MAX_MAXANISOTROPY :: 16;

D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT :: 32;

D3D12_MAX_POSITION_VALUE :: 3.402823466e+34;
D3D12_MAX_ROOT_COST :: 64;

D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 :: 1000000;

D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 :: 1000000;

D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE :: 2048;

D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP :: 17;

D3D12_MAX_VIEW_INSTANCE_COUNT :: 4;

D3D12_MINOR_VERSION :: 0;

D3D12_MIN_BORDER_COLOR_COMPONENT :: 0.0;
D3D12_MIN_DEPTH :: 0.0;
D3D12_MIN_MAXANISOTROPY :: 0;

D3D12_MIP_LOD_BIAS_MAX :: 15.99;
D3D12_MIP_LOD_BIAS_MIN :: -16.0;
D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT :: 8;

D3D12_MIP_LOD_RANGE_BIT_COUNT :: 8;

D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH :: 1.4;
D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT :: 0;

D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END :: 0xffffffff;

D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START :: 0xfffffff8;

D3D12_PACKED_TILE :: 0xffffffff;

D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT :: 15;

D3D12_PREVIEW_SDK_VERSION :: 706;

D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT :: 16;

D3D12_PS_CS_UAV_REGISTER_COMPONENTS :: 1;

D3D12_PS_CS_UAV_REGISTER_COUNT :: 8;

D3D12_PS_CS_UAV_REGISTER_READS_PER_INST :: 1;

D3D12_PS_CS_UAV_REGISTER_READ_PORTS :: 1;

D3D12_PS_FRONTFACING_DEFAULT_VALUE :: 0xffffffff;

D3D12_PS_FRONTFACING_FALSE_VALUE :: 0;

D3D12_PS_FRONTFACING_TRUE_VALUE :: 0xffffffff;

D3D12_PS_INPUT_REGISTER_COMPONENTS :: 4;

D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_PS_INPUT_REGISTER_COUNT :: 32;

D3D12_PS_INPUT_REGISTER_READS_PER_INST :: 2;

D3D12_PS_INPUT_REGISTER_READ_PORTS :: 1;

D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT :: 0.0;
D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS :: 1;

D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT :: 1;

D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS :: 1;

D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_PS_OUTPUT_MASK_REGISTER_COUNT :: 1;

D3D12_PS_OUTPUT_REGISTER_COMPONENTS :: 4;

D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_PS_OUTPUT_REGISTER_COUNT :: 8;

D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT :: 0.5;
D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT :: 16;

D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT :: 8;

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT :: 256;

D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT :: 16;

D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES :: 32;

D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH :: 31;

D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE :: 16777216;

D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE :: 16777216;

D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE :: 536870912;

D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS :: 1073741824;

D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE :: 4096;

D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT :: 32;

D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT :: 64;

D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT :: 16;

D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE :: 4096;

D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP :: 27;

D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT :: 4096;

D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE :: 4096;

D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP :: 32;

D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP :: 32;

D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION :: 16384;

D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT :: 1024;

D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT :: 4096;

D3D12_REQ_MAXANISOTROPY :: 16;

D3D12_REQ_MIP_LEVELS :: 15;

D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES :: 2048;

D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE :: 4096;

D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH :: 16384;

D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM :: 128;

D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM :: 0.25;
D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM :: 2048;

D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP :: 20;

D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE :: 4096;

D3D12_REQ_SUBRESOURCES :: 30720;

D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION :: 2048;

D3D12_REQ_TEXTURE1D_U_DIMENSION :: 16384;

D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION :: 2048;

D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION :: 16384;

D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION :: 2048;

D3D12_REQ_TEXTURECUBE_DIMENSION :: 16384;

D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL :: 0;

D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES :: 0xffffffff;

D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT :: 2;

D3D12_SDK_VERSION :: 606;

D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES :: 32;

D3D12_SHADER_MAJOR_VERSION :: 5;

D3D12_SHADER_MAX_INSTANCES :: 65535;

D3D12_SHADER_MAX_INTERFACES :: 253;

D3D12_SHADER_MAX_INTERFACE_CALL_SITES :: 4096;

D3D12_SHADER_MAX_TYPES :: 65535;

D3D12_SHADER_MINOR_VERSION :: 1;

D3D12_SHIFT_INSTRUCTION_PAD_VALUE :: 0;

D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT :: 5;

D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT :: 8;

D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT :: 65536;

D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT :: 4096;

D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES :: 2048;

D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES :: 512;

D3D12_SO_BUFFER_SLOT_COUNT :: 4;

D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP :: 0xffffffff;

D3D12_SO_NO_RASTERIZED_STREAM :: 0xffffffff;

D3D12_SO_OUTPUT_COMPONENT_COUNT :: 128;

D3D12_SO_STREAM_COUNT :: 4;

D3D12_SPEC_DATE_DAY :: 14;

D3D12_SPEC_DATE_MONTH :: 11;

D3D12_SPEC_DATE_YEAR :: 2014;

D3D12_SPEC_VERSION :: 1.16;
D3D12_SRGB_GAMMA :: 2.2;
D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 :: 12.92;
D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 :: 1.055;
D3D12_SRGB_TO_FLOAT_EXPONENT :: 2.4;
D3D12_SRGB_TO_FLOAT_OFFSET :: 0.055;
D3D12_SRGB_TO_FLOAT_THRESHOLD :: 0.04045;
D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP :: 0.5;
D3D12_STANDARD_COMPONENT_BIT_COUNT :: 32;

D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED :: 64;

D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE :: 4;

D3D12_STANDARD_PIXEL_COMPONENT_COUNT :: 128;

D3D12_STANDARD_PIXEL_ELEMENT_COUNT :: 32;

D3D12_STANDARD_VECTOR_SIZE :: 4;

D3D12_STANDARD_VERTEX_ELEMENT_COUNT :: 32;

D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT :: 64;

D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT :: 8;

D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT :: 8;

D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END :: 0xffffffff;

D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START :: 0xfffffff0;

D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR :: 64;

D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR :: 64;

D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR :: 63;

D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR :: 64;

D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR :: 2;

D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR :: 1;

D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR :: 1;

D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT :: 16;

D3D12_TEXTURE_DATA_PITCH_ALIGNMENT :: 256;

D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT :: 512;

D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES :: 65536;

D3D12_TRACKED_WORKLOAD_MAX_INSTANCES :: 32;

D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT :: 4096;

D3D12_UAV_SLOT_COUNT :: 64;

D3D12_UNBOUND_MEMORY_ACCESS_RESULT :: 0;

D3D12_VIDEO_DECODE_MAX_ARGUMENTS :: 10;

D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS :: 4;

D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT :: 256;

D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT :: 256;

D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN :: 0xffffffff;

D3D12_VIDEO_PROCESS_MAX_FILTERS :: 32;

D3D12_VIDEO_PROCESS_STEREO_VIEWS :: 2;

D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX :: 15;

D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE :: 16;

D3D12_VIEWPORT_BOUNDS_MAX :: 32767;

D3D12_VIEWPORT_BOUNDS_MIN :: -32768;

D3D12_VS_INPUT_REGISTER_COMPONENTS :: 4;

D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_VS_INPUT_REGISTER_COUNT :: 32;

D3D12_VS_INPUT_REGISTER_READS_PER_INST :: 2;

D3D12_VS_INPUT_REGISTER_READ_PORTS :: 1;

D3D12_VS_OUTPUT_REGISTER_COMPONENTS :: 4;

D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT :: 32;

D3D12_VS_OUTPUT_REGISTER_COUNT :: 32;

D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT :: 10;

D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP :: 25;

D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP :: 25;

D3D12_SHADER_COMPONENT_MAPPING_MASK :: 0x7;
D3D12_SHADER_COMPONENT_MAPPING_SHIFT :: 3;
D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES :: 1<<(D3D12_SHADER_COMPONENT_MAPPING_SHIFT*4);

D3D12_FILTER_REDUCTION_TYPE_MASK :: 0x3;

D3D12_FILTER_REDUCTION_TYPE_SHIFT :: 7;

D3D12_FILTER_TYPE_MASK :: 0x3;

D3D12_MIN_FILTER_SHIFT :: 4;

D3D12_MAG_FILTER_SHIFT :: 2;

D3D12_MIP_FILTER_SHIFT :: 0;

D3D12_ANISOTROPIC_FILTERING_BIT :: 0x40;

D3D12_SHADING_RATE_X_AXIS_SHIFT :: 2;
D3D12_SHADING_RATE_VALID_MASK :: 3;

/* interface __MIDL_itf_d3dcommon_0000_0000 */
/* [local] */
D3D_DRIVER_TYPE :: enum s32 {
    UNKNOWN   :: 0;
    HARDWARE  :: 1;
    REFERENCE :: 2;
    NULL      :: 3;
    SOFTWARE  :: 4;
    WARP      :: 5;

    D3D_DRIVER_TYPE_UNKNOWN   :: UNKNOWN;
    D3D_DRIVER_TYPE_HARDWARE  :: HARDWARE;
    D3D_DRIVER_TYPE_REFERENCE :: REFERENCE;
    D3D_DRIVER_TYPE_NULL      :: NULL;
    D3D_DRIVER_TYPE_SOFTWARE  :: SOFTWARE;
    D3D_DRIVER_TYPE_WARP      :: WARP;
}

D3D_FEATURE_LEVEL :: enum s32 {
    _1_0_CORE :: 4096;
    _9_1      :: 37120;
    _9_2      :: 37376;
    _9_3      :: 37632;
    _10_0     :: 40960;
    _10_1     :: 41216;
    _11_0     :: 45056;
    _11_1     :: 45312;
    _12_0     :: 49152;
    _12_1     :: 49408;
    _12_2     :: 49664;

    D3D_FEATURE_LEVEL_1_0_CORE :: _1_0_CORE;
    D3D_FEATURE_LEVEL_9_1      :: _9_1;
    D3D_FEATURE_LEVEL_9_2      :: _9_2;
    D3D_FEATURE_LEVEL_9_3      :: _9_3;
    D3D_FEATURE_LEVEL_10_0     :: _10_0;
    D3D_FEATURE_LEVEL_10_1     :: _10_1;
    D3D_FEATURE_LEVEL_11_0     :: _11_0;
    D3D_FEATURE_LEVEL_11_1     :: _11_1;
    D3D_FEATURE_LEVEL_12_0     :: _12_0;
    D3D_FEATURE_LEVEL_12_1     :: _12_1;
    D3D_FEATURE_LEVEL_12_2     :: _12_2;
}

D3D_PRIMITIVE_TOPOLOGY :: enum s32 {
    UNDEFINED                                           :: 0;
    POINTLIST                                           :: 1;
    LINELIST                                            :: 2;
    LINESTRIP                                           :: 3;
    TRIANGLELIST                                        :: 4;
    TRIANGLESTRIP                                       :: 5;
    TRIANGLEFAN                                         :: 6;
    LINELIST_ADJ                                        :: 10;
    LINESTRIP_ADJ                                       :: 11;
    TRIANGLELIST_ADJ                                    :: 12;
    TRIANGLESTRIP_ADJ                                   :: 13;
    _1_CONTROL_POINT_PATCHLIST                          :: 33;
    _2_CONTROL_POINT_PATCHLIST                          :: 34;
    _3_CONTROL_POINT_PATCHLIST                          :: 35;
    _4_CONTROL_POINT_PATCHLIST                          :: 36;
    _5_CONTROL_POINT_PATCHLIST                          :: 37;
    _6_CONTROL_POINT_PATCHLIST                          :: 38;
    _7_CONTROL_POINT_PATCHLIST                          :: 39;
    _8_CONTROL_POINT_PATCHLIST                          :: 40;
    _9_CONTROL_POINT_PATCHLIST                          :: 41;
    _10_CONTROL_POINT_PATCHLIST                         :: 42;
    _11_CONTROL_POINT_PATCHLIST                         :: 43;
    _12_CONTROL_POINT_PATCHLIST                         :: 44;
    _13_CONTROL_POINT_PATCHLIST                         :: 45;
    _14_CONTROL_POINT_PATCHLIST                         :: 46;
    _15_CONTROL_POINT_PATCHLIST                         :: 47;
    _16_CONTROL_POINT_PATCHLIST                         :: 48;
    _17_CONTROL_POINT_PATCHLIST                         :: 49;
    _18_CONTROL_POINT_PATCHLIST                         :: 50;
    _19_CONTROL_POINT_PATCHLIST                         :: 51;
    _20_CONTROL_POINT_PATCHLIST                         :: 52;
    _21_CONTROL_POINT_PATCHLIST                         :: 53;
    _22_CONTROL_POINT_PATCHLIST                         :: 54;
    _23_CONTROL_POINT_PATCHLIST                         :: 55;
    _24_CONTROL_POINT_PATCHLIST                         :: 56;
    _25_CONTROL_POINT_PATCHLIST                         :: 57;
    _26_CONTROL_POINT_PATCHLIST                         :: 58;
    _27_CONTROL_POINT_PATCHLIST                         :: 59;
    _28_CONTROL_POINT_PATCHLIST                         :: 60;
    _29_CONTROL_POINT_PATCHLIST                         :: 61;
    _30_CONTROL_POINT_PATCHLIST                         :: 62;
    _31_CONTROL_POINT_PATCHLIST                         :: 63;
    _32_CONTROL_POINT_PATCHLIST                         :: 64;
    D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED                  :: 0;
    D3D10_PRIMITIVE_TOPOLOGY_POINTLIST                  :: 1;
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST                   :: 2;
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP                  :: 3;
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST               :: 4;
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP              :: 5;
    D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ               :: 10;
    D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ              :: 11;
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ           :: 12;
    D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ          :: 13;
    D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED                  :: 0;
    D3D11_PRIMITIVE_TOPOLOGY_POINTLIST                  :: 1;
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST                   :: 2;
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP                  :: 3;
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST               :: 4;
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP              :: 5;
    D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ               :: 10;
    D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ              :: 11;
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ           :: 12;
    D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ          :: 13;
    D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST  :: 33;
    D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST  :: 34;
    D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST  :: 35;
    D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST  :: 36;
    D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST  :: 37;
    D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST  :: 38;
    D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST  :: 39;
    D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST  :: 40;
    D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST  :: 41;
    D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST :: 42;
    D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST :: 43;
    D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST :: 44;
    D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST :: 45;
    D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST :: 46;
    D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST :: 47;
    D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST :: 48;
    D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST :: 49;
    D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST :: 50;
    D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST :: 51;
    D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST :: 52;
    D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST :: 53;
    D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST :: 54;
    D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST :: 55;
    D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST :: 56;
    D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST :: 57;
    D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST :: 58;
    D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST :: 59;
    D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST :: 60;
    D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST :: 61;
    D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST :: 62;
    D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST :: 63;
    D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST :: 64;

    D3D_PRIMITIVE_TOPOLOGY_UNDEFINED                  :: UNDEFINED;
    D3D_PRIMITIVE_TOPOLOGY_POINTLIST                  :: POINTLIST;
    D3D_PRIMITIVE_TOPOLOGY_LINELIST                   :: LINELIST;
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP                  :: LINESTRIP;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST               :: TRIANGLELIST;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP              :: TRIANGLESTRIP;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLEFAN                :: TRIANGLEFAN;
    D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ               :: LINELIST_ADJ;
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ              :: LINESTRIP_ADJ;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ           :: TRIANGLELIST_ADJ;
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ          :: TRIANGLESTRIP_ADJ;
    D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST  :: _1_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST  :: _2_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST  :: _3_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST  :: _4_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST  :: _5_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST  :: _6_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST  :: _7_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST  :: _8_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST  :: _9_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST :: _10_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST :: _11_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST :: _12_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST :: _13_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST :: _14_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST :: _15_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST :: _16_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST :: _17_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST :: _18_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST :: _19_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST :: _20_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST :: _21_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST :: _22_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST :: _23_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST :: _24_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST :: _25_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST :: _26_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST :: _27_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST :: _28_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST :: _29_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST :: _30_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST :: _31_CONTROL_POINT_PATCHLIST;
    D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST :: _32_CONTROL_POINT_PATCHLIST;
}

D3D_PRIMITIVE :: enum s32 {
    UNDEFINED                              :: 0;
    POINT                                  :: 1;
    LINE                                   :: 2;
    TRIANGLE                               :: 3;
    LINE_ADJ                               :: 6;
    TRIANGLE_ADJ                           :: 7;
    _1_CONTROL_POINT_PATCH                 :: 8;
    _2_CONTROL_POINT_PATCH                 :: 9;
    _3_CONTROL_POINT_PATCH                 :: 10;
    _4_CONTROL_POINT_PATCH                 :: 11;
    _5_CONTROL_POINT_PATCH                 :: 12;
    _6_CONTROL_POINT_PATCH                 :: 13;
    _7_CONTROL_POINT_PATCH                 :: 14;
    _8_CONTROL_POINT_PATCH                 :: 15;
    _9_CONTROL_POINT_PATCH                 :: 16;
    _10_CONTROL_POINT_PATCH                :: 17;
    _11_CONTROL_POINT_PATCH                :: 18;
    _12_CONTROL_POINT_PATCH                :: 19;
    _13_CONTROL_POINT_PATCH                :: 20;
    _14_CONTROL_POINT_PATCH                :: 21;
    _15_CONTROL_POINT_PATCH                :: 22;
    _16_CONTROL_POINT_PATCH                :: 23;
    _17_CONTROL_POINT_PATCH                :: 24;
    _18_CONTROL_POINT_PATCH                :: 25;
    _19_CONTROL_POINT_PATCH                :: 26;
    _20_CONTROL_POINT_PATCH                :: 27;
    _21_CONTROL_POINT_PATCH                :: 28;
    _22_CONTROL_POINT_PATCH                :: 29;
    _23_CONTROL_POINT_PATCH                :: 30;
    _24_CONTROL_POINT_PATCH                :: 31;
    _25_CONTROL_POINT_PATCH                :: 32;
    _26_CONTROL_POINT_PATCH                :: 33;
    _27_CONTROL_POINT_PATCH                :: 34;
    _28_CONTROL_POINT_PATCH                :: 35;
    _29_CONTROL_POINT_PATCH                :: 36;
    _30_CONTROL_POINT_PATCH                :: 37;
    _31_CONTROL_POINT_PATCH                :: 38;
    _32_CONTROL_POINT_PATCH                :: 39;
    D3D10_PRIMITIVE_UNDEFINED              :: 0;
    D3D10_PRIMITIVE_POINT                  :: 1;
    D3D10_PRIMITIVE_LINE                   :: 2;
    D3D10_PRIMITIVE_TRIANGLE               :: 3;
    D3D10_PRIMITIVE_LINE_ADJ               :: 6;
    D3D10_PRIMITIVE_TRIANGLE_ADJ           :: 7;
    D3D11_PRIMITIVE_UNDEFINED              :: 0;
    D3D11_PRIMITIVE_POINT                  :: 1;
    D3D11_PRIMITIVE_LINE                   :: 2;
    D3D11_PRIMITIVE_TRIANGLE               :: 3;
    D3D11_PRIMITIVE_LINE_ADJ               :: 6;
    D3D11_PRIMITIVE_TRIANGLE_ADJ           :: 7;
    D3D11_PRIMITIVE_1_CONTROL_POINT_PATCH  :: 8;
    D3D11_PRIMITIVE_2_CONTROL_POINT_PATCH  :: 9;
    D3D11_PRIMITIVE_3_CONTROL_POINT_PATCH  :: 10;
    D3D11_PRIMITIVE_4_CONTROL_POINT_PATCH  :: 11;
    D3D11_PRIMITIVE_5_CONTROL_POINT_PATCH  :: 12;
    D3D11_PRIMITIVE_6_CONTROL_POINT_PATCH  :: 13;
    D3D11_PRIMITIVE_7_CONTROL_POINT_PATCH  :: 14;
    D3D11_PRIMITIVE_8_CONTROL_POINT_PATCH  :: 15;
    D3D11_PRIMITIVE_9_CONTROL_POINT_PATCH  :: 16;
    D3D11_PRIMITIVE_10_CONTROL_POINT_PATCH :: 17;
    D3D11_PRIMITIVE_11_CONTROL_POINT_PATCH :: 18;
    D3D11_PRIMITIVE_12_CONTROL_POINT_PATCH :: 19;
    D3D11_PRIMITIVE_13_CONTROL_POINT_PATCH :: 20;
    D3D11_PRIMITIVE_14_CONTROL_POINT_PATCH :: 21;
    D3D11_PRIMITIVE_15_CONTROL_POINT_PATCH :: 22;
    D3D11_PRIMITIVE_16_CONTROL_POINT_PATCH :: 23;
    D3D11_PRIMITIVE_17_CONTROL_POINT_PATCH :: 24;
    D3D11_PRIMITIVE_18_CONTROL_POINT_PATCH :: 25;
    D3D11_PRIMITIVE_19_CONTROL_POINT_PATCH :: 26;
    D3D11_PRIMITIVE_20_CONTROL_POINT_PATCH :: 27;
    D3D11_PRIMITIVE_21_CONTROL_POINT_PATCH :: 28;
    D3D11_PRIMITIVE_22_CONTROL_POINT_PATCH :: 29;
    D3D11_PRIMITIVE_23_CONTROL_POINT_PATCH :: 30;
    D3D11_PRIMITIVE_24_CONTROL_POINT_PATCH :: 31;
    D3D11_PRIMITIVE_25_CONTROL_POINT_PATCH :: 32;
    D3D11_PRIMITIVE_26_CONTROL_POINT_PATCH :: 33;
    D3D11_PRIMITIVE_27_CONTROL_POINT_PATCH :: 34;
    D3D11_PRIMITIVE_28_CONTROL_POINT_PATCH :: 35;
    D3D11_PRIMITIVE_29_CONTROL_POINT_PATCH :: 36;
    D3D11_PRIMITIVE_30_CONTROL_POINT_PATCH :: 37;
    D3D11_PRIMITIVE_31_CONTROL_POINT_PATCH :: 38;
    D3D11_PRIMITIVE_32_CONTROL_POINT_PATCH :: 39;

    D3D_PRIMITIVE_UNDEFINED              :: UNDEFINED;
    D3D_PRIMITIVE_POINT                  :: POINT;
    D3D_PRIMITIVE_LINE                   :: LINE;
    D3D_PRIMITIVE_TRIANGLE               :: TRIANGLE;
    D3D_PRIMITIVE_LINE_ADJ               :: LINE_ADJ;
    D3D_PRIMITIVE_TRIANGLE_ADJ           :: TRIANGLE_ADJ;
    D3D_PRIMITIVE_1_CONTROL_POINT_PATCH  :: _1_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_2_CONTROL_POINT_PATCH  :: _2_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_3_CONTROL_POINT_PATCH  :: _3_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_4_CONTROL_POINT_PATCH  :: _4_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_5_CONTROL_POINT_PATCH  :: _5_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_6_CONTROL_POINT_PATCH  :: _6_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_7_CONTROL_POINT_PATCH  :: _7_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_8_CONTROL_POINT_PATCH  :: _8_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_9_CONTROL_POINT_PATCH  :: _9_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_10_CONTROL_POINT_PATCH :: _10_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_11_CONTROL_POINT_PATCH :: _11_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_12_CONTROL_POINT_PATCH :: _12_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_13_CONTROL_POINT_PATCH :: _13_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_14_CONTROL_POINT_PATCH :: _14_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_15_CONTROL_POINT_PATCH :: _15_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_16_CONTROL_POINT_PATCH :: _16_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_17_CONTROL_POINT_PATCH :: _17_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_18_CONTROL_POINT_PATCH :: _18_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_19_CONTROL_POINT_PATCH :: _19_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_20_CONTROL_POINT_PATCH :: _20_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_21_CONTROL_POINT_PATCH :: _21_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_22_CONTROL_POINT_PATCH :: _22_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_23_CONTROL_POINT_PATCH :: _23_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_24_CONTROL_POINT_PATCH :: _24_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_25_CONTROL_POINT_PATCH :: _25_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_26_CONTROL_POINT_PATCH :: _26_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_27_CONTROL_POINT_PATCH :: _27_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_28_CONTROL_POINT_PATCH :: _28_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_29_CONTROL_POINT_PATCH :: _29_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_30_CONTROL_POINT_PATCH :: _30_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_31_CONTROL_POINT_PATCH :: _31_CONTROL_POINT_PATCH;
    D3D_PRIMITIVE_32_CONTROL_POINT_PATCH :: _32_CONTROL_POINT_PATCH;
}

D3D_SRV_DIMENSION :: enum s32 {
    UNKNOWN                                :: 0;
    BUFFER                                 :: 1;
    TEXTURE1D                              :: 2;
    TEXTURE1DARRAY                         :: 3;
    TEXTURE2D                              :: 4;
    TEXTURE2DARRAY                         :: 5;
    TEXTURE2DMS                            :: 6;
    TEXTURE2DMSARRAY                       :: 7;
    TEXTURE3D                              :: 8;
    TEXTURECUBE                            :: 9;
    TEXTURECUBEARRAY                       :: 10;
    BUFFEREX                               :: 11;
    D3D10_SRV_DIMENSION_UNKNOWN            :: 0;
    D3D10_SRV_DIMENSION_BUFFER             :: 1;
    D3D10_SRV_DIMENSION_TEXTURE1D          :: 2;
    D3D10_SRV_DIMENSION_TEXTURE1DARRAY     :: 3;
    D3D10_SRV_DIMENSION_TEXTURE2D          :: 4;
    D3D10_SRV_DIMENSION_TEXTURE2DARRAY     :: 5;
    D3D10_SRV_DIMENSION_TEXTURE2DMS        :: 6;
    D3D10_SRV_DIMENSION_TEXTURE2DMSARRAY   :: 7;
    D3D10_SRV_DIMENSION_TEXTURE3D          :: 8;
    D3D10_SRV_DIMENSION_TEXTURECUBE        :: 9;
    D3D10_1_SRV_DIMENSION_UNKNOWN          :: 0;
    D3D10_1_SRV_DIMENSION_BUFFER           :: 1;
    D3D10_1_SRV_DIMENSION_TEXTURE1D        :: 2;
    D3D10_1_SRV_DIMENSION_TEXTURE1DARRAY   :: 3;
    D3D10_1_SRV_DIMENSION_TEXTURE2D        :: 4;
    D3D10_1_SRV_DIMENSION_TEXTURE2DARRAY   :: 5;
    D3D10_1_SRV_DIMENSION_TEXTURE2DMS      :: 6;
    D3D10_1_SRV_DIMENSION_TEXTURE2DMSARRAY :: 7;
    D3D10_1_SRV_DIMENSION_TEXTURE3D        :: 8;
    D3D10_1_SRV_DIMENSION_TEXTURECUBE      :: 9;
    D3D10_1_SRV_DIMENSION_TEXTURECUBEARRAY :: 10;
    D3D11_SRV_DIMENSION_UNKNOWN            :: 0;
    D3D11_SRV_DIMENSION_BUFFER             :: 1;
    D3D11_SRV_DIMENSION_TEXTURE1D          :: 2;
    D3D11_SRV_DIMENSION_TEXTURE1DARRAY     :: 3;
    D3D11_SRV_DIMENSION_TEXTURE2D          :: 4;
    D3D11_SRV_DIMENSION_TEXTURE2DARRAY     :: 5;
    D3D11_SRV_DIMENSION_TEXTURE2DMS        :: 6;
    D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY   :: 7;
    D3D11_SRV_DIMENSION_TEXTURE3D          :: 8;
    D3D11_SRV_DIMENSION_TEXTURECUBE        :: 9;
    D3D11_SRV_DIMENSION_TEXTURECUBEARRAY   :: 10;
    D3D11_SRV_DIMENSION_BUFFEREX           :: 11;

    D3D_SRV_DIMENSION_UNKNOWN          :: UNKNOWN;
    D3D_SRV_DIMENSION_BUFFER           :: BUFFER;
    D3D_SRV_DIMENSION_TEXTURE1D        :: TEXTURE1D;
    D3D_SRV_DIMENSION_TEXTURE1DARRAY   :: TEXTURE1DARRAY;
    D3D_SRV_DIMENSION_TEXTURE2D        :: TEXTURE2D;
    D3D_SRV_DIMENSION_TEXTURE2DARRAY   :: TEXTURE2DARRAY;
    D3D_SRV_DIMENSION_TEXTURE2DMS      :: TEXTURE2DMS;
    D3D_SRV_DIMENSION_TEXTURE2DMSARRAY :: TEXTURE2DMSARRAY;
    D3D_SRV_DIMENSION_TEXTURE3D        :: TEXTURE3D;
    D3D_SRV_DIMENSION_TEXTURECUBE      :: TEXTURECUBE;
    D3D_SRV_DIMENSION_TEXTURECUBEARRAY :: TEXTURECUBEARRAY;
    D3D_SRV_DIMENSION_BUFFEREX         :: BUFFEREX;
}

D3D_SHADER_MACRO :: struct {
    Name:       *u8;
    Definition: *u8;
}


ID3D10Blob_UUID :: "8BA5FB08-5195-40e2-AC58-0D989C3A0102";
ID3D10Blob :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d10blob_vtable: *ID3D10Blob_VTable;
}
ID3D10Blob_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetBufferPointer: (this: *ID3D10Blob) -> *void #cpp_method;
    GetBufferSize: (this: *ID3D10Blob) -> SIZE_T #cpp_method;
}
vtable :: (obj: *ID3D10Blob) -> *ID3D10Blob_VTable { return obj.id3d10blob_vtable; }


ID3DBlob :: ID3D10Blob;

PFN_DESTRUCTION_CALLBACK :: #type (pData: *void) -> void #c_call;


ID3DDestructionNotifier_UUID :: "a06eb39a-50da-425b-8c31-4eecd6c270f3";
ID3DDestructionNotifier :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3ddestructionnotifier_vtable: *ID3DDestructionNotifier_VTable;
}
ID3DDestructionNotifier_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    RegisterDestructionCallback: (this: *ID3DDestructionNotifier, callbackFn: PFN_DESTRUCTION_CALLBACK, pData: *void, pCallbackID: *u32) -> HRESULT #cpp_method;
    UnregisterDestructionCallback: (this: *ID3DDestructionNotifier, callbackID: u32) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3DDestructionNotifier) -> *ID3DDestructionNotifier_VTable { return obj.id3ddestructionnotifier_vtable; }


/* interface __MIDL_itf_d3dcommon_0000_0002 */
/* [local] */
D3D_INCLUDE_TYPE :: enum s32 {
    INCLUDE_LOCAL       :: 0;
    INCLUDE_SYSTEM      :: 1;
    _10_INCLUDE_LOCAL   :: 0;
    _10_INCLUDE_SYSTEM  :: 1;
    INCLUDE_FORCE_DWORD :: 2147483647;

    D3D_INCLUDE_LOCAL       :: INCLUDE_LOCAL;
    D3D_INCLUDE_SYSTEM      :: INCLUDE_SYSTEM;
    D3D10_INCLUDE_LOCAL     :: _10_INCLUDE_LOCAL;
    D3D10_INCLUDE_SYSTEM    :: _10_INCLUDE_SYSTEM;
    D3D_INCLUDE_FORCE_DWORD :: INCLUDE_FORCE_DWORD;
}

ID3DInclude :: struct {
    vtable: *ID3DInclude_VTable;
}
ID3DInclude_VTable :: struct #type_info_none {
    Open: (this: *ID3DInclude, IncludeType: D3D_INCLUDE_TYPE, pFileName: *u8, pParentData: *void, ppData: **void, pBytes: *u32) -> HRESULT #cpp_method;
    Close: (this: *ID3DInclude, pData: *void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3DInclude) -> *ID3DInclude_VTable { return obj.vtable; }


D3D_SHADER_VARIABLE_CLASS :: enum s32 {
    SVC_SCALAR                :: 0;
    SVC_VECTOR                :: 1;
    SVC_MATRIX_ROWS           :: 2;
    SVC_MATRIX_COLUMNS        :: 3;
    SVC_OBJECT                :: 4;
    SVC_STRUCT                :: 5;
    SVC_INTERFACE_CLASS       :: 6;
    SVC_INTERFACE_POINTER     :: 7;
    _10_SVC_SCALAR            :: 0;
    _10_SVC_VECTOR            :: 1;
    _10_SVC_MATRIX_ROWS       :: 2;
    _10_SVC_MATRIX_COLUMNS    :: 3;
    _10_SVC_OBJECT            :: 4;
    _10_SVC_STRUCT            :: 5;
    _11_SVC_INTERFACE_CLASS   :: 6;
    _11_SVC_INTERFACE_POINTER :: 7;
    SVC_FORCE_DWORD           :: 2147483647;

    D3D_SVC_SCALAR              :: SVC_SCALAR;
    D3D_SVC_VECTOR              :: SVC_VECTOR;
    D3D_SVC_MATRIX_ROWS         :: SVC_MATRIX_ROWS;
    D3D_SVC_MATRIX_COLUMNS      :: SVC_MATRIX_COLUMNS;
    D3D_SVC_OBJECT              :: SVC_OBJECT;
    D3D_SVC_STRUCT              :: SVC_STRUCT;
    D3D_SVC_INTERFACE_CLASS     :: SVC_INTERFACE_CLASS;
    D3D_SVC_INTERFACE_POINTER   :: SVC_INTERFACE_POINTER;
    D3D10_SVC_SCALAR            :: _10_SVC_SCALAR;
    D3D10_SVC_VECTOR            :: _10_SVC_VECTOR;
    D3D10_SVC_MATRIX_ROWS       :: _10_SVC_MATRIX_ROWS;
    D3D10_SVC_MATRIX_COLUMNS    :: _10_SVC_MATRIX_COLUMNS;
    D3D10_SVC_OBJECT            :: _10_SVC_OBJECT;
    D3D10_SVC_STRUCT            :: _10_SVC_STRUCT;
    D3D11_SVC_INTERFACE_CLASS   :: _11_SVC_INTERFACE_CLASS;
    D3D11_SVC_INTERFACE_POINTER :: _11_SVC_INTERFACE_POINTER;
    D3D_SVC_FORCE_DWORD         :: SVC_FORCE_DWORD;
}

D3D_SHADER_VARIABLE_FLAGS :: enum_flags u32 {
    SVF_USERPACKED              :: 0x1;
    SVF_USED                    :: 0x2;
    SVF_INTERFACE_POINTER       :: 0x4;
    SVF_INTERFACE_PARAMETER     :: 0x8;
    _10_SVF_USERPACKED          :: 0x1;
    _10_SVF_USED                :: 0x2;
    _11_SVF_INTERFACE_POINTER   :: 0x4;
    _11_SVF_INTERFACE_PARAMETER :: 0x8;
    SVF_FORCE_DWORD             :: 0x7fffffff;

    D3D_SVF_USERPACKED            :: SVF_USERPACKED;
    D3D_SVF_USED                  :: SVF_USED;
    D3D_SVF_INTERFACE_POINTER     :: SVF_INTERFACE_POINTER;
    D3D_SVF_INTERFACE_PARAMETER   :: SVF_INTERFACE_PARAMETER;
    D3D10_SVF_USERPACKED          :: _10_SVF_USERPACKED;
    D3D10_SVF_USED                :: _10_SVF_USED;
    D3D11_SVF_INTERFACE_POINTER   :: _11_SVF_INTERFACE_POINTER;
    D3D11_SVF_INTERFACE_PARAMETER :: _11_SVF_INTERFACE_PARAMETER;
    D3D_SVF_FORCE_DWORD           :: SVF_FORCE_DWORD;
}

D3D_SHADER_VARIABLE_TYPE :: enum s32 {
    SVT_VOID                          :: 0;
    SVT_BOOL                          :: 1;
    SVT_INT                           :: 2;
    SVT_FLOAT                         :: 3;
    SVT_STRING                        :: 4;
    SVT_TEXTURE                       :: 5;
    SVT_TEXTURE1D                     :: 6;
    SVT_TEXTURE2D                     :: 7;
    SVT_TEXTURE3D                     :: 8;
    SVT_TEXTURECUBE                   :: 9;
    SVT_SAMPLER                       :: 10;
    SVT_SAMPLER1D                     :: 11;
    SVT_SAMPLER2D                     :: 12;
    SVT_SAMPLER3D                     :: 13;
    SVT_SAMPLERCUBE                   :: 14;
    SVT_PIXELSHADER                   :: 15;
    SVT_VERTEXSHADER                  :: 16;
    SVT_PIXELFRAGMENT                 :: 17;
    SVT_VERTEXFRAGMENT                :: 18;
    SVT_UINT                          :: 19;
    SVT_UINT8                         :: 20;
    SVT_GEOMETRYSHADER                :: 21;
    SVT_RASTERIZER                    :: 22;
    SVT_DEPTHSTENCIL                  :: 23;
    SVT_BLEND                         :: 24;
    SVT_BUFFER                        :: 25;
    SVT_CBUFFER                       :: 26;
    SVT_TBUFFER                       :: 27;
    SVT_TEXTURE1DARRAY                :: 28;
    SVT_TEXTURE2DARRAY                :: 29;
    SVT_RENDERTARGETVIEW              :: 30;
    SVT_DEPTHSTENCILVIEW              :: 31;
    SVT_TEXTURE2DMS                   :: 32;
    SVT_TEXTURE2DMSARRAY              :: 33;
    SVT_TEXTURECUBEARRAY              :: 34;
    SVT_HULLSHADER                    :: 35;
    SVT_DOMAINSHADER                  :: 36;
    SVT_INTERFACE_POINTER             :: 37;
    SVT_COMPUTESHADER                 :: 38;
    SVT_DOUBLE                        :: 39;
    SVT_RWTEXTURE1D                   :: 40;
    SVT_RWTEXTURE1DARRAY              :: 41;
    SVT_RWTEXTURE2D                   :: 42;
    SVT_RWTEXTURE2DARRAY              :: 43;
    SVT_RWTEXTURE3D                   :: 44;
    SVT_RWBUFFER                      :: 45;
    SVT_BYTEADDRESS_BUFFER            :: 46;
    SVT_RWBYTEADDRESS_BUFFER          :: 47;
    SVT_STRUCTURED_BUFFER             :: 48;
    SVT_RWSTRUCTURED_BUFFER           :: 49;
    SVT_APPEND_STRUCTURED_BUFFER      :: 50;
    SVT_CONSUME_STRUCTURED_BUFFER     :: 51;
    SVT_MIN8FLOAT                     :: 52;
    SVT_MIN10FLOAT                    :: 53;
    SVT_MIN16FLOAT                    :: 54;
    SVT_MIN12INT                      :: 55;
    SVT_MIN16INT                      :: 56;
    SVT_MIN16UINT                     :: 57;
    SVT_INT16                         :: 58;
    SVT_UINT16                        :: 59;
    SVT_FLOAT16                       :: 60;
    SVT_INT64                         :: 61;
    SVT_UINT64                        :: 62;
    _10_SVT_VOID                      :: 0;
    _10_SVT_BOOL                      :: 1;
    _10_SVT_INT                       :: 2;
    _10_SVT_FLOAT                     :: 3;
    _10_SVT_STRING                    :: 4;
    _10_SVT_TEXTURE                   :: 5;
    _10_SVT_TEXTURE1D                 :: 6;
    _10_SVT_TEXTURE2D                 :: 7;
    _10_SVT_TEXTURE3D                 :: 8;
    _10_SVT_TEXTURECUBE               :: 9;
    _10_SVT_SAMPLER                   :: 10;
    _10_SVT_SAMPLER1D                 :: 11;
    _10_SVT_SAMPLER2D                 :: 12;
    _10_SVT_SAMPLER3D                 :: 13;
    _10_SVT_SAMPLERCUBE               :: 14;
    _10_SVT_PIXELSHADER               :: 15;
    _10_SVT_VERTEXSHADER              :: 16;
    _10_SVT_PIXELFRAGMENT             :: 17;
    _10_SVT_VERTEXFRAGMENT            :: 18;
    _10_SVT_UINT                      :: 19;
    _10_SVT_UINT8                     :: 20;
    _10_SVT_GEOMETRYSHADER            :: 21;
    _10_SVT_RASTERIZER                :: 22;
    _10_SVT_DEPTHSTENCIL              :: 23;
    _10_SVT_BLEND                     :: 24;
    _10_SVT_BUFFER                    :: 25;
    _10_SVT_CBUFFER                   :: 26;
    _10_SVT_TBUFFER                   :: 27;
    _10_SVT_TEXTURE1DARRAY            :: 28;
    _10_SVT_TEXTURE2DARRAY            :: 29;
    _10_SVT_RENDERTARGETVIEW          :: 30;
    _10_SVT_DEPTHSTENCILVIEW          :: 31;
    _10_SVT_TEXTURE2DMS               :: 32;
    _10_SVT_TEXTURE2DMSARRAY          :: 33;
    _10_SVT_TEXTURECUBEARRAY          :: 34;
    _11_SVT_HULLSHADER                :: 35;
    _11_SVT_DOMAINSHADER              :: 36;
    _11_SVT_INTERFACE_POINTER         :: 37;
    _11_SVT_COMPUTESHADER             :: 38;
    _11_SVT_DOUBLE                    :: 39;
    _11_SVT_RWTEXTURE1D               :: 40;
    _11_SVT_RWTEXTURE1DARRAY          :: 41;
    _11_SVT_RWTEXTURE2D               :: 42;
    _11_SVT_RWTEXTURE2DARRAY          :: 43;
    _11_SVT_RWTEXTURE3D               :: 44;
    _11_SVT_RWBUFFER                  :: 45;
    _11_SVT_BYTEADDRESS_BUFFER        :: 46;
    _11_SVT_RWBYTEADDRESS_BUFFER      :: 47;
    _11_SVT_STRUCTURED_BUFFER         :: 48;
    _11_SVT_RWSTRUCTURED_BUFFER       :: 49;
    _11_SVT_APPEND_STRUCTURED_BUFFER  :: 50;
    _11_SVT_CONSUME_STRUCTURED_BUFFER :: 51;
    SVT_FORCE_DWORD                   :: 2147483647;

    D3D_SVT_VOID                        :: SVT_VOID;
    D3D_SVT_BOOL                        :: SVT_BOOL;
    D3D_SVT_INT                         :: SVT_INT;
    D3D_SVT_FLOAT                       :: SVT_FLOAT;
    D3D_SVT_STRING                      :: SVT_STRING;
    D3D_SVT_TEXTURE                     :: SVT_TEXTURE;
    D3D_SVT_TEXTURE1D                   :: SVT_TEXTURE1D;
    D3D_SVT_TEXTURE2D                   :: SVT_TEXTURE2D;
    D3D_SVT_TEXTURE3D                   :: SVT_TEXTURE3D;
    D3D_SVT_TEXTURECUBE                 :: SVT_TEXTURECUBE;
    D3D_SVT_SAMPLER                     :: SVT_SAMPLER;
    D3D_SVT_SAMPLER1D                   :: SVT_SAMPLER1D;
    D3D_SVT_SAMPLER2D                   :: SVT_SAMPLER2D;
    D3D_SVT_SAMPLER3D                   :: SVT_SAMPLER3D;
    D3D_SVT_SAMPLERCUBE                 :: SVT_SAMPLERCUBE;
    D3D_SVT_PIXELSHADER                 :: SVT_PIXELSHADER;
    D3D_SVT_VERTEXSHADER                :: SVT_VERTEXSHADER;
    D3D_SVT_PIXELFRAGMENT               :: SVT_PIXELFRAGMENT;
    D3D_SVT_VERTEXFRAGMENT              :: SVT_VERTEXFRAGMENT;
    D3D_SVT_UINT                        :: SVT_UINT;
    D3D_SVT_UINT8                       :: SVT_UINT8;
    D3D_SVT_GEOMETRYSHADER              :: SVT_GEOMETRYSHADER;
    D3D_SVT_RASTERIZER                  :: SVT_RASTERIZER;
    D3D_SVT_DEPTHSTENCIL                :: SVT_DEPTHSTENCIL;
    D3D_SVT_BLEND                       :: SVT_BLEND;
    D3D_SVT_BUFFER                      :: SVT_BUFFER;
    D3D_SVT_CBUFFER                     :: SVT_CBUFFER;
    D3D_SVT_TBUFFER                     :: SVT_TBUFFER;
    D3D_SVT_TEXTURE1DARRAY              :: SVT_TEXTURE1DARRAY;
    D3D_SVT_TEXTURE2DARRAY              :: SVT_TEXTURE2DARRAY;
    D3D_SVT_RENDERTARGETVIEW            :: SVT_RENDERTARGETVIEW;
    D3D_SVT_DEPTHSTENCILVIEW            :: SVT_DEPTHSTENCILVIEW;
    D3D_SVT_TEXTURE2DMS                 :: SVT_TEXTURE2DMS;
    D3D_SVT_TEXTURE2DMSARRAY            :: SVT_TEXTURE2DMSARRAY;
    D3D_SVT_TEXTURECUBEARRAY            :: SVT_TEXTURECUBEARRAY;
    D3D_SVT_HULLSHADER                  :: SVT_HULLSHADER;
    D3D_SVT_DOMAINSHADER                :: SVT_DOMAINSHADER;
    D3D_SVT_INTERFACE_POINTER           :: SVT_INTERFACE_POINTER;
    D3D_SVT_COMPUTESHADER               :: SVT_COMPUTESHADER;
    D3D_SVT_DOUBLE                      :: SVT_DOUBLE;
    D3D_SVT_RWTEXTURE1D                 :: SVT_RWTEXTURE1D;
    D3D_SVT_RWTEXTURE1DARRAY            :: SVT_RWTEXTURE1DARRAY;
    D3D_SVT_RWTEXTURE2D                 :: SVT_RWTEXTURE2D;
    D3D_SVT_RWTEXTURE2DARRAY            :: SVT_RWTEXTURE2DARRAY;
    D3D_SVT_RWTEXTURE3D                 :: SVT_RWTEXTURE3D;
    D3D_SVT_RWBUFFER                    :: SVT_RWBUFFER;
    D3D_SVT_BYTEADDRESS_BUFFER          :: SVT_BYTEADDRESS_BUFFER;
    D3D_SVT_RWBYTEADDRESS_BUFFER        :: SVT_RWBYTEADDRESS_BUFFER;
    D3D_SVT_STRUCTURED_BUFFER           :: SVT_STRUCTURED_BUFFER;
    D3D_SVT_RWSTRUCTURED_BUFFER         :: SVT_RWSTRUCTURED_BUFFER;
    D3D_SVT_APPEND_STRUCTURED_BUFFER    :: SVT_APPEND_STRUCTURED_BUFFER;
    D3D_SVT_CONSUME_STRUCTURED_BUFFER   :: SVT_CONSUME_STRUCTURED_BUFFER;
    D3D_SVT_MIN8FLOAT                   :: SVT_MIN8FLOAT;
    D3D_SVT_MIN10FLOAT                  :: SVT_MIN10FLOAT;
    D3D_SVT_MIN16FLOAT                  :: SVT_MIN16FLOAT;
    D3D_SVT_MIN12INT                    :: SVT_MIN12INT;
    D3D_SVT_MIN16INT                    :: SVT_MIN16INT;
    D3D_SVT_MIN16UINT                   :: SVT_MIN16UINT;
    D3D_SVT_INT16                       :: SVT_INT16;
    D3D_SVT_UINT16                      :: SVT_UINT16;
    D3D_SVT_FLOAT16                     :: SVT_FLOAT16;
    D3D_SVT_INT64                       :: SVT_INT64;
    D3D_SVT_UINT64                      :: SVT_UINT64;
    D3D10_SVT_VOID                      :: _10_SVT_VOID;
    D3D10_SVT_BOOL                      :: _10_SVT_BOOL;
    D3D10_SVT_INT                       :: _10_SVT_INT;
    D3D10_SVT_FLOAT                     :: _10_SVT_FLOAT;
    D3D10_SVT_STRING                    :: _10_SVT_STRING;
    D3D10_SVT_TEXTURE                   :: _10_SVT_TEXTURE;
    D3D10_SVT_TEXTURE1D                 :: _10_SVT_TEXTURE1D;
    D3D10_SVT_TEXTURE2D                 :: _10_SVT_TEXTURE2D;
    D3D10_SVT_TEXTURE3D                 :: _10_SVT_TEXTURE3D;
    D3D10_SVT_TEXTURECUBE               :: _10_SVT_TEXTURECUBE;
    D3D10_SVT_SAMPLER                   :: _10_SVT_SAMPLER;
    D3D10_SVT_SAMPLER1D                 :: _10_SVT_SAMPLER1D;
    D3D10_SVT_SAMPLER2D                 :: _10_SVT_SAMPLER2D;
    D3D10_SVT_SAMPLER3D                 :: _10_SVT_SAMPLER3D;
    D3D10_SVT_SAMPLERCUBE               :: _10_SVT_SAMPLERCUBE;
    D3D10_SVT_PIXELSHADER               :: _10_SVT_PIXELSHADER;
    D3D10_SVT_VERTEXSHADER              :: _10_SVT_VERTEXSHADER;
    D3D10_SVT_PIXELFRAGMENT             :: _10_SVT_PIXELFRAGMENT;
    D3D10_SVT_VERTEXFRAGMENT            :: _10_SVT_VERTEXFRAGMENT;
    D3D10_SVT_UINT                      :: _10_SVT_UINT;
    D3D10_SVT_UINT8                     :: _10_SVT_UINT8;
    D3D10_SVT_GEOMETRYSHADER            :: _10_SVT_GEOMETRYSHADER;
    D3D10_SVT_RASTERIZER                :: _10_SVT_RASTERIZER;
    D3D10_SVT_DEPTHSTENCIL              :: _10_SVT_DEPTHSTENCIL;
    D3D10_SVT_BLEND                     :: _10_SVT_BLEND;
    D3D10_SVT_BUFFER                    :: _10_SVT_BUFFER;
    D3D10_SVT_CBUFFER                   :: _10_SVT_CBUFFER;
    D3D10_SVT_TBUFFER                   :: _10_SVT_TBUFFER;
    D3D10_SVT_TEXTURE1DARRAY            :: _10_SVT_TEXTURE1DARRAY;
    D3D10_SVT_TEXTURE2DARRAY            :: _10_SVT_TEXTURE2DARRAY;
    D3D10_SVT_RENDERTARGETVIEW          :: _10_SVT_RENDERTARGETVIEW;
    D3D10_SVT_DEPTHSTENCILVIEW          :: _10_SVT_DEPTHSTENCILVIEW;
    D3D10_SVT_TEXTURE2DMS               :: _10_SVT_TEXTURE2DMS;
    D3D10_SVT_TEXTURE2DMSARRAY          :: _10_SVT_TEXTURE2DMSARRAY;
    D3D10_SVT_TEXTURECUBEARRAY          :: _10_SVT_TEXTURECUBEARRAY;
    D3D11_SVT_HULLSHADER                :: _11_SVT_HULLSHADER;
    D3D11_SVT_DOMAINSHADER              :: _11_SVT_DOMAINSHADER;
    D3D11_SVT_INTERFACE_POINTER         :: _11_SVT_INTERFACE_POINTER;
    D3D11_SVT_COMPUTESHADER             :: _11_SVT_COMPUTESHADER;
    D3D11_SVT_DOUBLE                    :: _11_SVT_DOUBLE;
    D3D11_SVT_RWTEXTURE1D               :: _11_SVT_RWTEXTURE1D;
    D3D11_SVT_RWTEXTURE1DARRAY          :: _11_SVT_RWTEXTURE1DARRAY;
    D3D11_SVT_RWTEXTURE2D               :: _11_SVT_RWTEXTURE2D;
    D3D11_SVT_RWTEXTURE2DARRAY          :: _11_SVT_RWTEXTURE2DARRAY;
    D3D11_SVT_RWTEXTURE3D               :: _11_SVT_RWTEXTURE3D;
    D3D11_SVT_RWBUFFER                  :: _11_SVT_RWBUFFER;
    D3D11_SVT_BYTEADDRESS_BUFFER        :: _11_SVT_BYTEADDRESS_BUFFER;
    D3D11_SVT_RWBYTEADDRESS_BUFFER      :: _11_SVT_RWBYTEADDRESS_BUFFER;
    D3D11_SVT_STRUCTURED_BUFFER         :: _11_SVT_STRUCTURED_BUFFER;
    D3D11_SVT_RWSTRUCTURED_BUFFER       :: _11_SVT_RWSTRUCTURED_BUFFER;
    D3D11_SVT_APPEND_STRUCTURED_BUFFER  :: _11_SVT_APPEND_STRUCTURED_BUFFER;
    D3D11_SVT_CONSUME_STRUCTURED_BUFFER :: _11_SVT_CONSUME_STRUCTURED_BUFFER;
    D3D_SVT_FORCE_DWORD                 :: SVT_FORCE_DWORD;
}

D3D_SHADER_INPUT_FLAGS :: enum_flags u32 {
    SIF_USERPACKED              :: 0x1;
    SIF_COMPARISON_SAMPLER      :: 0x2;
    SIF_TEXTURE_COMPONENT_0     :: 0x4;
    SIF_TEXTURE_COMPONENT_1     :: 0x8;
    SIF_TEXTURE_COMPONENTS      :: 0xc;
    SIF_UNUSED                  :: 0x10;
    _10_SIF_USERPACKED          :: 0x1;
    _10_SIF_COMPARISON_SAMPLER  :: 0x2;
    _10_SIF_TEXTURE_COMPONENT_0 :: 0x4;
    _10_SIF_TEXTURE_COMPONENT_1 :: 0x8;
    _10_SIF_TEXTURE_COMPONENTS  :: 0xc;
    SIF_FORCE_DWORD             :: 0x7fffffff;

    D3D_SIF_USERPACKED            :: SIF_USERPACKED;
    D3D_SIF_COMPARISON_SAMPLER    :: SIF_COMPARISON_SAMPLER;
    D3D_SIF_TEXTURE_COMPONENT_0   :: SIF_TEXTURE_COMPONENT_0;
    D3D_SIF_TEXTURE_COMPONENT_1   :: SIF_TEXTURE_COMPONENT_1;
    D3D_SIF_TEXTURE_COMPONENTS    :: SIF_TEXTURE_COMPONENTS;
    D3D_SIF_UNUSED                :: SIF_UNUSED;
    D3D10_SIF_USERPACKED          :: _10_SIF_USERPACKED;
    D3D10_SIF_COMPARISON_SAMPLER  :: _10_SIF_COMPARISON_SAMPLER;
    D3D10_SIF_TEXTURE_COMPONENT_0 :: _10_SIF_TEXTURE_COMPONENT_0;
    D3D10_SIF_TEXTURE_COMPONENT_1 :: _10_SIF_TEXTURE_COMPONENT_1;
    D3D10_SIF_TEXTURE_COMPONENTS  :: _10_SIF_TEXTURE_COMPONENTS;
    D3D_SIF_FORCE_DWORD           :: SIF_FORCE_DWORD;
}

D3D_SHADER_INPUT_TYPE :: enum s32 {
    SIT_CBUFFER                           :: 0;
    SIT_TBUFFER                           :: 1;
    SIT_TEXTURE                           :: 2;
    SIT_SAMPLER                           :: 3;
    SIT_UAV_RWTYPED                       :: 4;
    SIT_STRUCTURED                        :: 5;
    SIT_UAV_RWSTRUCTURED                  :: 6;
    SIT_BYTEADDRESS                       :: 7;
    SIT_UAV_RWBYTEADDRESS                 :: 8;
    SIT_UAV_APPEND_STRUCTURED             :: 9;
    SIT_UAV_CONSUME_STRUCTURED            :: 10;
    SIT_UAV_RWSTRUCTURED_WITH_COUNTER     :: 11;
    SIT_RTACCELERATIONSTRUCTURE           :: 12;
    SIT_UAV_FEEDBACKTEXTURE               :: 13;
    _10_SIT_CBUFFER                       :: 0;
    _10_SIT_TBUFFER                       :: 1;
    _10_SIT_TEXTURE                       :: 2;
    _10_SIT_SAMPLER                       :: 3;
    _11_SIT_UAV_RWTYPED                   :: 4;
    _11_SIT_STRUCTURED                    :: 5;
    _11_SIT_UAV_RWSTRUCTURED              :: 6;
    _11_SIT_BYTEADDRESS                   :: 7;
    _11_SIT_UAV_RWBYTEADDRESS             :: 8;
    _11_SIT_UAV_APPEND_STRUCTURED         :: 9;
    _11_SIT_UAV_CONSUME_STRUCTURED        :: 10;
    _11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER :: 11;

    D3D_SIT_CBUFFER                         :: SIT_CBUFFER;
    D3D_SIT_TBUFFER                         :: SIT_TBUFFER;
    D3D_SIT_TEXTURE                         :: SIT_TEXTURE;
    D3D_SIT_SAMPLER                         :: SIT_SAMPLER;
    D3D_SIT_UAV_RWTYPED                     :: SIT_UAV_RWTYPED;
    D3D_SIT_STRUCTURED                      :: SIT_STRUCTURED;
    D3D_SIT_UAV_RWSTRUCTURED                :: SIT_UAV_RWSTRUCTURED;
    D3D_SIT_BYTEADDRESS                     :: SIT_BYTEADDRESS;
    D3D_SIT_UAV_RWBYTEADDRESS               :: SIT_UAV_RWBYTEADDRESS;
    D3D_SIT_UAV_APPEND_STRUCTURED           :: SIT_UAV_APPEND_STRUCTURED;
    D3D_SIT_UAV_CONSUME_STRUCTURED          :: SIT_UAV_CONSUME_STRUCTURED;
    D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER   :: SIT_UAV_RWSTRUCTURED_WITH_COUNTER;
    D3D_SIT_RTACCELERATIONSTRUCTURE         :: SIT_RTACCELERATIONSTRUCTURE;
    D3D_SIT_UAV_FEEDBACKTEXTURE             :: SIT_UAV_FEEDBACKTEXTURE;
    D3D10_SIT_CBUFFER                       :: _10_SIT_CBUFFER;
    D3D10_SIT_TBUFFER                       :: _10_SIT_TBUFFER;
    D3D10_SIT_TEXTURE                       :: _10_SIT_TEXTURE;
    D3D10_SIT_SAMPLER                       :: _10_SIT_SAMPLER;
    D3D11_SIT_UAV_RWTYPED                   :: _11_SIT_UAV_RWTYPED;
    D3D11_SIT_STRUCTURED                    :: _11_SIT_STRUCTURED;
    D3D11_SIT_UAV_RWSTRUCTURED              :: _11_SIT_UAV_RWSTRUCTURED;
    D3D11_SIT_BYTEADDRESS                   :: _11_SIT_BYTEADDRESS;
    D3D11_SIT_UAV_RWBYTEADDRESS             :: _11_SIT_UAV_RWBYTEADDRESS;
    D3D11_SIT_UAV_APPEND_STRUCTURED         :: _11_SIT_UAV_APPEND_STRUCTURED;
    D3D11_SIT_UAV_CONSUME_STRUCTURED        :: _11_SIT_UAV_CONSUME_STRUCTURED;
    D3D11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER :: _11_SIT_UAV_RWSTRUCTURED_WITH_COUNTER;
}

D3D_SHADER_CBUFFER_FLAGS :: enum_flags u32 {
    CBF_USERPACKED     :: 0x1;
    _10_CBF_USERPACKED :: 0x1;
    CBF_FORCE_DWORD    :: 0x7fffffff;

    D3D_CBF_USERPACKED   :: CBF_USERPACKED;
    D3D10_CBF_USERPACKED :: _10_CBF_USERPACKED;
    D3D_CBF_FORCE_DWORD  :: CBF_FORCE_DWORD;
}

D3D_CBUFFER_TYPE :: enum s32 {
    CT_CBUFFER                :: 0;
    CT_TBUFFER                :: 1;
    CT_INTERFACE_POINTERS     :: 2;
    CT_RESOURCE_BIND_INFO     :: 3;
    _10_CT_CBUFFER            :: 0;
    _10_CT_TBUFFER            :: 1;
    _11_CT_CBUFFER            :: 0;
    _11_CT_TBUFFER            :: 1;
    _11_CT_INTERFACE_POINTERS :: 2;
    _11_CT_RESOURCE_BIND_INFO :: 3;

    D3D_CT_CBUFFER              :: CT_CBUFFER;
    D3D_CT_TBUFFER              :: CT_TBUFFER;
    D3D_CT_INTERFACE_POINTERS   :: CT_INTERFACE_POINTERS;
    D3D_CT_RESOURCE_BIND_INFO   :: CT_RESOURCE_BIND_INFO;
    D3D10_CT_CBUFFER            :: _10_CT_CBUFFER;
    D3D10_CT_TBUFFER            :: _10_CT_TBUFFER;
    D3D11_CT_CBUFFER            :: _11_CT_CBUFFER;
    D3D11_CT_TBUFFER            :: _11_CT_TBUFFER;
    D3D11_CT_INTERFACE_POINTERS :: _11_CT_INTERFACE_POINTERS;
    D3D11_CT_RESOURCE_BIND_INFO :: _11_CT_RESOURCE_BIND_INFO;
}

D3D_NAME :: enum s32 {
    UNDEFINED                                :: 0;
    POSITION                                 :: 1;
    CLIP_DISTANCE                            :: 2;
    CULL_DISTANCE                            :: 3;
    RENDER_TARGET_ARRAY_INDEX                :: 4;
    VIEWPORT_ARRAY_INDEX                     :: 5;
    VERTEX_ID                                :: 6;
    PRIMITIVE_ID                             :: 7;
    INSTANCE_ID                              :: 8;
    IS_FRONT_FACE                            :: 9;
    SAMPLE_INDEX                             :: 10;
    FINAL_QUAD_EDGE_TESSFACTOR               :: 11;
    FINAL_QUAD_INSIDE_TESSFACTOR             :: 12;
    FINAL_TRI_EDGE_TESSFACTOR                :: 13;
    FINAL_TRI_INSIDE_TESSFACTOR              :: 14;
    FINAL_LINE_DETAIL_TESSFACTOR             :: 15;
    FINAL_LINE_DENSITY_TESSFACTOR            :: 16;
    BARYCENTRICS                             :: 23;
    SHADINGRATE                              :: 24;
    CULLPRIMITIVE                            :: 25;
    TARGET                                   :: 64;
    DEPTH                                    :: 65;
    COVERAGE                                 :: 66;
    DEPTH_GREATER_EQUAL                      :: 67;
    DEPTH_LESS_EQUAL                         :: 68;
    STENCIL_REF                              :: 69;
    INNER_COVERAGE                           :: 70;
    D3D10_NAME_UNDEFINED                     :: 0;
    D3D10_NAME_POSITION                      :: 1;
    D3D10_NAME_CLIP_DISTANCE                 :: 2;
    D3D10_NAME_CULL_DISTANCE                 :: 3;
    D3D10_NAME_RENDER_TARGET_ARRAY_INDEX     :: 4;
    D3D10_NAME_VIEWPORT_ARRAY_INDEX          :: 5;
    D3D10_NAME_VERTEX_ID                     :: 6;
    D3D10_NAME_PRIMITIVE_ID                  :: 7;
    D3D10_NAME_INSTANCE_ID                   :: 8;
    D3D10_NAME_IS_FRONT_FACE                 :: 9;
    D3D10_NAME_SAMPLE_INDEX                  :: 10;
    D3D10_NAME_TARGET                        :: 64;
    D3D10_NAME_DEPTH                         :: 65;
    D3D10_NAME_COVERAGE                      :: 66;
    D3D11_NAME_FINAL_QUAD_EDGE_TESSFACTOR    :: 11;
    D3D11_NAME_FINAL_QUAD_INSIDE_TESSFACTOR  :: 12;
    D3D11_NAME_FINAL_TRI_EDGE_TESSFACTOR     :: 13;
    D3D11_NAME_FINAL_TRI_INSIDE_TESSFACTOR   :: 14;
    D3D11_NAME_FINAL_LINE_DETAIL_TESSFACTOR  :: 15;
    D3D11_NAME_FINAL_LINE_DENSITY_TESSFACTOR :: 16;
    D3D11_NAME_DEPTH_GREATER_EQUAL           :: 67;
    D3D11_NAME_DEPTH_LESS_EQUAL              :: 68;
    D3D11_NAME_STENCIL_REF                   :: 69;
    D3D11_NAME_INNER_COVERAGE                :: 70;
    D3D12_NAME_BARYCENTRICS                  :: 23;
    D3D12_NAME_SHADINGRATE                   :: 24;
    D3D12_NAME_CULLPRIMITIVE                 :: 25;

    D3D_NAME_UNDEFINED                     :: UNDEFINED;
    D3D_NAME_POSITION                      :: POSITION;
    D3D_NAME_CLIP_DISTANCE                 :: CLIP_DISTANCE;
    D3D_NAME_CULL_DISTANCE                 :: CULL_DISTANCE;
    D3D_NAME_RENDER_TARGET_ARRAY_INDEX     :: RENDER_TARGET_ARRAY_INDEX;
    D3D_NAME_VIEWPORT_ARRAY_INDEX          :: VIEWPORT_ARRAY_INDEX;
    D3D_NAME_VERTEX_ID                     :: VERTEX_ID;
    D3D_NAME_PRIMITIVE_ID                  :: PRIMITIVE_ID;
    D3D_NAME_INSTANCE_ID                   :: INSTANCE_ID;
    D3D_NAME_IS_FRONT_FACE                 :: IS_FRONT_FACE;
    D3D_NAME_SAMPLE_INDEX                  :: SAMPLE_INDEX;
    D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR    :: FINAL_QUAD_EDGE_TESSFACTOR;
    D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR  :: FINAL_QUAD_INSIDE_TESSFACTOR;
    D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR     :: FINAL_TRI_EDGE_TESSFACTOR;
    D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR   :: FINAL_TRI_INSIDE_TESSFACTOR;
    D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR  :: FINAL_LINE_DETAIL_TESSFACTOR;
    D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR :: FINAL_LINE_DENSITY_TESSFACTOR;
    D3D_NAME_BARYCENTRICS                  :: BARYCENTRICS;
    D3D_NAME_SHADINGRATE                   :: SHADINGRATE;
    D3D_NAME_CULLPRIMITIVE                 :: CULLPRIMITIVE;
    D3D_NAME_TARGET                        :: TARGET;
    D3D_NAME_DEPTH                         :: DEPTH;
    D3D_NAME_COVERAGE                      :: COVERAGE;
    D3D_NAME_DEPTH_GREATER_EQUAL           :: DEPTH_GREATER_EQUAL;
    D3D_NAME_DEPTH_LESS_EQUAL              :: DEPTH_LESS_EQUAL;
    D3D_NAME_STENCIL_REF                   :: STENCIL_REF;
    D3D_NAME_INNER_COVERAGE                :: INNER_COVERAGE;
}

D3D_RESOURCE_RETURN_TYPE :: enum s32 {
    RETURN_TYPE_UNORM         :: 1;
    RETURN_TYPE_SNORM         :: 2;
    RETURN_TYPE_SINT          :: 3;
    RETURN_TYPE_UINT          :: 4;
    RETURN_TYPE_FLOAT         :: 5;
    RETURN_TYPE_MIXED         :: 6;
    RETURN_TYPE_DOUBLE        :: 7;
    RETURN_TYPE_CONTINUED     :: 8;
    _10_RETURN_TYPE_UNORM     :: 1;
    _10_RETURN_TYPE_SNORM     :: 2;
    _10_RETURN_TYPE_SINT      :: 3;
    _10_RETURN_TYPE_UINT      :: 4;
    _10_RETURN_TYPE_FLOAT     :: 5;
    _10_RETURN_TYPE_MIXED     :: 6;
    _11_RETURN_TYPE_UNORM     :: 1;
    _11_RETURN_TYPE_SNORM     :: 2;
    _11_RETURN_TYPE_SINT      :: 3;
    _11_RETURN_TYPE_UINT      :: 4;
    _11_RETURN_TYPE_FLOAT     :: 5;
    _11_RETURN_TYPE_MIXED     :: 6;
    _11_RETURN_TYPE_DOUBLE    :: 7;
    _11_RETURN_TYPE_CONTINUED :: 8;

    D3D_RETURN_TYPE_UNORM       :: RETURN_TYPE_UNORM;
    D3D_RETURN_TYPE_SNORM       :: RETURN_TYPE_SNORM;
    D3D_RETURN_TYPE_SINT        :: RETURN_TYPE_SINT;
    D3D_RETURN_TYPE_UINT        :: RETURN_TYPE_UINT;
    D3D_RETURN_TYPE_FLOAT       :: RETURN_TYPE_FLOAT;
    D3D_RETURN_TYPE_MIXED       :: RETURN_TYPE_MIXED;
    D3D_RETURN_TYPE_DOUBLE      :: RETURN_TYPE_DOUBLE;
    D3D_RETURN_TYPE_CONTINUED   :: RETURN_TYPE_CONTINUED;
    D3D10_RETURN_TYPE_UNORM     :: _10_RETURN_TYPE_UNORM;
    D3D10_RETURN_TYPE_SNORM     :: _10_RETURN_TYPE_SNORM;
    D3D10_RETURN_TYPE_SINT      :: _10_RETURN_TYPE_SINT;
    D3D10_RETURN_TYPE_UINT      :: _10_RETURN_TYPE_UINT;
    D3D10_RETURN_TYPE_FLOAT     :: _10_RETURN_TYPE_FLOAT;
    D3D10_RETURN_TYPE_MIXED     :: _10_RETURN_TYPE_MIXED;
    D3D11_RETURN_TYPE_UNORM     :: _11_RETURN_TYPE_UNORM;
    D3D11_RETURN_TYPE_SNORM     :: _11_RETURN_TYPE_SNORM;
    D3D11_RETURN_TYPE_SINT      :: _11_RETURN_TYPE_SINT;
    D3D11_RETURN_TYPE_UINT      :: _11_RETURN_TYPE_UINT;
    D3D11_RETURN_TYPE_FLOAT     :: _11_RETURN_TYPE_FLOAT;
    D3D11_RETURN_TYPE_MIXED     :: _11_RETURN_TYPE_MIXED;
    D3D11_RETURN_TYPE_DOUBLE    :: _11_RETURN_TYPE_DOUBLE;
    D3D11_RETURN_TYPE_CONTINUED :: _11_RETURN_TYPE_CONTINUED;
}

D3D_REGISTER_COMPONENT_TYPE :: enum s32 {
    REGISTER_COMPONENT_UNKNOWN     :: 0;
    REGISTER_COMPONENT_UINT32      :: 1;
    REGISTER_COMPONENT_SINT32      :: 2;
    REGISTER_COMPONENT_FLOAT32     :: 3;
    _10_REGISTER_COMPONENT_UNKNOWN :: 0;
    _10_REGISTER_COMPONENT_UINT32  :: 1;
    _10_REGISTER_COMPONENT_SINT32  :: 2;
    _10_REGISTER_COMPONENT_FLOAT32 :: 3;

    D3D_REGISTER_COMPONENT_UNKNOWN   :: REGISTER_COMPONENT_UNKNOWN;
    D3D_REGISTER_COMPONENT_UINT32    :: REGISTER_COMPONENT_UINT32;
    D3D_REGISTER_COMPONENT_SINT32    :: REGISTER_COMPONENT_SINT32;
    D3D_REGISTER_COMPONENT_FLOAT32   :: REGISTER_COMPONENT_FLOAT32;
    D3D10_REGISTER_COMPONENT_UNKNOWN :: _10_REGISTER_COMPONENT_UNKNOWN;
    D3D10_REGISTER_COMPONENT_UINT32  :: _10_REGISTER_COMPONENT_UINT32;
    D3D10_REGISTER_COMPONENT_SINT32  :: _10_REGISTER_COMPONENT_SINT32;
    D3D10_REGISTER_COMPONENT_FLOAT32 :: _10_REGISTER_COMPONENT_FLOAT32;
}

D3D_TESSELLATOR_DOMAIN :: enum s32 {
    UNDEFINED                          :: 0;
    ISOLINE                            :: 1;
    TRI                                :: 2;
    QUAD                               :: 3;
    D3D11_TESSELLATOR_DOMAIN_UNDEFINED :: 0;
    D3D11_TESSELLATOR_DOMAIN_ISOLINE   :: 1;
    D3D11_TESSELLATOR_DOMAIN_TRI       :: 2;
    D3D11_TESSELLATOR_DOMAIN_QUAD      :: 3;

    D3D_TESSELLATOR_DOMAIN_UNDEFINED :: UNDEFINED;
    D3D_TESSELLATOR_DOMAIN_ISOLINE   :: ISOLINE;
    D3D_TESSELLATOR_DOMAIN_TRI       :: TRI;
    D3D_TESSELLATOR_DOMAIN_QUAD      :: QUAD;
}

D3D_TESSELLATOR_PARTITIONING :: enum s32 {
    UNDEFINED                                      :: 0;
    INTEGER                                        :: 1;
    POW2                                           :: 2;
    FRACTIONAL_ODD                                 :: 3;
    FRACTIONAL_EVEN                                :: 4;
    D3D11_TESSELLATOR_PARTITIONING_UNDEFINED       :: 0;
    D3D11_TESSELLATOR_PARTITIONING_INTEGER         :: 1;
    D3D11_TESSELLATOR_PARTITIONING_POW2            :: 2;
    D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD  :: 3;
    D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN :: 4;

    D3D_TESSELLATOR_PARTITIONING_UNDEFINED       :: UNDEFINED;
    D3D_TESSELLATOR_PARTITIONING_INTEGER         :: INTEGER;
    D3D_TESSELLATOR_PARTITIONING_POW2            :: POW2;
    D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD  :: FRACTIONAL_ODD;
    D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN :: FRACTIONAL_EVEN;
}

D3D_TESSELLATOR_OUTPUT_PRIMITIVE :: enum s32 {
    TESSELLATOR_OUTPUT_UNDEFINED        :: 0;
    TESSELLATOR_OUTPUT_POINT            :: 1;
    TESSELLATOR_OUTPUT_LINE             :: 2;
    TESSELLATOR_OUTPUT_TRIANGLE_CW      :: 3;
    TESSELLATOR_OUTPUT_TRIANGLE_CCW     :: 4;
    _11_TESSELLATOR_OUTPUT_UNDEFINED    :: 0;
    _11_TESSELLATOR_OUTPUT_POINT        :: 1;
    _11_TESSELLATOR_OUTPUT_LINE         :: 2;
    _11_TESSELLATOR_OUTPUT_TRIANGLE_CW  :: 3;
    _11_TESSELLATOR_OUTPUT_TRIANGLE_CCW :: 4;

    D3D_TESSELLATOR_OUTPUT_UNDEFINED      :: TESSELLATOR_OUTPUT_UNDEFINED;
    D3D_TESSELLATOR_OUTPUT_POINT          :: TESSELLATOR_OUTPUT_POINT;
    D3D_TESSELLATOR_OUTPUT_LINE           :: TESSELLATOR_OUTPUT_LINE;
    D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW    :: TESSELLATOR_OUTPUT_TRIANGLE_CW;
    D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW   :: TESSELLATOR_OUTPUT_TRIANGLE_CCW;
    D3D11_TESSELLATOR_OUTPUT_UNDEFINED    :: _11_TESSELLATOR_OUTPUT_UNDEFINED;
    D3D11_TESSELLATOR_OUTPUT_POINT        :: _11_TESSELLATOR_OUTPUT_POINT;
    D3D11_TESSELLATOR_OUTPUT_LINE         :: _11_TESSELLATOR_OUTPUT_LINE;
    D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW  :: _11_TESSELLATOR_OUTPUT_TRIANGLE_CW;
    D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW :: _11_TESSELLATOR_OUTPUT_TRIANGLE_CCW;
}

D3D_MIN_PRECISION :: enum s32 {
    DEFAULT   :: 0;
    FLOAT_16  :: 1;
    FLOAT_2_8 :: 2;
    RESERVED  :: 3;
    SINT_16   :: 4;
    UINT_16   :: 5;
    ANY_16    :: 240;
    ANY_10    :: 241;

    D3D_MIN_PRECISION_DEFAULT   :: DEFAULT;
    D3D_MIN_PRECISION_FLOAT_16  :: FLOAT_16;
    D3D_MIN_PRECISION_FLOAT_2_8 :: FLOAT_2_8;
    D3D_MIN_PRECISION_RESERVED  :: RESERVED;
    D3D_MIN_PRECISION_SINT_16   :: SINT_16;
    D3D_MIN_PRECISION_UINT_16   :: UINT_16;
    D3D_MIN_PRECISION_ANY_16    :: ANY_16;
    D3D_MIN_PRECISION_ANY_10    :: ANY_10;
}

D3D_INTERPOLATION_MODE :: enum s32 {
    UNDEFINED                     :: 0;
    CONSTANT                      :: 1;
    LINEAR                        :: 2;
    LINEAR_CENTROID               :: 3;
    LINEAR_NOPERSPECTIVE          :: 4;
    LINEAR_NOPERSPECTIVE_CENTROID :: 5;
    LINEAR_SAMPLE                 :: 6;
    LINEAR_NOPERSPECTIVE_SAMPLE   :: 7;

    D3D_INTERPOLATION_UNDEFINED                     :: UNDEFINED;
    D3D_INTERPOLATION_CONSTANT                      :: CONSTANT;
    D3D_INTERPOLATION_LINEAR                        :: LINEAR;
    D3D_INTERPOLATION_LINEAR_CENTROID               :: LINEAR_CENTROID;
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE          :: LINEAR_NOPERSPECTIVE;
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID :: LINEAR_NOPERSPECTIVE_CENTROID;
    D3D_INTERPOLATION_LINEAR_SAMPLE                 :: LINEAR_SAMPLE;
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE   :: LINEAR_NOPERSPECTIVE_SAMPLE;
}

D3D_PARAMETER_FLAGS :: enum_flags u32 {
    NONE        :: 0x0;
    IN          :: 0x1;
    OUT         :: 0x2;
    FORCE_DWORD :: 0x7fffffff;

    D3D_PF_NONE        :: NONE;
    D3D_PF_IN          :: IN;
    D3D_PF_OUT         :: OUT;
    D3D_PF_FORCE_DWORD :: FORCE_DWORD;
}

D3D_FORMAT_LAYOUT :: enum s32 {
    STANDARD :: 0;
    CUSTOM   :: -1;

    D3DFL_STANDARD :: STANDARD;
    D3DFL_CUSTOM   :: CUSTOM;
}

D3D_FORMAT_TYPE_LEVEL :: enum s32 {
    NO_TYPE      :: 0;
    PARTIAL_TYPE :: -2;
    FULL_TYPE    :: -1;

    D3DFTL_NO_TYPE      :: NO_TYPE;
    D3DFTL_PARTIAL_TYPE :: PARTIAL_TYPE;
    D3DFTL_FULL_TYPE    :: FULL_TYPE;
}

D3D_FORMAT_COMPONENT_NAME :: enum s32 {
    R :: -4;
    G :: -3;
    B :: -2;
    A :: -1;
    D :: 0;
    S :: 1;
    X :: 2;

    D3DFCN_R :: R;
    D3DFCN_G :: G;
    D3DFCN_B :: B;
    D3DFCN_A :: A;
    D3DFCN_D :: D;
    D3DFCN_S :: S;
    D3DFCN_X :: X;
}

D3D_FORMAT_COMPONENT_INTERPRETATION :: enum s32 {
    TYPELESS         :: 0;
    FLOAT            :: -4;
    SNORM            :: -3;
    UNORM            :: -2;
    SINT             :: -1;
    UINT             :: 1;
    UNORM_SRGB       :: 2;
    BIASED_FIXED_2_8 :: 3;

    D3DFCI_TYPELESS         :: TYPELESS;
    D3DFCI_FLOAT            :: FLOAT;
    D3DFCI_SNORM            :: SNORM;
    D3DFCI_UNORM            :: UNORM;
    D3DFCI_SINT             :: SINT;
    D3DFCI_UINT             :: UINT;
    D3DFCI_UNORM_SRGB       :: UNORM_SRGB;
    D3DFCI_BIASED_FIXED_2_8 :: BIASED_FIXED_2_8;
}

WKPDID_D3DDebugObjectNameW: GUID;
WKPDID_CommentStringW: GUID;
WKPDID_D3D12UniqueObjectId: GUID;

D3D_TEXTURE_LAYOUT_ROW_MAJOR: GUID;
D3D_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE: GUID;

D3D12_GPU_VIRTUAL_ADDRESS :: u64;

D3D12_COMMAND_LIST_TYPE :: enum s32 {
    DIRECT        :: 0;
    BUNDLE        :: 1;
    COMPUTE       :: 2;
    COPY          :: 3;
    VIDEO_DECODE  :: 4;
    VIDEO_PROCESS :: 5;
    VIDEO_ENCODE  :: 6;
    NONE          :: -1;

    D3D12_COMMAND_LIST_TYPE_DIRECT        :: DIRECT;
    D3D12_COMMAND_LIST_TYPE_BUNDLE        :: BUNDLE;
    D3D12_COMMAND_LIST_TYPE_COMPUTE       :: COMPUTE;
    D3D12_COMMAND_LIST_TYPE_COPY          :: COPY;
    D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE  :: VIDEO_DECODE;
    D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS :: VIDEO_PROCESS;
    D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE  :: VIDEO_ENCODE;
    D3D12_COMMAND_LIST_TYPE_NONE          :: NONE;
}

D3D12_COMMAND_QUEUE_FLAGS :: enum_flags u32 {
    NONE                :: 0x0;
    DISABLE_GPU_TIMEOUT :: 0x1;

    D3D12_COMMAND_QUEUE_FLAG_NONE                :: NONE;
    D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT :: DISABLE_GPU_TIMEOUT;
}

D3D12_COMMAND_QUEUE_PRIORITY :: enum s32 {
    NORMAL          :: 0;
    HIGH            :: 100;
    GLOBAL_REALTIME :: 10000;

    D3D12_COMMAND_QUEUE_PRIORITY_NORMAL          :: NORMAL;
    D3D12_COMMAND_QUEUE_PRIORITY_HIGH            :: HIGH;
    D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME :: GLOBAL_REALTIME;
}

D3D12_COMMAND_QUEUE_DESC :: struct {
    Type:     D3D12_COMMAND_LIST_TYPE;
    Priority: s32;
    Flags:    D3D12_COMMAND_QUEUE_FLAGS;
    NodeMask: u32;
}

D3D12_PRIMITIVE_TOPOLOGY_TYPE :: enum s32 {
    UNDEFINED :: 0;
    POINT     :: 1;
    LINE      :: 2;
    TRIANGLE  :: 3;
    PATCH     :: 4;

    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED :: UNDEFINED;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT     :: POINT;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE      :: LINE;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE  :: TRIANGLE;
    D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH     :: PATCH;
}

D3D12_INPUT_CLASSIFICATION :: enum s32 {
    PER_VERTEX_DATA   :: 0;
    PER_INSTANCE_DATA :: 1;

    D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA   :: PER_VERTEX_DATA;
    D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA :: PER_INSTANCE_DATA;
}

D3D12_INPUT_ELEMENT_DESC :: struct {
    SemanticName:         *u8;
    SemanticIndex:        u32;
    Format:               DXGI_FORMAT;
    InputSlot:            u32;
    AlignedByteOffset:    u32;
    InputSlotClass:       D3D12_INPUT_CLASSIFICATION;
    InstanceDataStepRate: u32;
}

D3D12_FILL_MODE :: enum s32 {
    WIREFRAME :: 2;
    SOLID     :: 3;

    D3D12_FILL_MODE_WIREFRAME :: WIREFRAME;
    D3D12_FILL_MODE_SOLID     :: SOLID;
}

D3D12_PRIMITIVE_TOPOLOGY :: D3D_PRIMITIVE_TOPOLOGY;

D3D12_PRIMITIVE :: D3D_PRIMITIVE;

D3D12_CULL_MODE :: enum s32 {
    NONE  :: 1;
    FRONT :: 2;
    BACK  :: 3;

    D3D12_CULL_MODE_NONE  :: NONE;
    D3D12_CULL_MODE_FRONT :: FRONT;
    D3D12_CULL_MODE_BACK  :: BACK;
}

D3D12_SO_DECLARATION_ENTRY :: struct {
    Stream:         u32;
    SemanticName:   *u8;
    SemanticIndex:  u32;
    StartComponent: u8;
    ComponentCount: u8;
    OutputSlot:     u8;
}

D3D12_VIEWPORT :: struct {
    TopLeftX: float;
    TopLeftY: float;
    Width:    float;
    Height:   float;
    MinDepth: float;
    MaxDepth: float;
}

D3D12_RECT :: RECT;

D3D12_BOX :: struct {
    left:   u32;
    top:    u32;
    front:  u32;
    right:  u32;
    bottom: u32;
    back:   u32;
}

D3D12_COMPARISON_FUNC :: enum s32 {
    NONE          :: 0;
    NEVER         :: 1;
    LESS          :: 2;
    EQUAL         :: 3;
    LESS_EQUAL    :: 4;
    GREATER       :: 5;
    NOT_EQUAL     :: 6;
    GREATER_EQUAL :: 7;
    ALWAYS        :: 8;

    D3D12_COMPARISON_FUNC_NONE          :: NONE;
    D3D12_COMPARISON_FUNC_NEVER         :: NEVER;
    D3D12_COMPARISON_FUNC_LESS          :: LESS;
    D3D12_COMPARISON_FUNC_EQUAL         :: EQUAL;
    D3D12_COMPARISON_FUNC_LESS_EQUAL    :: LESS_EQUAL;
    D3D12_COMPARISON_FUNC_GREATER       :: GREATER;
    D3D12_COMPARISON_FUNC_NOT_EQUAL     :: NOT_EQUAL;
    D3D12_COMPARISON_FUNC_GREATER_EQUAL :: GREATER_EQUAL;
    D3D12_COMPARISON_FUNC_ALWAYS        :: ALWAYS;
}

D3D12_DEPTH_WRITE_MASK :: enum s32 {
    ZERO :: 0;
    ALL  :: 1;

    D3D12_DEPTH_WRITE_MASK_ZERO :: ZERO;
    D3D12_DEPTH_WRITE_MASK_ALL  :: ALL;
}

D3D12_STENCIL_OP :: enum s32 {
    KEEP     :: 1;
    ZERO     :: 2;
    REPLACE  :: 3;
    INCR_SAT :: 4;
    DECR_SAT :: 5;
    INVERT   :: 6;
    INCR     :: 7;
    DECR     :: 8;

    D3D12_STENCIL_OP_KEEP     :: KEEP;
    D3D12_STENCIL_OP_ZERO     :: ZERO;
    D3D12_STENCIL_OP_REPLACE  :: REPLACE;
    D3D12_STENCIL_OP_INCR_SAT :: INCR_SAT;
    D3D12_STENCIL_OP_DECR_SAT :: DECR_SAT;
    D3D12_STENCIL_OP_INVERT   :: INVERT;
    D3D12_STENCIL_OP_INCR     :: INCR;
    D3D12_STENCIL_OP_DECR     :: DECR;
}

D3D12_DEPTH_STENCILOP_DESC :: struct {
    StencilFailOp:      D3D12_STENCIL_OP;
    StencilDepthFailOp: D3D12_STENCIL_OP;
    StencilPassOp:      D3D12_STENCIL_OP;
    StencilFunc:        D3D12_COMPARISON_FUNC;
}

D3D12_DEPTH_STENCIL_DESC :: struct {
    DepthEnable:      BOOL;
    DepthWriteMask:   D3D12_DEPTH_WRITE_MASK;
    DepthFunc:        D3D12_COMPARISON_FUNC;
    StencilEnable:    BOOL;
    StencilReadMask:  u8;
    StencilWriteMask: u8;
    FrontFace:        D3D12_DEPTH_STENCILOP_DESC;
    BackFace:         D3D12_DEPTH_STENCILOP_DESC;
}

D3D12_DEPTH_STENCIL_DESC1 :: struct {
    DepthEnable:           BOOL;
    DepthWriteMask:        D3D12_DEPTH_WRITE_MASK;
    DepthFunc:             D3D12_COMPARISON_FUNC;
    StencilEnable:         BOOL;
    StencilReadMask:       u8;
    StencilWriteMask:      u8;
    FrontFace:             D3D12_DEPTH_STENCILOP_DESC;
    BackFace:              D3D12_DEPTH_STENCILOP_DESC;
    DepthBoundsTestEnable: BOOL;
}

D3D12_DEPTH_STENCILOP_DESC1 :: struct {
    StencilFailOp:      D3D12_STENCIL_OP;
    StencilDepthFailOp: D3D12_STENCIL_OP;
    StencilPassOp:      D3D12_STENCIL_OP;
    StencilFunc:        D3D12_COMPARISON_FUNC;
    StencilReadMask:    u8;
    StencilWriteMask:   u8;
}

D3D12_DEPTH_STENCIL_DESC2 :: struct {
    DepthEnable:           BOOL;
    DepthWriteMask:        D3D12_DEPTH_WRITE_MASK;
    DepthFunc:             D3D12_COMPARISON_FUNC;
    StencilEnable:         BOOL;
    FrontFace:             D3D12_DEPTH_STENCILOP_DESC1;
    BackFace:              D3D12_DEPTH_STENCILOP_DESC1;
    DepthBoundsTestEnable: BOOL;
}

D3D12_BLEND :: enum s32 {
    ZERO             :: 1;
    ONE              :: 2;
    SRC_COLOR        :: 3;
    INV_SRC_COLOR    :: 4;
    SRC_ALPHA        :: 5;
    INV_SRC_ALPHA    :: 6;
    DEST_ALPHA       :: 7;
    INV_DEST_ALPHA   :: 8;
    DEST_COLOR       :: 9;
    INV_DEST_COLOR   :: 10;
    SRC_ALPHA_SAT    :: 11;
    BLEND_FACTOR     :: 14;
    INV_BLEND_FACTOR :: 15;
    SRC1_COLOR       :: 16;
    INV_SRC1_COLOR   :: 17;
    SRC1_ALPHA       :: 18;
    INV_SRC1_ALPHA   :: 19;
    ALPHA_FACTOR     :: 20;
    INV_ALPHA_FACTOR :: 21;

    D3D12_BLEND_ZERO             :: ZERO;
    D3D12_BLEND_ONE              :: ONE;
    D3D12_BLEND_SRC_COLOR        :: SRC_COLOR;
    D3D12_BLEND_INV_SRC_COLOR    :: INV_SRC_COLOR;
    D3D12_BLEND_SRC_ALPHA        :: SRC_ALPHA;
    D3D12_BLEND_INV_SRC_ALPHA    :: INV_SRC_ALPHA;
    D3D12_BLEND_DEST_ALPHA       :: DEST_ALPHA;
    D3D12_BLEND_INV_DEST_ALPHA   :: INV_DEST_ALPHA;
    D3D12_BLEND_DEST_COLOR       :: DEST_COLOR;
    D3D12_BLEND_INV_DEST_COLOR   :: INV_DEST_COLOR;
    D3D12_BLEND_SRC_ALPHA_SAT    :: SRC_ALPHA_SAT;
    D3D12_BLEND_BLEND_FACTOR     :: BLEND_FACTOR;
    D3D12_BLEND_INV_BLEND_FACTOR :: INV_BLEND_FACTOR;
    D3D12_BLEND_SRC1_COLOR       :: SRC1_COLOR;
    D3D12_BLEND_INV_SRC1_COLOR   :: INV_SRC1_COLOR;
    D3D12_BLEND_SRC1_ALPHA       :: SRC1_ALPHA;
    D3D12_BLEND_INV_SRC1_ALPHA   :: INV_SRC1_ALPHA;
    D3D12_BLEND_ALPHA_FACTOR     :: ALPHA_FACTOR;
    D3D12_BLEND_INV_ALPHA_FACTOR :: INV_ALPHA_FACTOR;
}

D3D12_BLEND_OP :: enum s32 {
    ADD          :: 1;
    SUBTRACT     :: 2;
    REV_SUBTRACT :: 3;
    MIN          :: 4;
    MAX          :: 5;

    D3D12_BLEND_OP_ADD          :: ADD;
    D3D12_BLEND_OP_SUBTRACT     :: SUBTRACT;
    D3D12_BLEND_OP_REV_SUBTRACT :: REV_SUBTRACT;
    D3D12_BLEND_OP_MIN          :: MIN;
    D3D12_BLEND_OP_MAX          :: MAX;
}

D3D12_COLOR_WRITE_ENABLE :: enum s32 {
    RED   :: 1;
    GREEN :: 2;
    BLUE  :: 4;
    ALPHA :: 8;
    ALL   :: 15;

    D3D12_COLOR_WRITE_ENABLE_RED   :: RED;
    D3D12_COLOR_WRITE_ENABLE_GREEN :: GREEN;
    D3D12_COLOR_WRITE_ENABLE_BLUE  :: BLUE;
    D3D12_COLOR_WRITE_ENABLE_ALPHA :: ALPHA;
    D3D12_COLOR_WRITE_ENABLE_ALL   :: ALL;
}

D3D12_LOGIC_OP :: enum s32 {
    CLEAR         :: 0;
    SET           :: 1;
    COPY          :: 2;
    COPY_INVERTED :: 3;
    NOOP          :: 4;
    INVERT        :: 5;
    AND           :: 6;
    NAND          :: 7;
    OR            :: 8;
    NOR           :: 9;
    XOR           :: 10;
    EQUIV         :: 11;
    AND_REVERSE   :: 12;
    AND_INVERTED  :: 13;
    OR_REVERSE    :: 14;
    OR_INVERTED   :: 15;

    D3D12_LOGIC_OP_CLEAR         :: CLEAR;
    D3D12_LOGIC_OP_SET           :: SET;
    D3D12_LOGIC_OP_COPY          :: COPY;
    D3D12_LOGIC_OP_COPY_INVERTED :: COPY_INVERTED;
    D3D12_LOGIC_OP_NOOP          :: NOOP;
    D3D12_LOGIC_OP_INVERT        :: INVERT;
    D3D12_LOGIC_OP_AND           :: AND;
    D3D12_LOGIC_OP_NAND          :: NAND;
    D3D12_LOGIC_OP_OR            :: OR;
    D3D12_LOGIC_OP_NOR           :: NOR;
    D3D12_LOGIC_OP_XOR           :: XOR;
    D3D12_LOGIC_OP_EQUIV         :: EQUIV;
    D3D12_LOGIC_OP_AND_REVERSE   :: AND_REVERSE;
    D3D12_LOGIC_OP_AND_INVERTED  :: AND_INVERTED;
    D3D12_LOGIC_OP_OR_REVERSE    :: OR_REVERSE;
    D3D12_LOGIC_OP_OR_INVERTED   :: OR_INVERTED;
}

D3D12_RENDER_TARGET_BLEND_DESC :: struct {
    BlendEnable:           BOOL;
    LogicOpEnable:         BOOL;
    SrcBlend:              D3D12_BLEND;
    DestBlend:             D3D12_BLEND;
    BlendOp:               D3D12_BLEND_OP;
    SrcBlendAlpha:         D3D12_BLEND;
    DestBlendAlpha:        D3D12_BLEND;
    BlendOpAlpha:          D3D12_BLEND_OP;
    LogicOp:               D3D12_LOGIC_OP;
    RenderTargetWriteMask: u8;
}

D3D12_BLEND_DESC :: struct {
    AlphaToCoverageEnable:  BOOL;
    IndependentBlendEnable: BOOL;
    RenderTarget:           [8] D3D12_RENDER_TARGET_BLEND_DESC;
}

/* Note, the array size for RenderTarget[] above is D3D12_SIMULTANEOUS_RENDERTARGET_COUNT. 
IDL processing/generation of this header replaces the define; this comment is merely explaining what happened. */
D3D12_CONSERVATIVE_RASTERIZATION_MODE :: enum s32 {
    OFF :: 0;
    ON  :: 1;

    D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF :: OFF;
    D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON  :: ON;
}

D3D12_RASTERIZER_DESC :: struct {
    FillMode:              D3D12_FILL_MODE;
    CullMode:              D3D12_CULL_MODE;
    FrontCounterClockwise: BOOL;
    DepthBias:             s32;
    DepthBiasClamp:        float;
    SlopeScaledDepthBias:  float;
    DepthClipEnable:       BOOL;
    MultisampleEnable:     BOOL;
    AntialiasedLineEnable: BOOL;
    ForcedSampleCount:     u32;
    ConservativeRaster:    D3D12_CONSERVATIVE_RASTERIZATION_MODE;
}


ID3D12Object_UUID :: "c4fec28f-7966-4e95-9f94-f431cb56c3b8";
ID3D12Object :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12object_vtable: *ID3D12Object_VTable;
}
ID3D12Object_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetPrivateData: (this: *ID3D12Object, guid: *GUID, pDataSize: *u32, pData: *void) -> HRESULT #cpp_method;
    SetPrivateData: (this: *ID3D12Object, guid: *GUID, DataSize: u32, pData: *void) -> HRESULT #cpp_method;
    SetPrivateDataInterface: (this: *ID3D12Object, guid: *GUID, pData: *IUnknown) -> HRESULT #cpp_method;
    SetName: (this: *ID3D12Object, Name: *s16) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Object) -> *ID3D12Object_VTable { return obj.id3d12object_vtable; }



ID3D12DeviceChild_UUID :: "905db94b-a00c-4140-9df5-2b64ca9ea357";
ID3D12DeviceChild :: struct {
    #as using id3d12object: ID3D12Object;
    #place id3d12object; id3d12devicechild_vtable: *ID3D12DeviceChild_VTable;
}
ID3D12DeviceChild_VTable :: struct #type_info_none {
    using id3d12object: ID3D12Object_VTable;
    GetDevice: (this: *ID3D12DeviceChild, riid: *IID, ppvDevice: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12DeviceChild) -> *ID3D12DeviceChild_VTable { return obj.id3d12devicechild_vtable; }



ID3D12RootSignature_UUID :: "c54a6b66-72df-4ee8-8be5-a946a1429214";
ID3D12RootSignature :: struct {
    #as using id3d12devicechild: ID3D12DeviceChild;
}

/* interface __MIDL_itf_d3d12_0000_0001 */
/* [local] */
D3D12_SHADER_BYTECODE :: struct {
    pShaderBytecode: *void;
    BytecodeLength:  SIZE_T;
}

D3D12_STREAM_OUTPUT_DESC :: struct {
    pSODeclaration:   *D3D12_SO_DECLARATION_ENTRY;
    NumEntries:       u32;
    pBufferStrides:   *u32;
    NumStrides:       u32;
    RasterizedStream: u32;
}

D3D12_INPUT_LAYOUT_DESC :: struct {
    pInputElementDescs: *D3D12_INPUT_ELEMENT_DESC;
    NumElements:        u32;
}

D3D12_INDEX_BUFFER_STRIP_CUT_VALUE :: enum s32 {
    DISABLED    :: 0;
    _0xFFFF     :: 1;
    _0xFFFFFFFF :: 2;

    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED   :: DISABLED;
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF     :: _0xFFFF;
    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF :: _0xFFFFFFFF;
}

D3D12_CACHED_PIPELINE_STATE :: struct {
    pCachedBlob:           *void;
    CachedBlobSizeInBytes: SIZE_T;
}

D3D12_PIPELINE_STATE_FLAGS :: enum_flags u32 {
    NONE       :: 0x0;
    TOOL_DEBUG :: 0x1;

    D3D12_PIPELINE_STATE_FLAG_NONE       :: NONE;
    D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG :: TOOL_DEBUG;
}

D3D12_GRAPHICS_PIPELINE_STATE_DESC :: struct {
    pRootSignature:        *ID3D12RootSignature;
    VS:                    D3D12_SHADER_BYTECODE;
    PS:                    D3D12_SHADER_BYTECODE;
    DS:                    D3D12_SHADER_BYTECODE;
    HS:                    D3D12_SHADER_BYTECODE;
    GS:                    D3D12_SHADER_BYTECODE;
    StreamOutput:          D3D12_STREAM_OUTPUT_DESC;
    BlendState:            D3D12_BLEND_DESC;
    SampleMask:            u32;
    RasterizerState:       D3D12_RASTERIZER_DESC;
    DepthStencilState:     D3D12_DEPTH_STENCIL_DESC;
    InputLayout:           D3D12_INPUT_LAYOUT_DESC;
    IBStripCutValue:       D3D12_INDEX_BUFFER_STRIP_CUT_VALUE;
    PrimitiveTopologyType: D3D12_PRIMITIVE_TOPOLOGY_TYPE;
    NumRenderTargets:      u32;
    RTVFormats:            [8] DXGI_FORMAT;
    DSVFormat:             DXGI_FORMAT;
    SampleDesc:            DXGI_SAMPLE_DESC;
    NodeMask:              u32;
    CachedPSO:             D3D12_CACHED_PIPELINE_STATE;
    Flags:                 D3D12_PIPELINE_STATE_FLAGS;
}

D3D12_COMPUTE_PIPELINE_STATE_DESC :: struct {
    pRootSignature: *ID3D12RootSignature;
    CS:             D3D12_SHADER_BYTECODE;
    NodeMask:       u32;
    CachedPSO:      D3D12_CACHED_PIPELINE_STATE;
    Flags:          D3D12_PIPELINE_STATE_FLAGS;
}

D3D12_RT_FORMAT_ARRAY :: struct {
    RTFormats:        [8] DXGI_FORMAT;
    NumRenderTargets: u32;
}

D3D12_PIPELINE_STATE_STREAM_DESC :: struct {
    SizeInBytes:                   SIZE_T;
    pPipelineStateSubobjectStream: *void;
}

D3D12_PIPELINE_STATE_SUBOBJECT_TYPE :: enum s32 {
    ROOT_SIGNATURE        :: 0;
    VS                    :: 1;
    PS                    :: 2;
    DS                    :: 3;
    HS                    :: 4;
    GS                    :: 5;
    CS                    :: 6;
    STREAM_OUTPUT         :: 7;
    BLEND                 :: 8;
    SAMPLE_MASK           :: 9;
    RASTERIZER            :: 10;
    DEPTH_STENCIL         :: 11;
    INPUT_LAYOUT          :: 12;
    IB_STRIP_CUT_VALUE    :: 13;
    PRIMITIVE_TOPOLOGY    :: 14;
    RENDER_TARGET_FORMATS :: 15;
    DEPTH_STENCIL_FORMAT  :: 16;
    SAMPLE_DESC           :: 17;
    NODE_MASK             :: 18;
    CACHED_PSO            :: 19;
    FLAGS                 :: 20;
    DEPTH_STENCIL1        :: 21;
    VIEW_INSTANCING       :: 22;
    AS                    :: 24;
    MS                    :: 25;
    DEPTH_STENCIL2        :: 26;
    MAX_VALID             :: 27;

    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE        :: ROOT_SIGNATURE;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS                    :: VS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS                    :: PS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS                    :: DS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS                    :: HS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS                    :: GS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS                    :: CS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT         :: STREAM_OUTPUT;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND                 :: BLEND;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK           :: SAMPLE_MASK;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER            :: RASTERIZER;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL         :: DEPTH_STENCIL;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT          :: INPUT_LAYOUT;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE    :: IB_STRIP_CUT_VALUE;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY    :: PRIMITIVE_TOPOLOGY;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS :: RENDER_TARGET_FORMATS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT  :: DEPTH_STENCIL_FORMAT;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC           :: SAMPLE_DESC;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK             :: NODE_MASK;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO            :: CACHED_PSO;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS                 :: FLAGS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1        :: DEPTH_STENCIL1;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING       :: VIEW_INSTANCING;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS                    :: AS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS                    :: MS;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL2        :: DEPTH_STENCIL2;
    D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID             :: MAX_VALID;
}

D3D12_FEATURE :: enum s32 {
    D3D12_OPTIONS                         :: 0;
    ARCHITECTURE                          :: 1;
    FEATURE_LEVELS                        :: 2;
    FORMAT_SUPPORT                        :: 3;
    MULTISAMPLE_QUALITY_LEVELS            :: 4;
    FORMAT_INFO                           :: 5;
    GPU_VIRTUAL_ADDRESS_SUPPORT           :: 6;
    SHADER_MODEL                          :: 7;
    D3D12_OPTIONS1                        :: 8;
    PROTECTED_RESOURCE_SESSION_SUPPORT    :: 10;
    ROOT_SIGNATURE                        :: 12;
    ARCHITECTURE1                         :: 16;
    D3D12_OPTIONS2                        :: 18;
    SHADER_CACHE                          :: 19;
    COMMAND_QUEUE_PRIORITY                :: 20;
    D3D12_OPTIONS3                        :: 21;
    EXISTING_HEAPS                        :: 22;
    D3D12_OPTIONS4                        :: 23;
    SERIALIZATION                         :: 24;
    CROSS_NODE                            :: 25;
    D3D12_OPTIONS5                        :: 27;
    DISPLAYABLE                           :: 28;
    D3D12_OPTIONS6                        :: 30;
    QUERY_META_COMMAND                    :: 31;
    D3D12_OPTIONS7                        :: 32;
    PROTECTED_RESOURCE_SESSION_TYPE_COUNT :: 33;
    PROTECTED_RESOURCE_SESSION_TYPES      :: 34;
    D3D12_OPTIONS8                        :: 36;
    D3D12_OPTIONS9                        :: 37;
    D3D12_OPTIONS10                       :: 39;
    D3D12_OPTIONS11                       :: 40;
    D3D12_OPTIONS12                       :: 41;
    D3D12_OPTIONS13                       :: 42;
    D3D12_OPTIONS14                       :: 43;
    D3D12_OPTIONS15                       :: 44;

    D3D12_FEATURE_D3D12_OPTIONS                         :: D3D12_OPTIONS;
    D3D12_FEATURE_ARCHITECTURE                          :: ARCHITECTURE;
    D3D12_FEATURE_FEATURE_LEVELS                        :: FEATURE_LEVELS;
    D3D12_FEATURE_FORMAT_SUPPORT                        :: FORMAT_SUPPORT;
    D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS            :: MULTISAMPLE_QUALITY_LEVELS;
    D3D12_FEATURE_FORMAT_INFO                           :: FORMAT_INFO;
    D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT           :: GPU_VIRTUAL_ADDRESS_SUPPORT;
    D3D12_FEATURE_SHADER_MODEL                          :: SHADER_MODEL;
    D3D12_FEATURE_D3D12_OPTIONS1                        :: D3D12_OPTIONS1;
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT    :: PROTECTED_RESOURCE_SESSION_SUPPORT;
    D3D12_FEATURE_ROOT_SIGNATURE                        :: ROOT_SIGNATURE;
    D3D12_FEATURE_ARCHITECTURE1                         :: ARCHITECTURE1;
    D3D12_FEATURE_D3D12_OPTIONS2                        :: D3D12_OPTIONS2;
    D3D12_FEATURE_SHADER_CACHE                          :: SHADER_CACHE;
    D3D12_FEATURE_COMMAND_QUEUE_PRIORITY                :: COMMAND_QUEUE_PRIORITY;
    D3D12_FEATURE_D3D12_OPTIONS3                        :: D3D12_OPTIONS3;
    D3D12_FEATURE_EXISTING_HEAPS                        :: EXISTING_HEAPS;
    D3D12_FEATURE_D3D12_OPTIONS4                        :: D3D12_OPTIONS4;
    D3D12_FEATURE_SERIALIZATION                         :: SERIALIZATION;
    D3D12_FEATURE_CROSS_NODE                            :: CROSS_NODE;
    D3D12_FEATURE_D3D12_OPTIONS5                        :: D3D12_OPTIONS5;
    D3D12_FEATURE_DISPLAYABLE                           :: DISPLAYABLE;
    D3D12_FEATURE_D3D12_OPTIONS6                        :: D3D12_OPTIONS6;
    D3D12_FEATURE_QUERY_META_COMMAND                    :: QUERY_META_COMMAND;
    D3D12_FEATURE_D3D12_OPTIONS7                        :: D3D12_OPTIONS7;
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT :: PROTECTED_RESOURCE_SESSION_TYPE_COUNT;
    D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES      :: PROTECTED_RESOURCE_SESSION_TYPES;
    D3D12_FEATURE_D3D12_OPTIONS8                        :: D3D12_OPTIONS8;
    D3D12_FEATURE_D3D12_OPTIONS9                        :: D3D12_OPTIONS9;
    D3D12_FEATURE_D3D12_OPTIONS10                       :: D3D12_OPTIONS10;
    D3D12_FEATURE_D3D12_OPTIONS11                       :: D3D12_OPTIONS11;
    D3D12_FEATURE_D3D12_OPTIONS12                       :: D3D12_OPTIONS12;
    D3D12_FEATURE_D3D12_OPTIONS13                       :: D3D12_OPTIONS13;
    D3D12_FEATURE_D3D12_OPTIONS14                       :: D3D12_OPTIONS14;
    D3D12_FEATURE_D3D12_OPTIONS15                       :: D3D12_OPTIONS15;
}

D3D12_SHADER_MIN_PRECISION_SUPPORT :: enum s32 {
    NONE    :: 0;
    _10_BIT :: 1;
    _16_BIT :: 2;

    D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE   :: NONE;
    D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT :: _10_BIT;
    D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT :: _16_BIT;
}

D3D12_TILED_RESOURCES_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1            :: 1;
    _2            :: 2;
    _3            :: 3;
    _4            :: 4;

    D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_TILED_RESOURCES_TIER_1             :: _1;
    D3D12_TILED_RESOURCES_TIER_2             :: _2;
    D3D12_TILED_RESOURCES_TIER_3             :: _3;
    D3D12_TILED_RESOURCES_TIER_4             :: _4;
}

D3D12_RESOURCE_BINDING_TIER :: enum s32 {
    _1 :: 1;
    _2 :: 2;
    _3 :: 3;

    D3D12_RESOURCE_BINDING_TIER_1 :: _1;
    D3D12_RESOURCE_BINDING_TIER_2 :: _2;
    D3D12_RESOURCE_BINDING_TIER_3 :: _3;
}

D3D12_CONSERVATIVE_RASTERIZATION_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1            :: 1;
    _2            :: 2;
    _3            :: 3;

    D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_1             :: _1;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_2             :: _2;
    D3D12_CONSERVATIVE_RASTERIZATION_TIER_3             :: _3;
}

D3D12_FORMAT_SUPPORT1 :: enum s32 {
    NONE                        :: 0;
    BUFFER                      :: 1;
    IA_VERTEX_BUFFER            :: 2;
    IA_INDEX_BUFFER             :: 4;
    SO_BUFFER                   :: 8;
    TEXTURE1D                   :: 16;
    TEXTURE2D                   :: 32;
    TEXTURE3D                   :: 64;
    TEXTURECUBE                 :: 128;
    SHADER_LOAD                 :: 256;
    SHADER_SAMPLE               :: 512;
    SHADER_SAMPLE_COMPARISON    :: 1024;
    SHADER_SAMPLE_MONO_TEXT     :: 2048;
    MIP                         :: 4096;
    RENDER_TARGET               :: 16384;
    BLENDABLE                   :: 32768;
    DEPTH_STENCIL               :: 65536;
    MULTISAMPLE_RESOLVE         :: 262144;
    DISPLAY                     :: 524288;
    CAST_WITHIN_BIT_LAYOUT      :: 1048576;
    MULTISAMPLE_RENDERTARGET    :: 2097152;
    MULTISAMPLE_LOAD            :: 4194304;
    SHADER_GATHER               :: 8388608;
    BACK_BUFFER_CAST            :: 16777216;
    TYPED_UNORDERED_ACCESS_VIEW :: 33554432;
    SHADER_GATHER_COMPARISON    :: 67108864;
    DECODER_OUTPUT              :: 134217728;
    VIDEO_PROCESSOR_OUTPUT      :: 268435456;
    VIDEO_PROCESSOR_INPUT       :: 536870912;
    VIDEO_ENCODER               :: 1073741824;

    D3D12_FORMAT_SUPPORT1_NONE                        :: NONE;
    D3D12_FORMAT_SUPPORT1_BUFFER                      :: BUFFER;
    D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER            :: IA_VERTEX_BUFFER;
    D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER             :: IA_INDEX_BUFFER;
    D3D12_FORMAT_SUPPORT1_SO_BUFFER                   :: SO_BUFFER;
    D3D12_FORMAT_SUPPORT1_TEXTURE1D                   :: TEXTURE1D;
    D3D12_FORMAT_SUPPORT1_TEXTURE2D                   :: TEXTURE2D;
    D3D12_FORMAT_SUPPORT1_TEXTURE3D                   :: TEXTURE3D;
    D3D12_FORMAT_SUPPORT1_TEXTURECUBE                 :: TEXTURECUBE;
    D3D12_FORMAT_SUPPORT1_SHADER_LOAD                 :: SHADER_LOAD;
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE               :: SHADER_SAMPLE;
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON    :: SHADER_SAMPLE_COMPARISON;
    D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT     :: SHADER_SAMPLE_MONO_TEXT;
    D3D12_FORMAT_SUPPORT1_MIP                         :: MIP;
    D3D12_FORMAT_SUPPORT1_RENDER_TARGET               :: RENDER_TARGET;
    D3D12_FORMAT_SUPPORT1_BLENDABLE                   :: BLENDABLE;
    D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL               :: DEPTH_STENCIL;
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE         :: MULTISAMPLE_RESOLVE;
    D3D12_FORMAT_SUPPORT1_DISPLAY                     :: DISPLAY;
    D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT      :: CAST_WITHIN_BIT_LAYOUT;
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET    :: MULTISAMPLE_RENDERTARGET;
    D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD            :: MULTISAMPLE_LOAD;
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER               :: SHADER_GATHER;
    D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST            :: BACK_BUFFER_CAST;
    D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW :: TYPED_UNORDERED_ACCESS_VIEW;
    D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON    :: SHADER_GATHER_COMPARISON;
    D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT              :: DECODER_OUTPUT;
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT      :: VIDEO_PROCESSOR_OUTPUT;
    D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT       :: VIDEO_PROCESSOR_INPUT;
    D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER               :: VIDEO_ENCODER;
}

D3D12_FORMAT_SUPPORT2 :: enum s32 {
    NONE                                         :: 0;
    UAV_ATOMIC_ADD                               :: 1;
    UAV_ATOMIC_BITWISE_OPS                       :: 2;
    UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE :: 4;
    UAV_ATOMIC_EXCHANGE                          :: 8;
    UAV_ATOMIC_SIGNED_MIN_OR_MAX                 :: 16;
    UAV_ATOMIC_UNSIGNED_MIN_OR_MAX               :: 32;
    UAV_TYPED_LOAD                               :: 64;
    UAV_TYPED_STORE                              :: 128;
    OUTPUT_MERGER_LOGIC_OP                       :: 256;
    TILED                                        :: 512;
    MULTIPLANE_OVERLAY                           :: 16384;
    SAMPLER_FEEDBACK                             :: 32768;

    D3D12_FORMAT_SUPPORT2_NONE                                         :: NONE;
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD                               :: UAV_ATOMIC_ADD;
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS                       :: UAV_ATOMIC_BITWISE_OPS;
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE :: UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE;
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE                          :: UAV_ATOMIC_EXCHANGE;
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX                 :: UAV_ATOMIC_SIGNED_MIN_OR_MAX;
    D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX               :: UAV_ATOMIC_UNSIGNED_MIN_OR_MAX;
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD                               :: UAV_TYPED_LOAD;
    D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE                              :: UAV_TYPED_STORE;
    D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP                       :: OUTPUT_MERGER_LOGIC_OP;
    D3D12_FORMAT_SUPPORT2_TILED                                        :: TILED;
    D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY                           :: MULTIPLANE_OVERLAY;
    D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK                             :: SAMPLER_FEEDBACK;
}

D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS :: enum_flags u32 {
    NONE           :: 0x0;
    TILED_RESOURCE :: 0x1;

    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE           :: NONE;
    D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE :: TILED_RESOURCE;
}

D3D12_CROSS_NODE_SHARING_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1_EMULATED   :: 1;
    _1            :: 2;
    _2            :: 3;
    _3            :: 4;

    D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED    :: _1_EMULATED;
    D3D12_CROSS_NODE_SHARING_TIER_1             :: _1;
    D3D12_CROSS_NODE_SHARING_TIER_2             :: _2;
    D3D12_CROSS_NODE_SHARING_TIER_3             :: _3;
}

D3D12_RESOURCE_HEAP_TIER :: enum s32 {
    _1 :: 1;
    _2 :: 2;

    D3D12_RESOURCE_HEAP_TIER_1 :: _1;
    D3D12_RESOURCE_HEAP_TIER_2 :: _2;
}

D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1            :: 1;
    _2            :: 2;

    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1             :: _1;
    D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2             :: _2;
}

D3D12_VIEW_INSTANCING_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1            :: 1;
    _2            :: 2;
    _3            :: 3;

    D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_VIEW_INSTANCING_TIER_1             :: _1;
    D3D12_VIEW_INSTANCING_TIER_2             :: _2;
    D3D12_VIEW_INSTANCING_TIER_3             :: _3;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS :: struct {
    DoublePrecisionFloatShaderOps:                                              BOOL;
    OutputMergerLogicOp:                                                        BOOL;
    MinPrecisionSupport:                                                        D3D12_SHADER_MIN_PRECISION_SUPPORT;
    TiledResourcesTier:                                                         D3D12_TILED_RESOURCES_TIER;
    ResourceBindingTier:                                                        D3D12_RESOURCE_BINDING_TIER;
    PSSpecifiedStencilRefSupported:                                             BOOL;
    TypedUAVLoadAdditionalFormats:                                              BOOL;
    ROVsSupported:                                                              BOOL;
    ConservativeRasterizationTier:                                              D3D12_CONSERVATIVE_RASTERIZATION_TIER;
    MaxGPUVirtualAddressBitsPerResource:                                        u32;
    StandardSwizzle64KBSupported:                                               BOOL;
    CrossNodeSharingTier:                                                       D3D12_CROSS_NODE_SHARING_TIER;
    CrossAdapterRowMajorTextureSupported:                                       BOOL;
    VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation: BOOL;
    ResourceHeapTier:                                                           D3D12_RESOURCE_HEAP_TIER;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS1 :: struct {
    WaveOps:                       BOOL;
    WaveLaneCountMin:              u32;
    WaveLaneCountMax:              u32;
    TotalLaneCount:                u32;
    ExpandedComputeResourceStates: BOOL;
    Int64ShaderOps:                BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS2 :: struct {
    DepthBoundsTestSupported:        BOOL;
    ProgrammableSamplePositionsTier: D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER;
}

D3D_ROOT_SIGNATURE_VERSION :: enum s32 {
    _1   :: 1;
    _1_0 :: 1;
    _1_1 :: 2;

    D3D_ROOT_SIGNATURE_VERSION_1   :: _1;
    D3D_ROOT_SIGNATURE_VERSION_1_0 :: _1_0;
    D3D_ROOT_SIGNATURE_VERSION_1_1 :: _1_1;
}

D3D12_FEATURE_DATA_ROOT_SIGNATURE :: struct {
    HighestVersion: D3D_ROOT_SIGNATURE_VERSION;
}

D3D12_FEATURE_DATA_ARCHITECTURE :: struct {
    NodeIndex:         u32;
    TileBasedRenderer: BOOL;
    UMA:               BOOL;
    CacheCoherentUMA:  BOOL;
}

D3D12_FEATURE_DATA_ARCHITECTURE1 :: struct {
    NodeIndex:         u32;
    TileBasedRenderer: BOOL;
    UMA:               BOOL;
    CacheCoherentUMA:  BOOL;
    IsolatedMMU:       BOOL;
}

D3D12_FEATURE_DATA_FEATURE_LEVELS :: struct {
    NumFeatureLevels:         u32;
    pFeatureLevelsRequested:  *D3D_FEATURE_LEVEL;
    MaxSupportedFeatureLevel: D3D_FEATURE_LEVEL;
}

D3D_SHADER_MODEL :: enum s32 {
    _5_1                     :: 81;
    _6_0                     :: 96;
    _6_1                     :: 97;
    _6_2                     :: 98;
    _6_3                     :: 99;
    _6_4                     :: 100;
    _6_5                     :: 101;
    _6_6                     :: 102;
    _6_7                     :: 103;
    _6_8                     :: 104;
    D3D_HIGHEST_SHADER_MODEL :: 104;

    D3D_SHADER_MODEL_5_1 :: _5_1;
    D3D_SHADER_MODEL_6_0 :: _6_0;
    D3D_SHADER_MODEL_6_1 :: _6_1;
    D3D_SHADER_MODEL_6_2 :: _6_2;
    D3D_SHADER_MODEL_6_3 :: _6_3;
    D3D_SHADER_MODEL_6_4 :: _6_4;
    D3D_SHADER_MODEL_6_5 :: _6_5;
    D3D_SHADER_MODEL_6_6 :: _6_6;
    D3D_SHADER_MODEL_6_7 :: _6_7;
    D3D_SHADER_MODEL_6_8 :: _6_8;
}

D3D12_FEATURE_DATA_SHADER_MODEL :: struct {
    HighestShaderModel: D3D_SHADER_MODEL;
}

D3D12_FEATURE_DATA_FORMAT_SUPPORT :: struct {
    Format:   DXGI_FORMAT;
    Support1: D3D12_FORMAT_SUPPORT1;
    Support2: D3D12_FORMAT_SUPPORT2;
}

D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS :: struct {
    Format:           DXGI_FORMAT;
    SampleCount:      u32;
    Flags:            D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS;
    NumQualityLevels: u32;
}

D3D12_FEATURE_DATA_FORMAT_INFO :: struct {
    Format:     DXGI_FORMAT;
    PlaneCount: u8;
}

D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT :: struct {
    MaxGPUVirtualAddressBitsPerResource: u32;
    MaxGPUVirtualAddressBitsPerProcess:  u32;
}

D3D12_SHADER_CACHE_SUPPORT_FLAGS :: enum_flags u32 {
    NONE                   :: 0x0;
    SINGLE_PSO             :: 0x1;
    LIBRARY                :: 0x2;
    AUTOMATIC_INPROC_CACHE :: 0x4;
    AUTOMATIC_DISK_CACHE   :: 0x8;
    DRIVER_MANAGED_CACHE   :: 0x10;
    SHADER_CONTROL_CLEAR   :: 0x20;
    SHADER_SESSION_DELETE  :: 0x40;

    D3D12_SHADER_CACHE_SUPPORT_NONE                   :: NONE;
    D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO             :: SINGLE_PSO;
    D3D12_SHADER_CACHE_SUPPORT_LIBRARY                :: LIBRARY;
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE :: AUTOMATIC_INPROC_CACHE;
    D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE   :: AUTOMATIC_DISK_CACHE;
    D3D12_SHADER_CACHE_SUPPORT_DRIVER_MANAGED_CACHE   :: DRIVER_MANAGED_CACHE;
    D3D12_SHADER_CACHE_SUPPORT_SHADER_CONTROL_CLEAR   :: SHADER_CONTROL_CLEAR;
    D3D12_SHADER_CACHE_SUPPORT_SHADER_SESSION_DELETE  :: SHADER_SESSION_DELETE;
}

D3D12_FEATURE_DATA_SHADER_CACHE :: struct {
    SupportFlags: D3D12_SHADER_CACHE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY :: struct {
    CommandListType:            D3D12_COMMAND_LIST_TYPE;
    Priority:                   u32;
    PriorityForTypeIsSupported: BOOL;
}

D3D12_COMMAND_LIST_SUPPORT_FLAGS :: enum_flags u32 {
    NONE          :: 0x0;
    DIRECT        :: 0x1;
    BUNDLE        :: 0x2;
    COMPUTE       :: 0x4;
    COPY          :: 0x8;
    VIDEO_DECODE  :: 0x10;
    VIDEO_PROCESS :: 0x20;
    VIDEO_ENCODE  :: 0x40;

    D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE          :: NONE;
    D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT        :: DIRECT;
    D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE        :: BUNDLE;
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE       :: COMPUTE;
    D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY          :: COPY;
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE  :: VIDEO_DECODE;
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS :: VIDEO_PROCESS;
    D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE  :: VIDEO_ENCODE;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS3 :: struct {
    CopyQueueTimestampQueriesSupported: BOOL;
    CastingFullyTypedFormatSupported:   BOOL;
    WriteBufferImmediateSupportFlags:   D3D12_COMMAND_LIST_SUPPORT_FLAGS;
    ViewInstancingTier:                 D3D12_VIEW_INSTANCING_TIER;
    BarycentricsSupported:              BOOL;
}

D3D12_FEATURE_DATA_EXISTING_HEAPS :: struct {
    Supported: BOOL;
}

D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER :: enum s32 {
    _0 :: 0;
    _1 :: 1;
    _2 :: 2;

    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 :: _0;
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 :: _1;
    D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 :: _2;
}

D3D12_FEATURE_DATA_DISPLAYABLE :: struct {
    DisplayableTexture:              BOOL;
    SharedResourceCompatibilityTier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS4 :: struct {
    MSAA64KBAlignedTextureSupported: BOOL;
    SharedResourceCompatibilityTier: D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER;
    Native16BitShaderOpsSupported:   BOOL;
}

D3D12_HEAP_SERIALIZATION_TIER :: enum s32 {
    _0  :: 0;
    _10 :: 10;

    D3D12_HEAP_SERIALIZATION_TIER_0  :: _0;
    D3D12_HEAP_SERIALIZATION_TIER_10 :: _10;
}

D3D12_FEATURE_DATA_SERIALIZATION :: struct {
    NodeIndex:             u32;
    HeapSerializationTier: D3D12_HEAP_SERIALIZATION_TIER;
}

D3D12_FEATURE_DATA_CROSS_NODE :: struct {
    SharingTier:              D3D12_CROSS_NODE_SHARING_TIER;
    AtomicShaderInstructions: BOOL;
}

D3D12_RENDER_PASS_TIER :: enum s32 {
    _0 :: 0;
    _1 :: 1;
    _2 :: 2;

    D3D12_RENDER_PASS_TIER_0 :: _0;
    D3D12_RENDER_PASS_TIER_1 :: _1;
    D3D12_RENDER_PASS_TIER_2 :: _2;
}

D3D12_RAYTRACING_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1_0          :: 10;
    _1_1          :: 11;

    D3D12_RAYTRACING_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_RAYTRACING_TIER_1_0           :: _1_0;
    D3D12_RAYTRACING_TIER_1_1           :: _1_1;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS5 :: struct {
    SRVOnlyTiledResourceTier3: BOOL;
    RenderPassesTier:          D3D12_RENDER_PASS_TIER;
    RaytracingTier:            D3D12_RAYTRACING_TIER;
}

D3D12_VARIABLE_SHADING_RATE_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1            :: 1;
    _2            :: 2;

    D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_VARIABLE_SHADING_RATE_TIER_1             :: _1;
    D3D12_VARIABLE_SHADING_RATE_TIER_2             :: _2;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS6 :: struct {
    AdditionalShadingRatesSupported:                      BOOL;
    PerPrimitiveShadingRateSupportedWithViewportIndexing: BOOL;
    VariableShadingRateTier:                              D3D12_VARIABLE_SHADING_RATE_TIER;
    ShadingRateImageTileSize:                             u32;
    BackgroundProcessingSupported:                        BOOL;
}

D3D12_MESH_SHADER_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1            :: 10;

    D3D12_MESH_SHADER_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_MESH_SHADER_TIER_1             :: _1;
}

D3D12_SAMPLER_FEEDBACK_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _0_9          :: 90;
    _1_0          :: 100;

    D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_SAMPLER_FEEDBACK_TIER_0_9           :: _0_9;
    D3D12_SAMPLER_FEEDBACK_TIER_1_0           :: _1_0;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS7 :: struct {
    MeshShaderTier:      D3D12_MESH_SHADER_TIER;
    SamplerFeedbackTier: D3D12_SAMPLER_FEEDBACK_TIER;
}

D3D12_FEATURE_DATA_QUERY_META_COMMAND :: struct {
    CommandId:                  GUID;
    NodeMask:                   u32;
    pQueryInputData:            *void;
    QueryInputDataSizeInBytes:  SIZE_T;
    pQueryOutputData:           *void;
    QueryOutputDataSizeInBytes: SIZE_T;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS8 :: struct {
    UnalignedBlockTexturesSupported: BOOL;
}

D3D12_WAVE_MMA_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1_0          :: 10;

    D3D12_WAVE_MMA_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_WAVE_MMA_TIER_1_0           :: _1_0;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS9 :: struct {
    MeshShaderPipelineStatsSupported:                  BOOL;
    MeshShaderSupportsFullRangeRenderTargetArrayIndex: BOOL;
    AtomicInt64OnTypedResourceSupported:               BOOL;
    AtomicInt64OnGroupSharedSupported:                 BOOL;
    DerivativesInMeshAndAmplificationShadersSupported: BOOL;
    WaveMMATier:                                       D3D12_WAVE_MMA_TIER;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS10 :: struct {
    VariableRateShadingSumCombinerSupported:    BOOL;
    MeshShaderPerPrimitiveShadingRateSupported: BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS11 :: struct {
    AtomicInt64OnDescriptorHeapResourceSupported: BOOL;
}

D3D12_TRI_STATE :: enum s32 {
    UNKNOWN :: -1;
    FALSE   :: 0;
    TRUE    :: 1;

    D3D12_TRI_STATE_UNKNOWN :: UNKNOWN;
    D3D12_TRI_STATE_FALSE   :: FALSE;
    D3D12_TRI_STATE_TRUE    :: TRUE;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS12 :: struct {
    MSPrimitivesPipelineStatisticIncludesCulledPrimitives: D3D12_TRI_STATE;
    EnhancedBarriersSupported:                             BOOL;
    RelaxedFormatCastingSupported:                         BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS13 :: struct {
    UnrestrictedBufferTextureCopyPitchSupported: BOOL;
    UnrestrictedVertexElementAlignmentSupported: BOOL;
    InvertedViewportHeightFlipsYSupported:       BOOL;
    InvertedViewportDepthFlipsZSupported:        BOOL;
    TextureCopyBetweenDimensionsSupported:       BOOL;
    AlphaBlendFactorSupported:                   BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS14 :: struct {
    AdvancedTextureOpsSupported:                    BOOL;
    WriteableMSAATexturesSupported:                 BOOL;
    IndependentFrontAndBackStencilRefMaskSupported: BOOL;
}

D3D12_FEATURE_DATA_D3D12_OPTIONS15 :: struct {
    TriangleFanSupported:                BOOL;
    DynamicIndexBufferStripCutSupported: BOOL;
}

D3D12_RESOURCE_ALLOCATION_INFO :: struct {
    SizeInBytes: u64;
    Alignment:   u64;
}

D3D12_RESOURCE_ALLOCATION_INFO1 :: struct {
    Offset:      u64;
    Alignment:   u64;
    SizeInBytes: u64;
}

D3D12_HEAP_TYPE :: enum s32 {
    DEFAULT  :: 1;
    UPLOAD   :: 2;
    READBACK :: 3;
    CUSTOM   :: 4;

    D3D12_HEAP_TYPE_DEFAULT  :: DEFAULT;
    D3D12_HEAP_TYPE_UPLOAD   :: UPLOAD;
    D3D12_HEAP_TYPE_READBACK :: READBACK;
    D3D12_HEAP_TYPE_CUSTOM   :: CUSTOM;
}

D3D12_CPU_PAGE_PROPERTY :: enum s32 {
    UNKNOWN       :: 0;
    NOT_AVAILABLE :: 1;
    WRITE_COMBINE :: 2;
    WRITE_BACK    :: 3;

    D3D12_CPU_PAGE_PROPERTY_UNKNOWN       :: UNKNOWN;
    D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE :: NOT_AVAILABLE;
    D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE :: WRITE_COMBINE;
    D3D12_CPU_PAGE_PROPERTY_WRITE_BACK    :: WRITE_BACK;
}

D3D12_MEMORY_POOL :: enum s32 {
    UNKNOWN :: 0;
    L0      :: 1;
    L1      :: 2;

    D3D12_MEMORY_POOL_UNKNOWN :: UNKNOWN;
    D3D12_MEMORY_POOL_L0      :: L0;
    D3D12_MEMORY_POOL_L1      :: L1;
}

D3D12_HEAP_PROPERTIES :: struct {
    Type:                 D3D12_HEAP_TYPE;
    CPUPageProperty:      D3D12_CPU_PAGE_PROPERTY;
    MemoryPoolPreference: D3D12_MEMORY_POOL;
    CreationNodeMask:     u32;
    VisibleNodeMask:      u32;
}

D3D12_HEAP_FLAGS :: enum_flags u32 {
    NONE                           :: 0x0;
    SHARED                         :: 0x1;
    DENY_BUFFERS                   :: 0x4;
    ALLOW_DISPLAY                  :: 0x8;
    SHARED_CROSS_ADAPTER           :: 0x20;
    DENY_RT_DS_TEXTURES            :: 0x40;
    DENY_NON_RT_DS_TEXTURES        :: 0x80;
    HARDWARE_PROTECTED             :: 0x100;
    ALLOW_WRITE_WATCH              :: 0x200;
    ALLOW_SHADER_ATOMICS           :: 0x400;
    CREATE_NOT_RESIDENT            :: 0x800;
    CREATE_NOT_ZEROED              :: 0x1000;
    ALLOW_ALL_BUFFERS_AND_TEXTURES :: 0x0;
    ALLOW_ONLY_BUFFERS             :: 0xc0;
    ALLOW_ONLY_NON_RT_DS_TEXTURES  :: 0x44;
    ALLOW_ONLY_RT_DS_TEXTURES      :: 0x84;

    D3D12_HEAP_FLAG_NONE                           :: NONE;
    D3D12_HEAP_FLAG_SHARED                         :: SHARED;
    D3D12_HEAP_FLAG_DENY_BUFFERS                   :: DENY_BUFFERS;
    D3D12_HEAP_FLAG_ALLOW_DISPLAY                  :: ALLOW_DISPLAY;
    D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER           :: SHARED_CROSS_ADAPTER;
    D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES            :: DENY_RT_DS_TEXTURES;
    D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES        :: DENY_NON_RT_DS_TEXTURES;
    D3D12_HEAP_FLAG_HARDWARE_PROTECTED             :: HARDWARE_PROTECTED;
    D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH              :: ALLOW_WRITE_WATCH;
    D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS           :: ALLOW_SHADER_ATOMICS;
    D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT            :: CREATE_NOT_RESIDENT;
    D3D12_HEAP_FLAG_CREATE_NOT_ZEROED              :: CREATE_NOT_ZEROED;
    D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES :: ALLOW_ALL_BUFFERS_AND_TEXTURES;
    D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS             :: ALLOW_ONLY_BUFFERS;
    D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES  :: ALLOW_ONLY_NON_RT_DS_TEXTURES;
    D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES      :: ALLOW_ONLY_RT_DS_TEXTURES;
}

D3D12_HEAP_DESC :: struct {
    SizeInBytes: u64;
    Properties:  D3D12_HEAP_PROPERTIES;
    Alignment:   u64;
    Flags:       D3D12_HEAP_FLAGS;
}

D3D12_RESOURCE_DIMENSION :: enum s32 {
    UNKNOWN   :: 0;
    BUFFER    :: 1;
    TEXTURE1D :: 2;
    TEXTURE2D :: 3;
    TEXTURE3D :: 4;

    D3D12_RESOURCE_DIMENSION_UNKNOWN   :: UNKNOWN;
    D3D12_RESOURCE_DIMENSION_BUFFER    :: BUFFER;
    D3D12_RESOURCE_DIMENSION_TEXTURE1D :: TEXTURE1D;
    D3D12_RESOURCE_DIMENSION_TEXTURE2D :: TEXTURE2D;
    D3D12_RESOURCE_DIMENSION_TEXTURE3D :: TEXTURE3D;
}

D3D12_TEXTURE_LAYOUT :: enum s32 {
    UNKNOWN                 :: 0;
    ROW_MAJOR               :: 1;
    _64KB_UNDEFINED_SWIZZLE :: 2;
    _64KB_STANDARD_SWIZZLE  :: 3;

    D3D12_TEXTURE_LAYOUT_UNKNOWN                :: UNKNOWN;
    D3D12_TEXTURE_LAYOUT_ROW_MAJOR              :: ROW_MAJOR;
    D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE :: _64KB_UNDEFINED_SWIZZLE;
    D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE  :: _64KB_STANDARD_SWIZZLE;
}

D3D12_RESOURCE_FLAGS :: enum_flags u32 {
    NONE                              :: 0x0;
    ALLOW_RENDER_TARGET               :: 0x1;
    ALLOW_DEPTH_STENCIL               :: 0x2;
    ALLOW_UNORDERED_ACCESS            :: 0x4;
    DENY_SHADER_RESOURCE              :: 0x8;
    ALLOW_CROSS_ADAPTER               :: 0x10;
    ALLOW_SIMULTANEOUS_ACCESS         :: 0x20;
    VIDEO_DECODE_REFERENCE_ONLY       :: 0x40;
    VIDEO_ENCODE_REFERENCE_ONLY       :: 0x80;
    RAYTRACING_ACCELERATION_STRUCTURE :: 0x100;

    D3D12_RESOURCE_FLAG_NONE                              :: NONE;
    D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET               :: ALLOW_RENDER_TARGET;
    D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL               :: ALLOW_DEPTH_STENCIL;
    D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS            :: ALLOW_UNORDERED_ACCESS;
    D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE              :: DENY_SHADER_RESOURCE;
    D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER               :: ALLOW_CROSS_ADAPTER;
    D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS         :: ALLOW_SIMULTANEOUS_ACCESS;
    D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY       :: VIDEO_DECODE_REFERENCE_ONLY;
    D3D12_RESOURCE_FLAG_VIDEO_ENCODE_REFERENCE_ONLY       :: VIDEO_ENCODE_REFERENCE_ONLY;
    D3D12_RESOURCE_FLAG_RAYTRACING_ACCELERATION_STRUCTURE :: RAYTRACING_ACCELERATION_STRUCTURE;
}

D3D12_MIP_REGION :: struct {
    Width:  u32;
    Height: u32;
    Depth:  u32;
}

D3D12_RESOURCE_DESC :: struct {
    Dimension:        D3D12_RESOURCE_DIMENSION;
    Alignment:        u64;
    Width:            u64;
    Height:           u32;
    DepthOrArraySize: u16;
    MipLevels:        u16;
    Format:           DXGI_FORMAT;
    SampleDesc:       DXGI_SAMPLE_DESC;
    Layout:           D3D12_TEXTURE_LAYOUT;
    Flags:            D3D12_RESOURCE_FLAGS;
}

D3D12_RESOURCE_DESC1 :: struct {
    Dimension:                D3D12_RESOURCE_DIMENSION;
    Alignment:                u64;
    Width:                    u64;
    Height:                   u32;
    DepthOrArraySize:         u16;
    MipLevels:                u16;
    Format:                   DXGI_FORMAT;
    SampleDesc:               DXGI_SAMPLE_DESC;
    Layout:                   D3D12_TEXTURE_LAYOUT;
    Flags:                    D3D12_RESOURCE_FLAGS;
    SamplerFeedbackMipRegion: D3D12_MIP_REGION;
}

D3D12_DEPTH_STENCIL_VALUE :: struct {
    Depth:   float;
    Stencil: u8;
}

D3D12_CLEAR_VALUE :: struct {
    Format: DXGI_FORMAT;
    union {
        Color:        [4] float;
        DepthStencil: D3D12_DEPTH_STENCIL_VALUE;
    }
}

D3D12_RANGE :: struct {
    Begin: SIZE_T;
    End:   SIZE_T;
}

D3D12_RANGE_UINT64 :: struct {
    Begin: u64;
    End:   u64;
}

D3D12_SUBRESOURCE_RANGE_UINT64 :: struct {
    Subresource: u32;
    Range:       D3D12_RANGE_UINT64;
}

D3D12_SUBRESOURCE_INFO :: struct {
    Offset:     u64;
    RowPitch:   u32;
    DepthPitch: u32;
}

D3D12_TILED_RESOURCE_COORDINATE :: struct {
    X:           u32;
    Y:           u32;
    Z:           u32;
    Subresource: u32;
}

D3D12_TILE_REGION_SIZE :: struct {
    NumTiles: u32;
    UseBox:   BOOL;
    Width:    u32;
    Height:   u16;
    Depth:    u16;
}

D3D12_TILE_RANGE_FLAGS :: enum_flags u32 {
    NONE              :: 0x0;
    NULL              :: 0x1;
    SKIP              :: 0x2;
    REUSE_SINGLE_TILE :: 0x4;

    D3D12_TILE_RANGE_FLAG_NONE              :: NONE;
    D3D12_TILE_RANGE_FLAG_NULL              :: NULL;
    D3D12_TILE_RANGE_FLAG_SKIP              :: SKIP;
    D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE :: REUSE_SINGLE_TILE;
}

D3D12_SUBRESOURCE_TILING :: struct {
    WidthInTiles:                    u32;
    HeightInTiles:                   u16;
    DepthInTiles:                    u16;
    StartTileIndexInOverallResource: u32;
}

D3D12_TILE_SHAPE :: struct {
    WidthInTexels:  u32;
    HeightInTexels: u32;
    DepthInTexels:  u32;
}

D3D12_PACKED_MIP_INFO :: struct {
    NumStandardMips:                 u8;
    NumPackedMips:                   u8;
    NumTilesForPackedMips:           u32;
    StartTileIndexInOverallResource: u32;
}

D3D12_TILE_MAPPING_FLAGS :: enum_flags u32 {
    NONE      :: 0x0;
    NO_HAZARD :: 0x1;

    D3D12_TILE_MAPPING_FLAG_NONE      :: NONE;
    D3D12_TILE_MAPPING_FLAG_NO_HAZARD :: NO_HAZARD;
}

D3D12_TILE_COPY_FLAGS :: enum_flags u32 {
    NONE                                     :: 0x0;
    NO_HAZARD                                :: 0x1;
    LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE :: 0x2;
    SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER :: 0x4;

    D3D12_TILE_COPY_FLAG_NONE                                     :: NONE;
    D3D12_TILE_COPY_FLAG_NO_HAZARD                                :: NO_HAZARD;
    D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE :: LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE;
    D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER :: SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER;
}

D3D12_RESOURCE_STATES :: enum s32 {
    COMMON                            :: 0;
    VERTEX_AND_CONSTANT_BUFFER        :: 1;
    INDEX_BUFFER                      :: 2;
    RENDER_TARGET                     :: 4;
    UNORDERED_ACCESS                  :: 8;
    DEPTH_WRITE                       :: 16;
    DEPTH_READ                        :: 32;
    NON_PIXEL_SHADER_RESOURCE         :: 64;
    PIXEL_SHADER_RESOURCE             :: 128;
    STREAM_OUT                        :: 256;
    INDIRECT_ARGUMENT                 :: 512;
    COPY_DEST                         :: 1024;
    COPY_SOURCE                       :: 2048;
    RESOLVE_DEST                      :: 4096;
    RESOLVE_SOURCE                    :: 8192;
    RAYTRACING_ACCELERATION_STRUCTURE :: 4194304;
    SHADING_RATE_SOURCE               :: 16777216;
    GENERIC_READ                      :: 2755;
    ALL_SHADER_RESOURCE               :: 192;
    PRESENT                           :: 0;
    PREDICATION                       :: 512;
    VIDEO_DECODE_READ                 :: 65536;
    VIDEO_DECODE_WRITE                :: 131072;
    VIDEO_PROCESS_READ                :: 262144;
    VIDEO_PROCESS_WRITE               :: 524288;
    VIDEO_ENCODE_READ                 :: 2097152;
    VIDEO_ENCODE_WRITE                :: 8388608;

    D3D12_RESOURCE_STATE_COMMON                            :: COMMON;
    D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER        :: VERTEX_AND_CONSTANT_BUFFER;
    D3D12_RESOURCE_STATE_INDEX_BUFFER                      :: INDEX_BUFFER;
    D3D12_RESOURCE_STATE_RENDER_TARGET                     :: RENDER_TARGET;
    D3D12_RESOURCE_STATE_UNORDERED_ACCESS                  :: UNORDERED_ACCESS;
    D3D12_RESOURCE_STATE_DEPTH_WRITE                       :: DEPTH_WRITE;
    D3D12_RESOURCE_STATE_DEPTH_READ                        :: DEPTH_READ;
    D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE         :: NON_PIXEL_SHADER_RESOURCE;
    D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE             :: PIXEL_SHADER_RESOURCE;
    D3D12_RESOURCE_STATE_STREAM_OUT                        :: STREAM_OUT;
    D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT                 :: INDIRECT_ARGUMENT;
    D3D12_RESOURCE_STATE_COPY_DEST                         :: COPY_DEST;
    D3D12_RESOURCE_STATE_COPY_SOURCE                       :: COPY_SOURCE;
    D3D12_RESOURCE_STATE_RESOLVE_DEST                      :: RESOLVE_DEST;
    D3D12_RESOURCE_STATE_RESOLVE_SOURCE                    :: RESOLVE_SOURCE;
    D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE :: RAYTRACING_ACCELERATION_STRUCTURE;
    D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE               :: SHADING_RATE_SOURCE;
    D3D12_RESOURCE_STATE_GENERIC_READ                      :: GENERIC_READ;
    D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE               :: ALL_SHADER_RESOURCE;
    D3D12_RESOURCE_STATE_PRESENT                           :: PRESENT;
    D3D12_RESOURCE_STATE_PREDICATION                       :: PREDICATION;
    D3D12_RESOURCE_STATE_VIDEO_DECODE_READ                 :: VIDEO_DECODE_READ;
    D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE                :: VIDEO_DECODE_WRITE;
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ                :: VIDEO_PROCESS_READ;
    D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE               :: VIDEO_PROCESS_WRITE;
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ                 :: VIDEO_ENCODE_READ;
    D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE                :: VIDEO_ENCODE_WRITE;
}

D3D12_RESOURCE_BARRIER_TYPE :: enum s32 {
    TRANSITION :: 0;
    ALIASING   :: 1;
    UAV        :: 2;

    D3D12_RESOURCE_BARRIER_TYPE_TRANSITION :: TRANSITION;
    D3D12_RESOURCE_BARRIER_TYPE_ALIASING   :: ALIASING;
    D3D12_RESOURCE_BARRIER_TYPE_UAV        :: UAV;
}

D3D12_RESOURCE_TRANSITION_BARRIER :: struct {
    pResource:   *ID3D12Resource;
    Subresource: u32;
    StateBefore: D3D12_RESOURCE_STATES;
    StateAfter:  D3D12_RESOURCE_STATES;
}

D3D12_RESOURCE_ALIASING_BARRIER :: struct {
    pResourceBefore: *ID3D12Resource;
    pResourceAfter:  *ID3D12Resource;
}

D3D12_RESOURCE_UAV_BARRIER :: struct {
    pResource: *ID3D12Resource;
}

D3D12_RESOURCE_BARRIER_FLAGS :: enum_flags u32 {
    NONE       :: 0x0;
    BEGIN_ONLY :: 0x1;
    END_ONLY   :: 0x2;

    D3D12_RESOURCE_BARRIER_FLAG_NONE       :: NONE;
    D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY :: BEGIN_ONLY;
    D3D12_RESOURCE_BARRIER_FLAG_END_ONLY   :: END_ONLY;
}

D3D12_RESOURCE_BARRIER :: struct {
    Type:  D3D12_RESOURCE_BARRIER_TYPE;
    Flags: D3D12_RESOURCE_BARRIER_FLAGS;
    union {
        Transition: D3D12_RESOURCE_TRANSITION_BARRIER;
        Aliasing:   D3D12_RESOURCE_ALIASING_BARRIER;
        UAV:        D3D12_RESOURCE_UAV_BARRIER;
    }
}

D3D12_SUBRESOURCE_FOOTPRINT :: struct {
    Format:   DXGI_FORMAT;
    Width:    u32;
    Height:   u32;
    Depth:    u32;
    RowPitch: u32;
}

D3D12_PLACED_SUBRESOURCE_FOOTPRINT :: struct {
    Offset:    u64;
    Footprint: D3D12_SUBRESOURCE_FOOTPRINT;
}

D3D12_TEXTURE_COPY_TYPE :: enum s32 {
    SUBRESOURCE_INDEX :: 0;
    PLACED_FOOTPRINT  :: 1;

    D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX :: SUBRESOURCE_INDEX;
    D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT  :: PLACED_FOOTPRINT;
}

D3D12_TEXTURE_COPY_LOCATION :: struct {
    pResource: *ID3D12Resource;
    Type:      D3D12_TEXTURE_COPY_TYPE;
    union {
        PlacedFootprint:  D3D12_PLACED_SUBRESOURCE_FOOTPRINT;
        SubresourceIndex: u32;
    }
}

D3D12_RESOLVE_MODE :: enum s32 {
    DECOMPRESS              :: 0;
    MIN                     :: 1;
    MAX                     :: 2;
    AVERAGE                 :: 3;
    ENCODE_SAMPLER_FEEDBACK :: 4;
    DECODE_SAMPLER_FEEDBACK :: 5;

    D3D12_RESOLVE_MODE_DECOMPRESS              :: DECOMPRESS;
    D3D12_RESOLVE_MODE_MIN                     :: MIN;
    D3D12_RESOLVE_MODE_MAX                     :: MAX;
    D3D12_RESOLVE_MODE_AVERAGE                 :: AVERAGE;
    D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK :: ENCODE_SAMPLER_FEEDBACK;
    D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK :: DECODE_SAMPLER_FEEDBACK;
}

D3D12_SAMPLE_POSITION :: struct {
    X: s8;
    Y: s8;
}

D3D12_VIEW_INSTANCE_LOCATION :: struct {
    ViewportArrayIndex:     u32;
    RenderTargetArrayIndex: u32;
}

D3D12_VIEW_INSTANCING_FLAGS :: enum_flags u32 {
    NONE                         :: 0x0;
    ENABLE_VIEW_INSTANCE_MASKING :: 0x1;

    D3D12_VIEW_INSTANCING_FLAG_NONE                         :: NONE;
    D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING :: ENABLE_VIEW_INSTANCE_MASKING;
}

D3D12_VIEW_INSTANCING_DESC :: struct {
    ViewInstanceCount:      u32;
    pViewInstanceLocations: *D3D12_VIEW_INSTANCE_LOCATION;
    Flags:                  D3D12_VIEW_INSTANCING_FLAGS;
}

D3D12_SHADER_COMPONENT_MAPPING :: enum s32 {
    FROM_MEMORY_COMPONENT_0 :: 0;
    FROM_MEMORY_COMPONENT_1 :: 1;
    FROM_MEMORY_COMPONENT_2 :: 2;
    FROM_MEMORY_COMPONENT_3 :: 3;
    FORCE_VALUE_0           :: 4;
    FORCE_VALUE_1           :: 5;

    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 :: FROM_MEMORY_COMPONENT_0;
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 :: FROM_MEMORY_COMPONENT_1;
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 :: FROM_MEMORY_COMPONENT_2;
    D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 :: FROM_MEMORY_COMPONENT_3;
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0           :: FORCE_VALUE_0;
    D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1           :: FORCE_VALUE_1;
}

D3D12_BUFFER_SRV_FLAGS :: enum_flags u32 {
    NONE :: 0x0;
    RAW  :: 0x1;

    D3D12_BUFFER_SRV_FLAG_NONE :: NONE;
    D3D12_BUFFER_SRV_FLAG_RAW  :: RAW;
}

D3D12_BUFFER_SRV :: struct {
    FirstElement:        u64;
    NumElements:         u32;
    StructureByteStride: u32;
    Flags:               D3D12_BUFFER_SRV_FLAGS;
}

D3D12_TEX1D_SRV :: struct {
    MostDetailedMip:     u32;
    MipLevels:           u32;
    ResourceMinLODClamp: float;
}

D3D12_TEX1D_ARRAY_SRV :: struct {
    MostDetailedMip:     u32;
    MipLevels:           u32;
    FirstArraySlice:     u32;
    ArraySize:           u32;
    ResourceMinLODClamp: float;
}

D3D12_TEX2D_SRV :: struct {
    MostDetailedMip:     u32;
    MipLevels:           u32;
    PlaneSlice:          u32;
    ResourceMinLODClamp: float;
}

D3D12_TEX2D_ARRAY_SRV :: struct {
    MostDetailedMip:     u32;
    MipLevels:           u32;
    FirstArraySlice:     u32;
    ArraySize:           u32;
    PlaneSlice:          u32;
    ResourceMinLODClamp: float;
}

D3D12_TEX3D_SRV :: struct {
    MostDetailedMip:     u32;
    MipLevels:           u32;
    ResourceMinLODClamp: float;
}

D3D12_TEXCUBE_SRV :: struct {
    MostDetailedMip:     u32;
    MipLevels:           u32;
    ResourceMinLODClamp: float;
}

D3D12_TEXCUBE_ARRAY_SRV :: struct {
    MostDetailedMip:     u32;
    MipLevels:           u32;
    First2DArrayFace:    u32;
    NumCubes:            u32;
    ResourceMinLODClamp: float;
}

D3D12_TEX2DMS_SRV :: struct {
    UnusedField_NothingToDefine: u32;
}

D3D12_TEX2DMS_ARRAY_SRV :: struct {
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV :: struct {
    Location: D3D12_GPU_VIRTUAL_ADDRESS;
}

D3D12_SRV_DIMENSION :: enum s32 {
    UNKNOWN                           :: 0;
    BUFFER                            :: 1;
    TEXTURE1D                         :: 2;
    TEXTURE1DARRAY                    :: 3;
    TEXTURE2D                         :: 4;
    TEXTURE2DARRAY                    :: 5;
    TEXTURE2DMS                       :: 6;
    TEXTURE2DMSARRAY                  :: 7;
    TEXTURE3D                         :: 8;
    TEXTURECUBE                       :: 9;
    TEXTURECUBEARRAY                  :: 10;
    RAYTRACING_ACCELERATION_STRUCTURE :: 11;

    D3D12_SRV_DIMENSION_UNKNOWN                           :: UNKNOWN;
    D3D12_SRV_DIMENSION_BUFFER                            :: BUFFER;
    D3D12_SRV_DIMENSION_TEXTURE1D                         :: TEXTURE1D;
    D3D12_SRV_DIMENSION_TEXTURE1DARRAY                    :: TEXTURE1DARRAY;
    D3D12_SRV_DIMENSION_TEXTURE2D                         :: TEXTURE2D;
    D3D12_SRV_DIMENSION_TEXTURE2DARRAY                    :: TEXTURE2DARRAY;
    D3D12_SRV_DIMENSION_TEXTURE2DMS                       :: TEXTURE2DMS;
    D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY                  :: TEXTURE2DMSARRAY;
    D3D12_SRV_DIMENSION_TEXTURE3D                         :: TEXTURE3D;
    D3D12_SRV_DIMENSION_TEXTURECUBE                       :: TEXTURECUBE;
    D3D12_SRV_DIMENSION_TEXTURECUBEARRAY                  :: TEXTURECUBEARRAY;
    D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE :: RAYTRACING_ACCELERATION_STRUCTURE;
}

D3D12_SHADER_RESOURCE_VIEW_DESC :: struct {
    Format:                  DXGI_FORMAT;
    ViewDimension:           D3D12_SRV_DIMENSION;
    Shader4ComponentMapping: u32;
    union {
        Buffer:                          D3D12_BUFFER_SRV;
        Texture1D:                       D3D12_TEX1D_SRV;
        Texture1DArray:                  D3D12_TEX1D_ARRAY_SRV;
        Texture2D:                       D3D12_TEX2D_SRV;
        Texture2DArray:                  D3D12_TEX2D_ARRAY_SRV;
        Texture2DMS:                     D3D12_TEX2DMS_SRV;
        Texture2DMSArray:                D3D12_TEX2DMS_ARRAY_SRV;
        Texture3D:                       D3D12_TEX3D_SRV;
        TextureCube:                     D3D12_TEXCUBE_SRV;
        TextureCubeArray:                D3D12_TEXCUBE_ARRAY_SRV;
        RaytracingAccelerationStructure: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV;
    }
}

D3D12_CONSTANT_BUFFER_VIEW_DESC :: struct {
    BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes:    u32;
}

D3D12_FILTER :: enum s32 {
    MIN_MAG_MIP_POINT                          :: 0;
    MIN_MAG_POINT_MIP_LINEAR                   :: 1;
    MIN_POINT_MAG_LINEAR_MIP_POINT             :: 4;
    MIN_POINT_MAG_MIP_LINEAR                   :: 5;
    MIN_LINEAR_MAG_MIP_POINT                   :: 16;
    MIN_LINEAR_MAG_POINT_MIP_LINEAR            :: 17;
    MIN_MAG_LINEAR_MIP_POINT                   :: 20;
    MIN_MAG_MIP_LINEAR                         :: 21;
    ANISOTROPIC                                :: 85;
    COMPARISON_MIN_MAG_MIP_POINT               :: 128;
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR        :: 129;
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT  :: 132;
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR        :: 133;
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT        :: 144;
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: 145;
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT        :: 148;
    COMPARISON_MIN_MAG_MIP_LINEAR              :: 149;
    COMPARISON_ANISOTROPIC                     :: 213;
    MINIMUM_MIN_MAG_MIP_POINT                  :: 256;
    MINIMUM_MIN_MAG_POINT_MIP_LINEAR           :: 257;
    MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     :: 260;
    MINIMUM_MIN_POINT_MAG_MIP_LINEAR           :: 261;
    MINIMUM_MIN_LINEAR_MAG_MIP_POINT           :: 272;
    MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    :: 273;
    MINIMUM_MIN_MAG_LINEAR_MIP_POINT           :: 276;
    MINIMUM_MIN_MAG_MIP_LINEAR                 :: 277;
    MINIMUM_ANISOTROPIC                        :: 341;
    MAXIMUM_MIN_MAG_MIP_POINT                  :: 384;
    MAXIMUM_MIN_MAG_POINT_MIP_LINEAR           :: 385;
    MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     :: 388;
    MAXIMUM_MIN_POINT_MAG_MIP_LINEAR           :: 389;
    MAXIMUM_MIN_LINEAR_MAG_MIP_POINT           :: 400;
    MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    :: 401;
    MAXIMUM_MIN_MAG_LINEAR_MIP_POINT           :: 404;
    MAXIMUM_MIN_MAG_MIP_LINEAR                 :: 405;
    MAXIMUM_ANISOTROPIC                        :: 469;

    D3D12_FILTER_MIN_MAG_MIP_POINT                          :: MIN_MAG_MIP_POINT;
    D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR                   :: MIN_MAG_POINT_MIP_LINEAR;
    D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT             :: MIN_POINT_MAG_LINEAR_MIP_POINT;
    D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR                   :: MIN_POINT_MAG_MIP_LINEAR;
    D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT                   :: MIN_LINEAR_MAG_MIP_POINT;
    D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR            :: MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT                   :: MIN_MAG_LINEAR_MIP_POINT;
    D3D12_FILTER_MIN_MAG_MIP_LINEAR                         :: MIN_MAG_MIP_LINEAR;
    D3D12_FILTER_ANISOTROPIC                                :: ANISOTROPIC;
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT               :: COMPARISON_MIN_MAG_MIP_POINT;
    D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR        :: COMPARISON_MIN_MAG_POINT_MIP_LINEAR;
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT  :: COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT;
    D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR        :: COMPARISON_MIN_POINT_MAG_MIP_LINEAR;
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT        :: COMPARISON_MIN_LINEAR_MAG_MIP_POINT;
    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR :: COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT        :: COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR              :: COMPARISON_MIN_MAG_MIP_LINEAR;
    D3D12_FILTER_COMPARISON_ANISOTROPIC                     :: COMPARISON_ANISOTROPIC;
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT                  :: MINIMUM_MIN_MAG_MIP_POINT;
    D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR           :: MINIMUM_MIN_MAG_POINT_MIP_LINEAR;
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     :: MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
    D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR           :: MINIMUM_MIN_POINT_MAG_MIP_LINEAR;
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT           :: MINIMUM_MIN_LINEAR_MAG_MIP_POINT;
    D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    :: MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT           :: MINIMUM_MIN_MAG_LINEAR_MIP_POINT;
    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR                 :: MINIMUM_MIN_MAG_MIP_LINEAR;
    D3D12_FILTER_MINIMUM_ANISOTROPIC                        :: MINIMUM_ANISOTROPIC;
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT                  :: MAXIMUM_MIN_MAG_MIP_POINT;
    D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR           :: MAXIMUM_MIN_MAG_POINT_MIP_LINEAR;
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT     :: MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
    D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR           :: MAXIMUM_MIN_POINT_MAG_MIP_LINEAR;
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT           :: MAXIMUM_MIN_LINEAR_MAG_MIP_POINT;
    D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR    :: MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
    D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT           :: MAXIMUM_MIN_MAG_LINEAR_MIP_POINT;
    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR                 :: MAXIMUM_MIN_MAG_MIP_LINEAR;
    D3D12_FILTER_MAXIMUM_ANISOTROPIC                        :: MAXIMUM_ANISOTROPIC;
}

D3D12_FILTER_TYPE :: enum s32 {
    POINT  :: 0;
    LINEAR :: 1;

    D3D12_FILTER_TYPE_POINT  :: POINT;
    D3D12_FILTER_TYPE_LINEAR :: LINEAR;
}

D3D12_FILTER_REDUCTION_TYPE :: enum s32 {
    STANDARD   :: 0;
    COMPARISON :: 1;
    MINIMUM    :: 2;
    MAXIMUM    :: 3;

    D3D12_FILTER_REDUCTION_TYPE_STANDARD   :: STANDARD;
    D3D12_FILTER_REDUCTION_TYPE_COMPARISON :: COMPARISON;
    D3D12_FILTER_REDUCTION_TYPE_MINIMUM    :: MINIMUM;
    D3D12_FILTER_REDUCTION_TYPE_MAXIMUM    :: MAXIMUM;
}

D3D12_TEXTURE_ADDRESS_MODE :: enum s32 {
    WRAP        :: 1;
    MIRROR      :: 2;
    CLAMP       :: 3;
    BORDER      :: 4;
    MIRROR_ONCE :: 5;

    D3D12_TEXTURE_ADDRESS_MODE_WRAP        :: WRAP;
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR      :: MIRROR;
    D3D12_TEXTURE_ADDRESS_MODE_CLAMP       :: CLAMP;
    D3D12_TEXTURE_ADDRESS_MODE_BORDER      :: BORDER;
    D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE :: MIRROR_ONCE;
}

D3D12_SAMPLER_DESC :: struct {
    Filter:         D3D12_FILTER;
    AddressU:       D3D12_TEXTURE_ADDRESS_MODE;
    AddressV:       D3D12_TEXTURE_ADDRESS_MODE;
    AddressW:       D3D12_TEXTURE_ADDRESS_MODE;
    MipLODBias:     float;
    MaxAnisotropy:  u32;
    ComparisonFunc: D3D12_COMPARISON_FUNC;
    BorderColor:    [4] float;
    MinLOD:         float;
    MaxLOD:         float;
}

D3D12_SAMPLER_FLAGS :: enum_flags u32 {
    NONE              :: 0x0;
    UINT_BORDER_COLOR :: 0x1;

    D3D12_SAMPLER_FLAG_NONE              :: NONE;
    D3D12_SAMPLER_FLAG_UINT_BORDER_COLOR :: UINT_BORDER_COLOR;
}

D3D12_SAMPLER_DESC2 :: struct {
    Filter:         D3D12_FILTER;
    AddressU:       D3D12_TEXTURE_ADDRESS_MODE;
    AddressV:       D3D12_TEXTURE_ADDRESS_MODE;
    AddressW:       D3D12_TEXTURE_ADDRESS_MODE;
    MipLODBias:     float;
    MaxAnisotropy:  u32;
    ComparisonFunc: D3D12_COMPARISON_FUNC;
    union {
        FloatBorderColor: [4] float;
        UintBorderColor:  [4] u32;
    }

    MinLOD:         float;
    MaxLOD:         float;
    Flags:          D3D12_SAMPLER_FLAGS;
}

D3D12_BUFFER_UAV_FLAGS :: enum_flags u32 {
    NONE :: 0x0;
    RAW  :: 0x1;

    D3D12_BUFFER_UAV_FLAG_NONE :: NONE;
    D3D12_BUFFER_UAV_FLAG_RAW  :: RAW;
}

D3D12_BUFFER_UAV :: struct {
    FirstElement:         u64;
    NumElements:          u32;
    StructureByteStride:  u32;
    CounterOffsetInBytes: u64;
    Flags:                D3D12_BUFFER_UAV_FLAGS;
}

D3D12_TEX1D_UAV :: struct {
    MipSlice: u32;
}

D3D12_TEX1D_ARRAY_UAV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D12_TEX2D_UAV :: struct {
    MipSlice:   u32;
    PlaneSlice: u32;
}

D3D12_TEX2D_ARRAY_UAV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
    PlaneSlice:      u32;
}

D3D12_TEX2DMS_UAV :: struct {
    UnusedField_NothingToDefine: u32;
}

D3D12_TEX2DMS_ARRAY_UAV :: struct {
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D12_TEX3D_UAV :: struct {
    MipSlice:    u32;
    FirstWSlice: u32;
    WSize:       u32;
}

D3D12_UAV_DIMENSION :: enum s32 {
    UNKNOWN          :: 0;
    BUFFER           :: 1;
    TEXTURE1D        :: 2;
    TEXTURE1DARRAY   :: 3;
    TEXTURE2D        :: 4;
    TEXTURE2DARRAY   :: 5;
    TEXTURE2DMS      :: 6;
    TEXTURE2DMSARRAY :: 7;
    TEXTURE3D        :: 8;

    D3D12_UAV_DIMENSION_UNKNOWN          :: UNKNOWN;
    D3D12_UAV_DIMENSION_BUFFER           :: BUFFER;
    D3D12_UAV_DIMENSION_TEXTURE1D        :: TEXTURE1D;
    D3D12_UAV_DIMENSION_TEXTURE1DARRAY   :: TEXTURE1DARRAY;
    D3D12_UAV_DIMENSION_TEXTURE2D        :: TEXTURE2D;
    D3D12_UAV_DIMENSION_TEXTURE2DARRAY   :: TEXTURE2DARRAY;
    D3D12_UAV_DIMENSION_TEXTURE2DMS      :: TEXTURE2DMS;
    D3D12_UAV_DIMENSION_TEXTURE2DMSARRAY :: TEXTURE2DMSARRAY;
    D3D12_UAV_DIMENSION_TEXTURE3D        :: TEXTURE3D;
}

D3D12_UNORDERED_ACCESS_VIEW_DESC :: struct {
    Format:        DXGI_FORMAT;
    ViewDimension: D3D12_UAV_DIMENSION;
    union {
        Buffer:           D3D12_BUFFER_UAV;
        Texture1D:        D3D12_TEX1D_UAV;
        Texture1DArray:   D3D12_TEX1D_ARRAY_UAV;
        Texture2D:        D3D12_TEX2D_UAV;
        Texture2DArray:   D3D12_TEX2D_ARRAY_UAV;
        Texture2DMS:      D3D12_TEX2DMS_UAV;
        Texture2DMSArray: D3D12_TEX2DMS_ARRAY_UAV;
        Texture3D:        D3D12_TEX3D_UAV;
    }
}

D3D12_BUFFER_RTV :: struct {
    FirstElement: u64;
    NumElements:  u32;
}

D3D12_TEX1D_RTV :: struct {
    MipSlice: u32;
}

D3D12_TEX1D_ARRAY_RTV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D12_TEX2D_RTV :: struct {
    MipSlice:   u32;
    PlaneSlice: u32;
}

D3D12_TEX2DMS_RTV :: struct {
    UnusedField_NothingToDefine: u32;
}

D3D12_TEX2D_ARRAY_RTV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
    PlaneSlice:      u32;
}

D3D12_TEX2DMS_ARRAY_RTV :: struct {
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D12_TEX3D_RTV :: struct {
    MipSlice:    u32;
    FirstWSlice: u32;
    WSize:       u32;
}

D3D12_RTV_DIMENSION :: enum s32 {
    UNKNOWN          :: 0;
    BUFFER           :: 1;
    TEXTURE1D        :: 2;
    TEXTURE1DARRAY   :: 3;
    TEXTURE2D        :: 4;
    TEXTURE2DARRAY   :: 5;
    TEXTURE2DMS      :: 6;
    TEXTURE2DMSARRAY :: 7;
    TEXTURE3D        :: 8;

    D3D12_RTV_DIMENSION_UNKNOWN          :: UNKNOWN;
    D3D12_RTV_DIMENSION_BUFFER           :: BUFFER;
    D3D12_RTV_DIMENSION_TEXTURE1D        :: TEXTURE1D;
    D3D12_RTV_DIMENSION_TEXTURE1DARRAY   :: TEXTURE1DARRAY;
    D3D12_RTV_DIMENSION_TEXTURE2D        :: TEXTURE2D;
    D3D12_RTV_DIMENSION_TEXTURE2DARRAY   :: TEXTURE2DARRAY;
    D3D12_RTV_DIMENSION_TEXTURE2DMS      :: TEXTURE2DMS;
    D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY :: TEXTURE2DMSARRAY;
    D3D12_RTV_DIMENSION_TEXTURE3D        :: TEXTURE3D;
}

D3D12_RENDER_TARGET_VIEW_DESC :: struct {
    Format:        DXGI_FORMAT;
    ViewDimension: D3D12_RTV_DIMENSION;
    union {
        Buffer:           D3D12_BUFFER_RTV;
        Texture1D:        D3D12_TEX1D_RTV;
        Texture1DArray:   D3D12_TEX1D_ARRAY_RTV;
        Texture2D:        D3D12_TEX2D_RTV;
        Texture2DArray:   D3D12_TEX2D_ARRAY_RTV;
        Texture2DMS:      D3D12_TEX2DMS_RTV;
        Texture2DMSArray: D3D12_TEX2DMS_ARRAY_RTV;
        Texture3D:        D3D12_TEX3D_RTV;
    }
}

D3D12_TEX1D_DSV :: struct {
    MipSlice: u32;
}

D3D12_TEX1D_ARRAY_DSV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D12_TEX2D_DSV :: struct {
    MipSlice: u32;
}

D3D12_TEX2D_ARRAY_DSV :: struct {
    MipSlice:        u32;
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D12_TEX2DMS_DSV :: struct {
    UnusedField_NothingToDefine: u32;
}

D3D12_TEX2DMS_ARRAY_DSV :: struct {
    FirstArraySlice: u32;
    ArraySize:       u32;
}

D3D12_DSV_FLAGS :: enum_flags u32 {
    NONE              :: 0x0;
    READ_ONLY_DEPTH   :: 0x1;
    READ_ONLY_STENCIL :: 0x2;

    D3D12_DSV_FLAG_NONE              :: NONE;
    D3D12_DSV_FLAG_READ_ONLY_DEPTH   :: READ_ONLY_DEPTH;
    D3D12_DSV_FLAG_READ_ONLY_STENCIL :: READ_ONLY_STENCIL;
}

D3D12_DSV_DIMENSION :: enum s32 {
    UNKNOWN          :: 0;
    TEXTURE1D        :: 1;
    TEXTURE1DARRAY   :: 2;
    TEXTURE2D        :: 3;
    TEXTURE2DARRAY   :: 4;
    TEXTURE2DMS      :: 5;
    TEXTURE2DMSARRAY :: 6;

    D3D12_DSV_DIMENSION_UNKNOWN          :: UNKNOWN;
    D3D12_DSV_DIMENSION_TEXTURE1D        :: TEXTURE1D;
    D3D12_DSV_DIMENSION_TEXTURE1DARRAY   :: TEXTURE1DARRAY;
    D3D12_DSV_DIMENSION_TEXTURE2D        :: TEXTURE2D;
    D3D12_DSV_DIMENSION_TEXTURE2DARRAY   :: TEXTURE2DARRAY;
    D3D12_DSV_DIMENSION_TEXTURE2DMS      :: TEXTURE2DMS;
    D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY :: TEXTURE2DMSARRAY;
}

D3D12_DEPTH_STENCIL_VIEW_DESC :: struct {
    Format:        DXGI_FORMAT;
    ViewDimension: D3D12_DSV_DIMENSION;
    Flags:         D3D12_DSV_FLAGS;
    union {
        Texture1D:        D3D12_TEX1D_DSV;
        Texture1DArray:   D3D12_TEX1D_ARRAY_DSV;
        Texture2D:        D3D12_TEX2D_DSV;
        Texture2DArray:   D3D12_TEX2D_ARRAY_DSV;
        Texture2DMS:      D3D12_TEX2DMS_DSV;
        Texture2DMSArray: D3D12_TEX2DMS_ARRAY_DSV;
    }
}

D3D12_CLEAR_FLAGS :: enum_flags u32 {
    DEPTH   :: 0x1;
    STENCIL :: 0x2;

    D3D12_CLEAR_FLAG_DEPTH   :: DEPTH;
    D3D12_CLEAR_FLAG_STENCIL :: STENCIL;
}

D3D12_FENCE_FLAGS :: enum_flags u32 {
    NONE                 :: 0x0;
    SHARED               :: 0x1;
    SHARED_CROSS_ADAPTER :: 0x2;
    NON_MONITORED        :: 0x4;

    D3D12_FENCE_FLAG_NONE                 :: NONE;
    D3D12_FENCE_FLAG_SHARED               :: SHARED;
    D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER :: SHARED_CROSS_ADAPTER;
    D3D12_FENCE_FLAG_NON_MONITORED        :: NON_MONITORED;
}

D3D12_DESCRIPTOR_HEAP_TYPE :: enum s32 {
    CBV_SRV_UAV :: 0;
    SAMPLER     :: 1;
    RTV         :: 2;
    DSV         :: 3;
    NUM_TYPES   :: 4;

    D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV :: CBV_SRV_UAV;
    D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER     :: SAMPLER;
    D3D12_DESCRIPTOR_HEAP_TYPE_RTV         :: RTV;
    D3D12_DESCRIPTOR_HEAP_TYPE_DSV         :: DSV;
    D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES   :: NUM_TYPES;
}

D3D12_DESCRIPTOR_HEAP_FLAGS :: enum_flags u32 {
    NONE           :: 0x0;
    SHADER_VISIBLE :: 0x1;

    D3D12_DESCRIPTOR_HEAP_FLAG_NONE           :: NONE;
    D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE :: SHADER_VISIBLE;
}

D3D12_DESCRIPTOR_HEAP_DESC :: struct {
    Type:           D3D12_DESCRIPTOR_HEAP_TYPE;
    NumDescriptors: u32;
    Flags:          D3D12_DESCRIPTOR_HEAP_FLAGS;
    NodeMask:       u32;
}

D3D12_DESCRIPTOR_RANGE_TYPE :: enum s32 {
    SRV     :: 0;
    UAV     :: 1;
    CBV     :: 2;
    SAMPLER :: 3;

    D3D12_DESCRIPTOR_RANGE_TYPE_SRV     :: SRV;
    D3D12_DESCRIPTOR_RANGE_TYPE_UAV     :: UAV;
    D3D12_DESCRIPTOR_RANGE_TYPE_CBV     :: CBV;
    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER :: SAMPLER;
}

D3D12_DESCRIPTOR_RANGE :: struct {
    RangeType:                         D3D12_DESCRIPTOR_RANGE_TYPE;
    NumDescriptors:                    u32;
    BaseShaderRegister:                u32;
    RegisterSpace:                     u32;
    OffsetInDescriptorsFromTableStart: u32;
}

D3D12_ROOT_DESCRIPTOR_TABLE :: struct {
    NumDescriptorRanges: u32;
    pDescriptorRanges:   *D3D12_DESCRIPTOR_RANGE;
}

D3D12_ROOT_CONSTANTS :: struct {
    ShaderRegister: u32;
    RegisterSpace:  u32;
    Num32BitValues: u32;
}

D3D12_ROOT_DESCRIPTOR :: struct {
    ShaderRegister: u32;
    RegisterSpace:  u32;
}

D3D12_SHADER_VISIBILITY :: enum s32 {
    ALL           :: 0;
    VERTEX        :: 1;
    HULL          :: 2;
    DOMAIN        :: 3;
    GEOMETRY      :: 4;
    PIXEL         :: 5;
    AMPLIFICATION :: 6;
    MESH          :: 7;

    D3D12_SHADER_VISIBILITY_ALL           :: ALL;
    D3D12_SHADER_VISIBILITY_VERTEX        :: VERTEX;
    D3D12_SHADER_VISIBILITY_HULL          :: HULL;
    D3D12_SHADER_VISIBILITY_DOMAIN        :: DOMAIN;
    D3D12_SHADER_VISIBILITY_GEOMETRY      :: GEOMETRY;
    D3D12_SHADER_VISIBILITY_PIXEL         :: PIXEL;
    D3D12_SHADER_VISIBILITY_AMPLIFICATION :: AMPLIFICATION;
    D3D12_SHADER_VISIBILITY_MESH          :: MESH;
}

D3D12_ROOT_PARAMETER_TYPE :: enum s32 {
    DESCRIPTOR_TABLE :: 0;
    _32BIT_CONSTANTS :: 1;
    CBV              :: 2;
    SRV              :: 3;
    UAV              :: 4;

    D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE :: DESCRIPTOR_TABLE;
    D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS  :: _32BIT_CONSTANTS;
    D3D12_ROOT_PARAMETER_TYPE_CBV              :: CBV;
    D3D12_ROOT_PARAMETER_TYPE_SRV              :: SRV;
    D3D12_ROOT_PARAMETER_TYPE_UAV              :: UAV;
}

D3D12_ROOT_PARAMETER :: struct {
    ParameterType:    D3D12_ROOT_PARAMETER_TYPE;
    union {
        DescriptorTable: D3D12_ROOT_DESCRIPTOR_TABLE;
        Constants:       D3D12_ROOT_CONSTANTS;
        Descriptor:      D3D12_ROOT_DESCRIPTOR;
    }

    ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

D3D12_ROOT_SIGNATURE_FLAGS :: enum_flags u32 {
    NONE                                  :: 0x0;
    ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT    :: 0x1;
    DENY_VERTEX_SHADER_ROOT_ACCESS        :: 0x2;
    DENY_HULL_SHADER_ROOT_ACCESS          :: 0x4;
    DENY_DOMAIN_SHADER_ROOT_ACCESS        :: 0x8;
    DENY_GEOMETRY_SHADER_ROOT_ACCESS      :: 0x10;
    DENY_PIXEL_SHADER_ROOT_ACCESS         :: 0x20;
    ALLOW_STREAM_OUTPUT                   :: 0x40;
    LOCAL_ROOT_SIGNATURE                  :: 0x80;
    DENY_AMPLIFICATION_SHADER_ROOT_ACCESS :: 0x100;
    DENY_MESH_SHADER_ROOT_ACCESS          :: 0x200;
    CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED     :: 0x400;
    SAMPLER_HEAP_DIRECTLY_INDEXED         :: 0x800;

    D3D12_ROOT_SIGNATURE_FLAG_NONE                                  :: NONE;
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT    :: ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;
    D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS        :: DENY_VERTEX_SHADER_ROOT_ACCESS;
    D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS          :: DENY_HULL_SHADER_ROOT_ACCESS;
    D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS        :: DENY_DOMAIN_SHADER_ROOT_ACCESS;
    D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS      :: DENY_GEOMETRY_SHADER_ROOT_ACCESS;
    D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS         :: DENY_PIXEL_SHADER_ROOT_ACCESS;
    D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT                   :: ALLOW_STREAM_OUTPUT;
    D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE                  :: LOCAL_ROOT_SIGNATURE;
    D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS :: DENY_AMPLIFICATION_SHADER_ROOT_ACCESS;
    D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS          :: DENY_MESH_SHADER_ROOT_ACCESS;
    D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED     :: CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED;
    D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED         :: SAMPLER_HEAP_DIRECTLY_INDEXED;
}

D3D12_STATIC_BORDER_COLOR :: enum s32 {
    TRANSPARENT_BLACK :: 0;
    OPAQUE_BLACK      :: 1;
    OPAQUE_WHITE      :: 2;
    OPAQUE_BLACK_UINT :: 3;
    OPAQUE_WHITE_UINT :: 4;

    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK :: TRANSPARENT_BLACK;
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK      :: OPAQUE_BLACK;
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE      :: OPAQUE_WHITE;
    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK_UINT :: OPAQUE_BLACK_UINT;
    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE_UINT :: OPAQUE_WHITE_UINT;
}

D3D12_STATIC_SAMPLER_DESC :: struct {
    Filter:           D3D12_FILTER;
    AddressU:         D3D12_TEXTURE_ADDRESS_MODE;
    AddressV:         D3D12_TEXTURE_ADDRESS_MODE;
    AddressW:         D3D12_TEXTURE_ADDRESS_MODE;
    MipLODBias:       float;
    MaxAnisotropy:    u32;
    ComparisonFunc:   D3D12_COMPARISON_FUNC;
    BorderColor:      D3D12_STATIC_BORDER_COLOR;
    MinLOD:           float;
    MaxLOD:           float;
    ShaderRegister:   u32;
    RegisterSpace:    u32;
    ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

D3D12_ROOT_SIGNATURE_DESC :: struct {
    NumParameters:     u32;
    pParameters:       *D3D12_ROOT_PARAMETER;
    NumStaticSamplers: u32;
    pStaticSamplers:   *D3D12_STATIC_SAMPLER_DESC;
    Flags:             D3D12_ROOT_SIGNATURE_FLAGS;
}

D3D12_DESCRIPTOR_RANGE_FLAGS :: enum_flags u32 {
    NONE                                            :: 0x0;
    DESCRIPTORS_VOLATILE                            :: 0x1;
    DATA_VOLATILE                                   :: 0x2;
    DATA_STATIC_WHILE_SET_AT_EXECUTE                :: 0x4;
    DATA_STATIC                                     :: 0x8;
    DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS :: 0x10000;

    D3D12_DESCRIPTOR_RANGE_FLAG_NONE                                            :: NONE;
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE                            :: DESCRIPTORS_VOLATILE;
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE                                   :: DATA_VOLATILE;
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE                :: DATA_STATIC_WHILE_SET_AT_EXECUTE;
    D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC                                     :: DATA_STATIC;
    D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS :: DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS;
}

D3D12_DESCRIPTOR_RANGE1 :: struct {
    RangeType:                         D3D12_DESCRIPTOR_RANGE_TYPE;
    NumDescriptors:                    u32;
    BaseShaderRegister:                u32;
    RegisterSpace:                     u32;
    Flags:                             D3D12_DESCRIPTOR_RANGE_FLAGS;
    OffsetInDescriptorsFromTableStart: u32;
}

D3D12_ROOT_DESCRIPTOR_TABLE1 :: struct {
    NumDescriptorRanges: u32;
    pDescriptorRanges:   *D3D12_DESCRIPTOR_RANGE1;
}

D3D12_ROOT_DESCRIPTOR_FLAGS :: enum_flags u32 {
    NONE                             :: 0x0;
    DATA_VOLATILE                    :: 0x2;
    DATA_STATIC_WHILE_SET_AT_EXECUTE :: 0x4;
    DATA_STATIC                      :: 0x8;

    D3D12_ROOT_DESCRIPTOR_FLAG_NONE                             :: NONE;
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE                    :: DATA_VOLATILE;
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE :: DATA_STATIC_WHILE_SET_AT_EXECUTE;
    D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC                      :: DATA_STATIC;
}

D3D12_ROOT_DESCRIPTOR1 :: struct {
    ShaderRegister: u32;
    RegisterSpace:  u32;
    Flags:          D3D12_ROOT_DESCRIPTOR_FLAGS;
}

D3D12_ROOT_PARAMETER1 :: struct {
    ParameterType:    D3D12_ROOT_PARAMETER_TYPE;
    union {
        DescriptorTable: D3D12_ROOT_DESCRIPTOR_TABLE1;
        Constants:       D3D12_ROOT_CONSTANTS;
        Descriptor:      D3D12_ROOT_DESCRIPTOR1;
    }

    ShaderVisibility: D3D12_SHADER_VISIBILITY;
}

D3D12_ROOT_SIGNATURE_DESC1 :: struct {
    NumParameters:     u32;
    pParameters:       *D3D12_ROOT_PARAMETER1;
    NumStaticSamplers: u32;
    pStaticSamplers:   *D3D12_STATIC_SAMPLER_DESC;
    Flags:             D3D12_ROOT_SIGNATURE_FLAGS;
}

D3D12_VERSIONED_ROOT_SIGNATURE_DESC :: struct {
    Version: D3D_ROOT_SIGNATURE_VERSION;
    union {
        Desc_1_0: D3D12_ROOT_SIGNATURE_DESC;
        Desc_1_1: D3D12_ROOT_SIGNATURE_DESC1;
    }
}


ID3D12RootSignatureDeserializer_UUID :: "34AB647B-3CC8-46AC-841B-C0965645C046";
ID3D12RootSignatureDeserializer :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12rootsignaturedeserializer_vtable: *ID3D12RootSignatureDeserializer_VTable;
}
ID3D12RootSignatureDeserializer_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetRootSignatureDesc: (this: *ID3D12RootSignatureDeserializer) -> *D3D12_ROOT_SIGNATURE_DESC #cpp_method;
}
vtable :: (obj: *ID3D12RootSignatureDeserializer) -> *ID3D12RootSignatureDeserializer_VTable { return obj.id3d12rootsignaturedeserializer_vtable; }



ID3D12VersionedRootSignatureDeserializer_UUID :: "7F91CE67-090C-4BB7-B78E-ED8FF2E31DA0";
ID3D12VersionedRootSignatureDeserializer :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12versionedrootsignaturedeserializer_vtable: *ID3D12VersionedRootSignatureDeserializer_VTable;
}
ID3D12VersionedRootSignatureDeserializer_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetRootSignatureDescAtVersion: (this: *ID3D12VersionedRootSignatureDeserializer, convertToVersion: D3D_ROOT_SIGNATURE_VERSION, ppDesc: **D3D12_VERSIONED_ROOT_SIGNATURE_DESC) -> HRESULT #cpp_method;
    GetUnconvertedRootSignatureDesc: (this: *ID3D12VersionedRootSignatureDeserializer) -> *D3D12_VERSIONED_ROOT_SIGNATURE_DESC #cpp_method;
}
vtable :: (obj: *ID3D12VersionedRootSignatureDeserializer) -> *ID3D12VersionedRootSignatureDeserializer_VTable { return obj.id3d12versionedrootsignaturedeserializer_vtable; }


/* interface __MIDL_itf_d3d12_0000_0003 */
/* [local] */
PFN_D3D12_SERIALIZE_ROOT_SIGNATURE :: #type (pRootSignature: *D3D12_ROOT_SIGNATURE_DESC, Version: D3D_ROOT_SIGNATURE_VERSION, ppBlob: **ID3DBlob, ppErrorBlob: **ID3DBlob) -> HRESULT #c_call;

D3D12SerializeRootSignature :: (pRootSignature: *D3D12_ROOT_SIGNATURE_DESC, Version: D3D_ROOT_SIGNATURE_VERSION, ppBlob: **ID3DBlob, ppErrorBlob: **ID3DBlob) -> HRESULT #foreign d3d12;

PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER :: #type (pSrcData: *void, SrcDataSizeInBytes: SIZE_T, pRootSignatureDeserializerInterface: *IID, ppRootSignatureDeserializer: **void) -> HRESULT #c_call;

D3D12CreateRootSignatureDeserializer :: (pSrcData: *void, SrcDataSizeInBytes: SIZE_T, pRootSignatureDeserializerInterface: *IID, ppRootSignatureDeserializer: **void) -> HRESULT #foreign d3d12;
D3D12CreateRootSignatureDeserializer :: (pSrcData: *void, SrcDataSizeInBytes: SIZE_T, pRootSignatureDeserializerInterface: IID, ppRootSignatureDeserializer: **void) -> HRESULT #no_context {
    return D3D12CreateRootSignatureDeserializer(pSrcData, SrcDataSizeInBytes, *pRootSignatureDeserializerInterface, ppRootSignatureDeserializer);
}

PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE :: #type (pRootSignature: *D3D12_VERSIONED_ROOT_SIGNATURE_DESC, ppBlob: **ID3DBlob, ppErrorBlob: **ID3DBlob) -> HRESULT #c_call;

D3D12SerializeVersionedRootSignature :: (pRootSignature: *D3D12_VERSIONED_ROOT_SIGNATURE_DESC, ppBlob: **ID3DBlob, ppErrorBlob: **ID3DBlob) -> HRESULT #foreign d3d12;

PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER :: #type (pSrcData: *void, SrcDataSizeInBytes: SIZE_T, pRootSignatureDeserializerInterface: *IID, ppRootSignatureDeserializer: **void) -> HRESULT #c_call;

D3D12CreateVersionedRootSignatureDeserializer :: (pSrcData: *void, SrcDataSizeInBytes: SIZE_T, pRootSignatureDeserializerInterface: *IID, ppRootSignatureDeserializer: **void) -> HRESULT #foreign d3d12;
D3D12CreateVersionedRootSignatureDeserializer :: (pSrcData: *void, SrcDataSizeInBytes: SIZE_T, pRootSignatureDeserializerInterface: IID, ppRootSignatureDeserializer: **void) -> HRESULT #no_context {
    return D3D12CreateVersionedRootSignatureDeserializer(pSrcData, SrcDataSizeInBytes, *pRootSignatureDeserializerInterface, ppRootSignatureDeserializer);
}

D3D12_CPU_DESCRIPTOR_HANDLE :: struct {
    ptr: SIZE_T;
}

D3D12_GPU_DESCRIPTOR_HANDLE :: struct {
    ptr: u64;
}

// If rects are supplied in D3D12_DISCARD_REGION, below, the resource 
// must have 2D subresources with all specified subresources the same dimension.
D3D12_DISCARD_REGION :: struct {
    NumRects:         u32;
    pRects:           *D3D12_RECT;
    FirstSubresource: u32;
    NumSubresources:  u32;
}

D3D12_QUERY_HEAP_TYPE :: enum s32 {
    OCCLUSION               :: 0;
    TIMESTAMP               :: 1;
    PIPELINE_STATISTICS     :: 2;
    SO_STATISTICS           :: 3;
    VIDEO_DECODE_STATISTICS :: 4;
    COPY_QUEUE_TIMESTAMP    :: 5;
    PIPELINE_STATISTICS1    :: 7;

    D3D12_QUERY_HEAP_TYPE_OCCLUSION               :: OCCLUSION;
    D3D12_QUERY_HEAP_TYPE_TIMESTAMP               :: TIMESTAMP;
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS     :: PIPELINE_STATISTICS;
    D3D12_QUERY_HEAP_TYPE_SO_STATISTICS           :: SO_STATISTICS;
    D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS :: VIDEO_DECODE_STATISTICS;
    D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP    :: COPY_QUEUE_TIMESTAMP;
    D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1    :: PIPELINE_STATISTICS1;
}

D3D12_QUERY_HEAP_DESC :: struct {
    Type:     D3D12_QUERY_HEAP_TYPE;
    Count:    u32;
    NodeMask: u32;
}

D3D12_QUERY_TYPE :: enum s32 {
    OCCLUSION               :: 0;
    BINARY_OCCLUSION        :: 1;
    TIMESTAMP               :: 2;
    PIPELINE_STATISTICS     :: 3;
    SO_STATISTICS_STREAM0   :: 4;
    SO_STATISTICS_STREAM1   :: 5;
    SO_STATISTICS_STREAM2   :: 6;
    SO_STATISTICS_STREAM3   :: 7;
    VIDEO_DECODE_STATISTICS :: 8;
    PIPELINE_STATISTICS1    :: 10;

    D3D12_QUERY_TYPE_OCCLUSION               :: OCCLUSION;
    D3D12_QUERY_TYPE_BINARY_OCCLUSION        :: BINARY_OCCLUSION;
    D3D12_QUERY_TYPE_TIMESTAMP               :: TIMESTAMP;
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS     :: PIPELINE_STATISTICS;
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0   :: SO_STATISTICS_STREAM0;
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1   :: SO_STATISTICS_STREAM1;
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2   :: SO_STATISTICS_STREAM2;
    D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3   :: SO_STATISTICS_STREAM3;
    D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS :: VIDEO_DECODE_STATISTICS;
    D3D12_QUERY_TYPE_PIPELINE_STATISTICS1    :: PIPELINE_STATISTICS1;
}

D3D12_PREDICATION_OP :: enum s32 {
    EQUAL_ZERO     :: 0;
    NOT_EQUAL_ZERO :: 1;

    D3D12_PREDICATION_OP_EQUAL_ZERO     :: EQUAL_ZERO;
    D3D12_PREDICATION_OP_NOT_EQUAL_ZERO :: NOT_EQUAL_ZERO;
}

D3D12_QUERY_DATA_PIPELINE_STATISTICS :: struct {
    IAVertices:    u64;
    IAPrimitives:  u64;
    VSInvocations: u64;
    GSInvocations: u64;
    GSPrimitives:  u64;
    CInvocations:  u64;
    CPrimitives:   u64;
    PSInvocations: u64;
    HSInvocations: u64;
    DSInvocations: u64;
    CSInvocations: u64;
}

D3D12_QUERY_DATA_PIPELINE_STATISTICS1 :: struct {
    IAVertices:    u64;
    IAPrimitives:  u64;
    VSInvocations: u64;
    GSInvocations: u64;
    GSPrimitives:  u64;
    CInvocations:  u64;
    CPrimitives:   u64;
    PSInvocations: u64;
    HSInvocations: u64;
    DSInvocations: u64;
    CSInvocations: u64;
    ASInvocations: u64;
    MSInvocations: u64;
    MSPrimitives:  u64;
}

D3D12_QUERY_DATA_SO_STATISTICS :: struct {
    NumPrimitivesWritten:    u64;
    PrimitivesStorageNeeded: u64;
}

D3D12_STREAM_OUTPUT_BUFFER_VIEW :: struct {
    BufferLocation:           D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes:              u64;
    BufferFilledSizeLocation: D3D12_GPU_VIRTUAL_ADDRESS;
}

D3D12_DRAW_ARGUMENTS :: struct {
    VertexCountPerInstance: u32;
    InstanceCount:          u32;
    StartVertexLocation:    u32;
    StartInstanceLocation:  u32;
}

D3D12_DRAW_INDEXED_ARGUMENTS :: struct {
    IndexCountPerInstance: u32;
    InstanceCount:         u32;
    StartIndexLocation:    u32;
    BaseVertexLocation:    s32;
    StartInstanceLocation: u32;
}

D3D12_DISPATCH_ARGUMENTS :: struct {
    ThreadGroupCountX: u32;
    ThreadGroupCountY: u32;
    ThreadGroupCountZ: u32;
}

D3D12_VERTEX_BUFFER_VIEW :: struct {
    BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes:    u32;
    StrideInBytes:  u32;
}

D3D12_INDEX_BUFFER_VIEW :: struct {
    BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes:    u32;
    Format:         DXGI_FORMAT;
}

D3D12_INDIRECT_ARGUMENT_TYPE :: enum s32 {
    DRAW                  :: 0;
    DRAW_INDEXED          :: 1;
    DISPATCH              :: 2;
    VERTEX_BUFFER_VIEW    :: 3;
    INDEX_BUFFER_VIEW     :: 4;
    CONSTANT              :: 5;
    CONSTANT_BUFFER_VIEW  :: 6;
    SHADER_RESOURCE_VIEW  :: 7;
    UNORDERED_ACCESS_VIEW :: 8;
    DISPATCH_RAYS         :: 9;
    DISPATCH_MESH         :: 10;

    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW                  :: DRAW;
    D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED          :: DRAW_INDEXED;
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH              :: DISPATCH;
    D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW    :: VERTEX_BUFFER_VIEW;
    D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW     :: INDEX_BUFFER_VIEW;
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT              :: CONSTANT;
    D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW  :: CONSTANT_BUFFER_VIEW;
    D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW  :: SHADER_RESOURCE_VIEW;
    D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW :: UNORDERED_ACCESS_VIEW;
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS         :: DISPATCH_RAYS;
    D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH         :: DISPATCH_MESH;
}

D3D12_INDIRECT_ARGUMENT_DESC :: struct {
    Type: D3D12_INDIRECT_ARGUMENT_TYPE;
    union {
        VertexBuffer:        struct {
            Slot: u32;
        };

        Constant:            struct {
            RootParameterIndex:      u32;
            DestOffsetIn32BitValues: u32;
            Num32BitValuesToSet:     u32;
        };

        ConstantBufferView:  struct {
            RootParameterIndex: u32;
        };

        ShaderResourceView:  struct {
            RootParameterIndex: u32;
        };

        UnorderedAccessView: struct {
            RootParameterIndex: u32;
        };
    }
}

D3D12_COMMAND_SIGNATURE_DESC :: struct {
    ByteStride:       u32;
    NumArgumentDescs: u32;
    pArgumentDescs:   *D3D12_INDIRECT_ARGUMENT_DESC;
    NodeMask:         u32;
}


ID3D12Pageable_UUID :: "63ee58fb-1268-4835-86da-f008ce62f0d6";
ID3D12Pageable :: struct {
    #as using id3d12devicechild: ID3D12DeviceChild;
}


ID3D12Heap_UUID :: "6b3b2502-6e51-45b3-90ee-9884265e8df3";
ID3D12Heap :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12heap_vtable: *ID3D12Heap_VTable;
}
ID3D12Heap_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetDesc: (this: *ID3D12Heap) -> D3D12_HEAP_DESC #cpp_method;
}
vtable :: (obj: *ID3D12Heap) -> *ID3D12Heap_VTable { return obj.id3d12heap_vtable; }



ID3D12Resource_UUID :: "696442be-a72e-4059-bc79-5b5c98040fad";
ID3D12Resource :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12resource_vtable: *ID3D12Resource_VTable;
}
ID3D12Resource_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    Map: (this: *ID3D12Resource, Subresource: u32, pReadRange: *D3D12_RANGE, ppData: **void) -> HRESULT #cpp_method;
    Unmap: (this: *ID3D12Resource, Subresource: u32, pWrittenRange: *D3D12_RANGE) -> void #cpp_method;
    GetDesc: (this: *ID3D12Resource) -> D3D12_RESOURCE_DESC #cpp_method;
    GetGPUVirtualAddress: (this: *ID3D12Resource) -> D3D12_GPU_VIRTUAL_ADDRESS #cpp_method;
    WriteToSubresource: (this: *ID3D12Resource, DstSubresource: u32, pDstBox: *D3D12_BOX, pSrcData: *void, SrcRowPitch: u32, SrcDepthPitch: u32) -> HRESULT #cpp_method;
    ReadFromSubresource: (this: *ID3D12Resource, pDstData: *void, DstRowPitch: u32, DstDepthPitch: u32, SrcSubresource: u32, pSrcBox: *D3D12_BOX) -> HRESULT #cpp_method;
    GetHeapProperties: (this: *ID3D12Resource, pHeapProperties: *D3D12_HEAP_PROPERTIES, pHeapFlags: *D3D12_HEAP_FLAGS) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Resource) -> *ID3D12Resource_VTable { return obj.id3d12resource_vtable; }



ID3D12CommandAllocator_UUID :: "6102dee4-af59-4b09-b999-b44d73f09b24";
ID3D12CommandAllocator :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12commandallocator_vtable: *ID3D12CommandAllocator_VTable;
}
ID3D12CommandAllocator_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    Reset: (this: *ID3D12CommandAllocator) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12CommandAllocator) -> *ID3D12CommandAllocator_VTable { return obj.id3d12commandallocator_vtable; }



ID3D12Fence_UUID :: "0a753dcf-c4d8-4b91-adf6-be5a60d95a76";
ID3D12Fence :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12fence_vtable: *ID3D12Fence_VTable;
}
ID3D12Fence_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetCompletedValue: (this: *ID3D12Fence) -> u64 #cpp_method;
    SetEventOnCompletion: (this: *ID3D12Fence, Value: u64, hEvent: HANDLE) -> HRESULT #cpp_method;
    Signal: (this: *ID3D12Fence, Value: u64) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Fence) -> *ID3D12Fence_VTable { return obj.id3d12fence_vtable; }



ID3D12Fence1_UUID :: "433685fe-e22b-4ca0-a8db-b5b4f4dd0e4a";
ID3D12Fence1 :: struct {
    #as using id3d12fence: ID3D12Fence;
    #place id3d12fence; id3d12fence1_vtable: *ID3D12Fence1_VTable;
}
ID3D12Fence1_VTable :: struct #type_info_none {
    using id3d12fence: ID3D12Fence_VTable;
    GetCreationFlags: (this: *ID3D12Fence1) -> D3D12_FENCE_FLAGS #cpp_method;
}
vtable :: (obj: *ID3D12Fence1) -> *ID3D12Fence1_VTable { return obj.id3d12fence1_vtable; }



ID3D12PipelineState_UUID :: "765a30f3-f624-4c6f-a828-ace948622445";
ID3D12PipelineState :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12pipelinestate_vtable: *ID3D12PipelineState_VTable;
}
ID3D12PipelineState_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetCachedBlob: (this: *ID3D12PipelineState, ppBlob: **ID3DBlob) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12PipelineState) -> *ID3D12PipelineState_VTable { return obj.id3d12pipelinestate_vtable; }



ID3D12DescriptorHeap_UUID :: "8efb471d-616c-4f49-90f7-127bb763fa51";
ID3D12DescriptorHeap :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12descriptorheap_vtable: *ID3D12DescriptorHeap_VTable;
}
ID3D12DescriptorHeap_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetDesc: (this: *ID3D12DescriptorHeap) -> D3D12_DESCRIPTOR_HEAP_DESC #cpp_method;
    GetCPUDescriptorHandleForHeapStart: (this: *ID3D12DescriptorHeap) -> D3D12_CPU_DESCRIPTOR_HANDLE #cpp_method;
    GetGPUDescriptorHandleForHeapStart: (this: *ID3D12DescriptorHeap) -> D3D12_GPU_DESCRIPTOR_HANDLE #cpp_method;
}
vtable :: (obj: *ID3D12DescriptorHeap) -> *ID3D12DescriptorHeap_VTable { return obj.id3d12descriptorheap_vtable; }



ID3D12QueryHeap_UUID :: "0d9658ae-ed45-469e-a61d-970ec583cab4";
ID3D12QueryHeap :: struct {
    #as using id3d12pageable: ID3D12Pageable;
}


ID3D12CommandSignature_UUID :: "c36a797c-ec80-4f0a-8985-a7b2475082d1";
ID3D12CommandSignature :: struct {
    #as using id3d12pageable: ID3D12Pageable;
}


ID3D12CommandList_UUID :: "7116d91c-e7e4-47ce-b8c6-ec8168f437e5";
ID3D12CommandList :: struct {
    #as using id3d12devicechild: ID3D12DeviceChild;
    #place id3d12devicechild; id3d12commandlist_vtable: *ID3D12CommandList_VTable;
}
ID3D12CommandList_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetType: (this: *ID3D12CommandList) -> D3D12_COMMAND_LIST_TYPE #cpp_method;
}
vtable :: (obj: *ID3D12CommandList) -> *ID3D12CommandList_VTable { return obj.id3d12commandlist_vtable; }



ID3D12GraphicsCommandList_UUID :: "5b160d0f-ac1b-4185-8ba8-b3ae42a5a455";
ID3D12GraphicsCommandList :: struct {
    #as using id3d12commandlist: ID3D12CommandList;
    #place id3d12commandlist; id3d12graphicscommandlist_vtable: *ID3D12GraphicsCommandList_VTable;
}
ID3D12GraphicsCommandList_VTable :: struct #type_info_none {
    using id3d12commandlist: ID3D12CommandList_VTable;
    Close: (this: *ID3D12GraphicsCommandList) -> HRESULT #cpp_method;
    Reset: (this: *ID3D12GraphicsCommandList, pAllocator: *ID3D12CommandAllocator, pInitialState: *ID3D12PipelineState) -> HRESULT #cpp_method;
    ClearState: (this: *ID3D12GraphicsCommandList, pPipelineState: *ID3D12PipelineState) -> void #cpp_method;
    DrawInstanced: (this: *ID3D12GraphicsCommandList, VertexCountPerInstance: u32, InstanceCount: u32, StartVertexLocation: u32, StartInstanceLocation: u32) -> void #cpp_method;
    DrawIndexedInstanced: (this: *ID3D12GraphicsCommandList, IndexCountPerInstance: u32, InstanceCount: u32, StartIndexLocation: u32, BaseVertexLocation: s32, StartInstanceLocation: u32) -> void #cpp_method;
    Dispatch: (this: *ID3D12GraphicsCommandList, ThreadGroupCountX: u32, ThreadGroupCountY: u32, ThreadGroupCountZ: u32) -> void #cpp_method;
    CopyBufferRegion: (this: *ID3D12GraphicsCommandList, pDstBuffer: *ID3D12Resource, DstOffset: u64, pSrcBuffer: *ID3D12Resource, SrcOffset: u64, NumBytes: u64) -> void #cpp_method;
    CopyTextureRegion: (this: *ID3D12GraphicsCommandList, pDst: *D3D12_TEXTURE_COPY_LOCATION, DstX: u32, DstY: u32, DstZ: u32, pSrc: *D3D12_TEXTURE_COPY_LOCATION, pSrcBox: *D3D12_BOX) -> void #cpp_method;
    CopyResource: (this: *ID3D12GraphicsCommandList, pDstResource: *ID3D12Resource, pSrcResource: *ID3D12Resource) -> void #cpp_method;
    CopyTiles: (this: *ID3D12GraphicsCommandList, pTiledResource: *ID3D12Resource, pTileRegionStartCoordinate: *D3D12_TILED_RESOURCE_COORDINATE, pTileRegionSize: *D3D12_TILE_REGION_SIZE, pBuffer: *ID3D12Resource, BufferStartOffsetInBytes: u64, Flags: D3D12_TILE_COPY_FLAGS) -> void #cpp_method;
    ResolveSubresource: (this: *ID3D12GraphicsCommandList, pDstResource: *ID3D12Resource, DstSubresource: u32, pSrcResource: *ID3D12Resource, SrcSubresource: u32, Format: DXGI_FORMAT) -> void #cpp_method;
    IASetPrimitiveTopology: (this: *ID3D12GraphicsCommandList, PrimitiveTopology: D3D12_PRIMITIVE_TOPOLOGY) -> void #cpp_method;
    RSSetViewports: (this: *ID3D12GraphicsCommandList, NumViewports: u32, pViewports: *D3D12_VIEWPORT) -> void #cpp_method;
    RSSetScissorRects: (this: *ID3D12GraphicsCommandList, NumRects: u32, pRects: *D3D12_RECT) -> void #cpp_method;
    OMSetBlendFactor: (this: *ID3D12GraphicsCommandList, BlendFactor: *[4] float) -> void #cpp_method;
    OMSetStencilRef: (this: *ID3D12GraphicsCommandList, StencilRef: u32) -> void #cpp_method;
    SetPipelineState: (this: *ID3D12GraphicsCommandList, pPipelineState: *ID3D12PipelineState) -> void #cpp_method;
    ResourceBarrier: (this: *ID3D12GraphicsCommandList, NumBarriers: u32, pBarriers: *D3D12_RESOURCE_BARRIER) -> void #cpp_method;
    ExecuteBundle: (this: *ID3D12GraphicsCommandList, pCommandList: *ID3D12GraphicsCommandList) -> void #cpp_method;
    SetDescriptorHeaps: (this: *ID3D12GraphicsCommandList, NumDescriptorHeaps: u32, ppDescriptorHeaps: **ID3D12DescriptorHeap) -> void #cpp_method;
    SetComputeRootSignature: (this: *ID3D12GraphicsCommandList, pRootSignature: *ID3D12RootSignature) -> void #cpp_method;
    SetGraphicsRootSignature: (this: *ID3D12GraphicsCommandList, pRootSignature: *ID3D12RootSignature) -> void #cpp_method;
    SetComputeRootDescriptorTable: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, BaseDescriptor: D3D12_GPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    SetGraphicsRootDescriptorTable: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, BaseDescriptor: D3D12_GPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    SetComputeRoot32BitConstant: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, SrcData: u32, DestOffsetIn32BitValues: u32) -> void #cpp_method;
    SetGraphicsRoot32BitConstant: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, SrcData: u32, DestOffsetIn32BitValues: u32) -> void #cpp_method;
    SetComputeRoot32BitConstants: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, Num32BitValuesToSet: u32, pSrcData: *void, DestOffsetIn32BitValues: u32) -> void #cpp_method;
    SetGraphicsRoot32BitConstants: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, Num32BitValuesToSet: u32, pSrcData: *void, DestOffsetIn32BitValues: u32) -> void #cpp_method;
    SetComputeRootConstantBufferView: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> void #cpp_method;
    SetGraphicsRootConstantBufferView: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> void #cpp_method;
    SetComputeRootShaderResourceView: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> void #cpp_method;
    SetGraphicsRootShaderResourceView: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> void #cpp_method;
    SetComputeRootUnorderedAccessView: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> void #cpp_method;
    SetGraphicsRootUnorderedAccessView: (this: *ID3D12GraphicsCommandList, RootParameterIndex: u32, BufferLocation: D3D12_GPU_VIRTUAL_ADDRESS) -> void #cpp_method;
    IASetIndexBuffer: (this: *ID3D12GraphicsCommandList, pView: *D3D12_INDEX_BUFFER_VIEW) -> void #cpp_method;
    IASetVertexBuffers: (this: *ID3D12GraphicsCommandList, StartSlot: u32, NumViews: u32, pViews: *D3D12_VERTEX_BUFFER_VIEW) -> void #cpp_method;
    SOSetTargets: (this: *ID3D12GraphicsCommandList, StartSlot: u32, NumViews: u32, pViews: *D3D12_STREAM_OUTPUT_BUFFER_VIEW) -> void #cpp_method;
    OMSetRenderTargets: (this: *ID3D12GraphicsCommandList, NumRenderTargetDescriptors: u32, pRenderTargetDescriptors: *D3D12_CPU_DESCRIPTOR_HANDLE, RTsSingleHandleToDescriptorRange: BOOL, pDepthStencilDescriptor: *D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    ClearDepthStencilView: (this: *ID3D12GraphicsCommandList, DepthStencilView: D3D12_CPU_DESCRIPTOR_HANDLE, ClearFlags: D3D12_CLEAR_FLAGS, Depth: float, Stencil: u8, NumRects: u32, pRects: *D3D12_RECT) -> void #cpp_method;
    ClearRenderTargetView: (this: *ID3D12GraphicsCommandList, RenderTargetView: D3D12_CPU_DESCRIPTOR_HANDLE, ColorRGBA: *[4] float, NumRects: u32, pRects: *D3D12_RECT) -> void #cpp_method;
    ClearUnorderedAccessViewUint: (this: *ID3D12GraphicsCommandList, ViewGPUHandleInCurrentHeap: D3D12_GPU_DESCRIPTOR_HANDLE, ViewCPUHandle: D3D12_CPU_DESCRIPTOR_HANDLE, pResource: *ID3D12Resource, Values: *[4] u32, NumRects: u32, pRects: *D3D12_RECT) -> void #cpp_method;
    ClearUnorderedAccessViewFloat: (this: *ID3D12GraphicsCommandList, ViewGPUHandleInCurrentHeap: D3D12_GPU_DESCRIPTOR_HANDLE, ViewCPUHandle: D3D12_CPU_DESCRIPTOR_HANDLE, pResource: *ID3D12Resource, Values: *[4] float, NumRects: u32, pRects: *D3D12_RECT) -> void #cpp_method;
    DiscardResource: (this: *ID3D12GraphicsCommandList, pResource: *ID3D12Resource, pRegion: *D3D12_DISCARD_REGION) -> void #cpp_method;
    BeginQuery: (this: *ID3D12GraphicsCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: u32) -> void #cpp_method;
    EndQuery: (this: *ID3D12GraphicsCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: u32) -> void #cpp_method;
    ResolveQueryData: (this: *ID3D12GraphicsCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, StartIndex: u32, NumQueries: u32, pDestinationBuffer: *ID3D12Resource, AlignedDestinationBufferOffset: u64) -> void #cpp_method;
    SetPredication: (this: *ID3D12GraphicsCommandList, pBuffer: *ID3D12Resource, AlignedBufferOffset: u64, Operation: D3D12_PREDICATION_OP) -> void #cpp_method;
    SetMarker: (this: *ID3D12GraphicsCommandList, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    BeginEvent: (this: *ID3D12GraphicsCommandList, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    EndEvent: (this: *ID3D12GraphicsCommandList) -> void #cpp_method;
    ExecuteIndirect: (this: *ID3D12GraphicsCommandList, pCommandSignature: *ID3D12CommandSignature, MaxCommandCount: u32, pArgumentBuffer: *ID3D12Resource, ArgumentBufferOffset: u64, pCountBuffer: *ID3D12Resource, CountBufferOffset: u64) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList) -> *ID3D12GraphicsCommandList_VTable { return obj.id3d12graphicscommandlist_vtable; }



ID3D12GraphicsCommandList1_UUID :: "553103fb-1fe7-4557-bb38-946d7d0e7ca7";
ID3D12GraphicsCommandList1 :: struct {
    #as using id3d12graphicscommandlist: ID3D12GraphicsCommandList;
    #place id3d12graphicscommandlist; id3d12graphicscommandlist1_vtable: *ID3D12GraphicsCommandList1_VTable;
}
ID3D12GraphicsCommandList1_VTable :: struct #type_info_none {
    using id3d12graphicscommandlist: ID3D12GraphicsCommandList_VTable;
    AtomicCopyBufferUINT: (this: *ID3D12GraphicsCommandList1, pDstBuffer: *ID3D12Resource, DstOffset: u64, pSrcBuffer: *ID3D12Resource, SrcOffset: u64, Dependencies: u32, ppDependentResources: **ID3D12Resource, pDependentSubresourceRanges: *D3D12_SUBRESOURCE_RANGE_UINT64) -> void #cpp_method;
    AtomicCopyBufferUINT64: (this: *ID3D12GraphicsCommandList1, pDstBuffer: *ID3D12Resource, DstOffset: u64, pSrcBuffer: *ID3D12Resource, SrcOffset: u64, Dependencies: u32, ppDependentResources: **ID3D12Resource, pDependentSubresourceRanges: *D3D12_SUBRESOURCE_RANGE_UINT64) -> void #cpp_method;
    OMSetDepthBounds: (this: *ID3D12GraphicsCommandList1, Min: float, Max: float) -> void #cpp_method;
    SetSamplePositions: (this: *ID3D12GraphicsCommandList1, NumSamplesPerPixel: u32, NumPixels: u32, pSamplePositions: *D3D12_SAMPLE_POSITION) -> void #cpp_method;
    ResolveSubresourceRegion: (this: *ID3D12GraphicsCommandList1, pDstResource: *ID3D12Resource, DstSubresource: u32, DstX: u32, DstY: u32, pSrcResource: *ID3D12Resource, SrcSubresource: u32, pSrcRect: *D3D12_RECT, Format: DXGI_FORMAT, ResolveMode: D3D12_RESOLVE_MODE) -> void #cpp_method;
    SetViewInstanceMask: (this: *ID3D12GraphicsCommandList1, Mask: u32) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList1) -> *ID3D12GraphicsCommandList1_VTable { return obj.id3d12graphicscommandlist1_vtable; }


/* interface __MIDL_itf_d3d12_0000_0018 */
/* [local] */
D3D12_WRITEBUFFERIMMEDIATE_PARAMETER :: struct {
    Dest:  D3D12_GPU_VIRTUAL_ADDRESS;
    Value: u32;
}

D3D12_WRITEBUFFERIMMEDIATE_MODE :: enum s32 {
    DEFAULT    :: 0;
    MARKER_IN  :: 1;
    MARKER_OUT :: 2;

    D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT    :: DEFAULT;
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN  :: MARKER_IN;
    D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT :: MARKER_OUT;
}


ID3D12GraphicsCommandList2_UUID :: "38C3E585-FF17-412C-9150-4FC6F9D72A28";
ID3D12GraphicsCommandList2 :: struct {
    #as using id3d12graphicscommandlist1: ID3D12GraphicsCommandList1;
    #place id3d12graphicscommandlist1; id3d12graphicscommandlist2_vtable: *ID3D12GraphicsCommandList2_VTable;
}
ID3D12GraphicsCommandList2_VTable :: struct #type_info_none {
    using id3d12graphicscommandlist1: ID3D12GraphicsCommandList1_VTable;
    WriteBufferImmediate: (this: *ID3D12GraphicsCommandList2, Count: u32, pParams: *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes: *D3D12_WRITEBUFFERIMMEDIATE_MODE) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList2) -> *ID3D12GraphicsCommandList2_VTable { return obj.id3d12graphicscommandlist2_vtable; }



ID3D12CommandQueue_UUID :: "0ec870a6-5d7e-4c22-8cfc-5baae07616ed";
ID3D12CommandQueue :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12commandqueue_vtable: *ID3D12CommandQueue_VTable;
}
ID3D12CommandQueue_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    UpdateTileMappings: (this: *ID3D12CommandQueue, pResource: *ID3D12Resource, NumResourceRegions: u32, pResourceRegionStartCoordinates: *D3D12_TILED_RESOURCE_COORDINATE, pResourceRegionSizes: *D3D12_TILE_REGION_SIZE, pHeap: *ID3D12Heap, NumRanges: u32, pRangeFlags: *D3D12_TILE_RANGE_FLAGS, pHeapRangeStartOffsets: *u32, pRangeTileCounts: *u32, Flags: D3D12_TILE_MAPPING_FLAGS) -> void #cpp_method;
    CopyTileMappings: (this: *ID3D12CommandQueue, pDstResource: *ID3D12Resource, pDstRegionStartCoordinate: *D3D12_TILED_RESOURCE_COORDINATE, pSrcResource: *ID3D12Resource, pSrcRegionStartCoordinate: *D3D12_TILED_RESOURCE_COORDINATE, pRegionSize: *D3D12_TILE_REGION_SIZE, Flags: D3D12_TILE_MAPPING_FLAGS) -> void #cpp_method;
    ExecuteCommandLists: (this: *ID3D12CommandQueue, NumCommandLists: u32, ppCommandLists: **ID3D12CommandList) -> void #cpp_method;
    SetMarker: (this: *ID3D12CommandQueue, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    BeginEvent: (this: *ID3D12CommandQueue, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    EndEvent: (this: *ID3D12CommandQueue) -> void #cpp_method;
    Signal: (this: *ID3D12CommandQueue, pFence: *ID3D12Fence, Value: u64) -> HRESULT #cpp_method;
    Wait: (this: *ID3D12CommandQueue, pFence: *ID3D12Fence, Value: u64) -> HRESULT #cpp_method;
    GetTimestampFrequency: (this: *ID3D12CommandQueue, pFrequency: *u64) -> HRESULT #cpp_method;
    GetClockCalibration: (this: *ID3D12CommandQueue, pGpuTimestamp: *u64, pCpuTimestamp: *u64) -> HRESULT #cpp_method;
    GetDesc: (this: *ID3D12CommandQueue) -> D3D12_COMMAND_QUEUE_DESC #cpp_method;
}
vtable :: (obj: *ID3D12CommandQueue) -> *ID3D12CommandQueue_VTable { return obj.id3d12commandqueue_vtable; }



ID3D12Device_UUID :: "189819f1-1db6-4b57-be54-1821339b85f7";
ID3D12Device :: struct {
    #as using id3d12object: ID3D12Object;
    #place id3d12object; id3d12device_vtable: *ID3D12Device_VTable;
}
ID3D12Device_VTable :: struct #type_info_none {
    using id3d12object: ID3D12Object_VTable;
    GetNodeCount: (this: *ID3D12Device) -> u32 #cpp_method;
    CreateCommandQueue: (this: *ID3D12Device, pDesc: *D3D12_COMMAND_QUEUE_DESC, riid: *IID, ppCommandQueue: **void) -> HRESULT #cpp_method;
    CreateCommandAllocator: (this: *ID3D12Device, type: D3D12_COMMAND_LIST_TYPE, riid: *IID, ppCommandAllocator: **void) -> HRESULT #cpp_method;
    CreateGraphicsPipelineState: (this: *ID3D12Device, pDesc: *D3D12_GRAPHICS_PIPELINE_STATE_DESC, riid: *IID, ppPipelineState: **void) -> HRESULT #cpp_method;
    CreateComputePipelineState: (this: *ID3D12Device, pDesc: *D3D12_COMPUTE_PIPELINE_STATE_DESC, riid: *IID, ppPipelineState: **void) -> HRESULT #cpp_method;
    CreateCommandList: (this: *ID3D12Device, nodeMask: u32, type: D3D12_COMMAND_LIST_TYPE, pCommandAllocator: *ID3D12CommandAllocator, pInitialState: *ID3D12PipelineState, riid: *IID, ppCommandList: **void) -> HRESULT #cpp_method;
    CheckFeatureSupport: (this: *ID3D12Device, Feature: D3D12_FEATURE, pFeatureSupportData: *void, FeatureSupportDataSize: u32) -> HRESULT #cpp_method;
    CreateDescriptorHeap: (this: *ID3D12Device, pDescriptorHeapDesc: *D3D12_DESCRIPTOR_HEAP_DESC, riid: *IID, ppvHeap: **void) -> HRESULT #cpp_method;
    GetDescriptorHandleIncrementSize: (this: *ID3D12Device, DescriptorHeapType: D3D12_DESCRIPTOR_HEAP_TYPE) -> u32 #cpp_method;
    CreateRootSignature: (this: *ID3D12Device, nodeMask: u32, pBlobWithRootSignature: *void, blobLengthInBytes: SIZE_T, riid: *IID, ppvRootSignature: **void) -> HRESULT #cpp_method;
    CreateConstantBufferView: (this: *ID3D12Device, pDesc: *D3D12_CONSTANT_BUFFER_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    CreateShaderResourceView: (this: *ID3D12Device, pResource: *ID3D12Resource, pDesc: *D3D12_SHADER_RESOURCE_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    CreateUnorderedAccessView: (this: *ID3D12Device, pResource: *ID3D12Resource, pCounterResource: *ID3D12Resource, pDesc: *D3D12_UNORDERED_ACCESS_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    CreateRenderTargetView: (this: *ID3D12Device, pResource: *ID3D12Resource, pDesc: *D3D12_RENDER_TARGET_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    CreateDepthStencilView: (this: *ID3D12Device, pResource: *ID3D12Resource, pDesc: *D3D12_DEPTH_STENCIL_VIEW_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    CreateSampler: (this: *ID3D12Device, pDesc: *D3D12_SAMPLER_DESC, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    CopyDescriptors: (this: *ID3D12Device, NumDestDescriptorRanges: u32, pDestDescriptorRangeStarts: *D3D12_CPU_DESCRIPTOR_HANDLE, pDestDescriptorRangeSizes: *u32, NumSrcDescriptorRanges: u32, pSrcDescriptorRangeStarts: *D3D12_CPU_DESCRIPTOR_HANDLE, pSrcDescriptorRangeSizes: *u32, DescriptorHeapsType: D3D12_DESCRIPTOR_HEAP_TYPE) -> void #cpp_method;
    CopyDescriptorsSimple: (this: *ID3D12Device, NumDescriptors: u32, DestDescriptorRangeStart: D3D12_CPU_DESCRIPTOR_HANDLE, SrcDescriptorRangeStart: D3D12_CPU_DESCRIPTOR_HANDLE, DescriptorHeapsType: D3D12_DESCRIPTOR_HEAP_TYPE) -> void #cpp_method;
    GetResourceAllocationInfo: (this: *ID3D12Device, visibleMask: u32, numResourceDescs: u32, pResourceDescs: *D3D12_RESOURCE_DESC) -> D3D12_RESOURCE_ALLOCATION_INFO #cpp_method;
    GetCustomHeapProperties: (this: *ID3D12Device, nodeMask: u32, heapType: D3D12_HEAP_TYPE) -> D3D12_HEAP_PROPERTIES #cpp_method;
    CreateCommittedResource: (this: *ID3D12Device, pHeapProperties: *D3D12_HEAP_PROPERTIES, HeapFlags: D3D12_HEAP_FLAGS, pDesc: *D3D12_RESOURCE_DESC, InitialResourceState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *D3D12_CLEAR_VALUE, riidResource: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    CreateHeap: (this: *ID3D12Device, pDesc: *D3D12_HEAP_DESC, riid: *IID, ppvHeap: **void) -> HRESULT #cpp_method;
    CreatePlacedResource: (this: *ID3D12Device, pHeap: *ID3D12Heap, HeapOffset: u64, pDesc: *D3D12_RESOURCE_DESC, InitialState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *D3D12_CLEAR_VALUE, riid: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    CreateReservedResource: (this: *ID3D12Device, pDesc: *D3D12_RESOURCE_DESC, InitialState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *D3D12_CLEAR_VALUE, riid: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    CreateSharedHandle: (this: *ID3D12Device, pObject: *ID3D12DeviceChild, pAttributes: *SECURITY_ATTRIBUTES, Access: u32, Name: *s16, pHandle: *HANDLE) -> HRESULT #cpp_method;
    OpenSharedHandle: (this: *ID3D12Device, NTHandle: HANDLE, riid: *IID, ppvObj: **void) -> HRESULT #cpp_method;
    OpenSharedHandleByName: (this: *ID3D12Device, Name: *s16, Access: u32, pNTHandle: *HANDLE) -> HRESULT #cpp_method;
    MakeResident: (this: *ID3D12Device, NumObjects: u32, ppObjects: **ID3D12Pageable) -> HRESULT #cpp_method;
    Evict: (this: *ID3D12Device, NumObjects: u32, ppObjects: **ID3D12Pageable) -> HRESULT #cpp_method;
    CreateFence: (this: *ID3D12Device, InitialValue: u64, Flags: D3D12_FENCE_FLAGS, riid: *IID, ppFence: **void) -> HRESULT #cpp_method;
    GetDeviceRemovedReason: (this: *ID3D12Device) -> HRESULT #cpp_method;
    GetCopyableFootprints: (this: *ID3D12Device, pResourceDesc: *D3D12_RESOURCE_DESC, FirstSubresource: u32, NumSubresources: u32, BaseOffset: u64, pLayouts: *D3D12_PLACED_SUBRESOURCE_FOOTPRINT, pNumRows: *u32, pRowSizeInBytes: *u64, pTotalBytes: *u64) -> void #cpp_method;
    CreateQueryHeap: (this: *ID3D12Device, pDesc: *D3D12_QUERY_HEAP_DESC, riid: *IID, ppvHeap: **void) -> HRESULT #cpp_method;
    SetStablePowerState: (this: *ID3D12Device, Enable: BOOL) -> HRESULT #cpp_method;
    CreateCommandSignature: (this: *ID3D12Device, pDesc: *D3D12_COMMAND_SIGNATURE_DESC, pRootSignature: *ID3D12RootSignature, riid: *IID, ppvCommandSignature: **void) -> HRESULT #cpp_method;
    GetResourceTiling: (this: *ID3D12Device, pTiledResource: *ID3D12Resource, pNumTilesForEntireResource: *u32, pPackedMipDesc: *D3D12_PACKED_MIP_INFO, pStandardTileShapeForNonPackedMips: *D3D12_TILE_SHAPE, pNumSubresourceTilings: *u32, FirstSubresourceTilingToGet: u32, pSubresourceTilingsForNonPackedMips: *D3D12_SUBRESOURCE_TILING) -> void #cpp_method;
    GetAdapterLuid: (this: *ID3D12Device) -> LUID #cpp_method;
}
vtable :: (obj: *ID3D12Device) -> *ID3D12Device_VTable { return obj.id3d12device_vtable; }



ID3D12PipelineLibrary_UUID :: "c64226a8-9201-46af-b4cc-53fb9ff7414f";
ID3D12PipelineLibrary :: struct {
    #as using id3d12devicechild: ID3D12DeviceChild;
    #place id3d12devicechild; id3d12pipelinelibrary_vtable: *ID3D12PipelineLibrary_VTable;
}
ID3D12PipelineLibrary_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    StorePipeline: (this: *ID3D12PipelineLibrary, pName: *s16, pPipeline: *ID3D12PipelineState) -> HRESULT #cpp_method;
    LoadGraphicsPipeline: (this: *ID3D12PipelineLibrary, pName: *s16, pDesc: *D3D12_GRAPHICS_PIPELINE_STATE_DESC, riid: *IID, ppPipelineState: **void) -> HRESULT #cpp_method;
    LoadComputePipeline: (this: *ID3D12PipelineLibrary, pName: *s16, pDesc: *D3D12_COMPUTE_PIPELINE_STATE_DESC, riid: *IID, ppPipelineState: **void) -> HRESULT #cpp_method;
    GetSerializedSize: (this: *ID3D12PipelineLibrary) -> SIZE_T #cpp_method;
    Serialize: (this: *ID3D12PipelineLibrary, pData: *void, DataSizeInBytes: SIZE_T) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12PipelineLibrary) -> *ID3D12PipelineLibrary_VTable { return obj.id3d12pipelinelibrary_vtable; }



ID3D12PipelineLibrary1_UUID :: "80eabf42-2568-4e5e-bd82-c37f86961dc3";
ID3D12PipelineLibrary1 :: struct {
    #as using id3d12pipelinelibrary: ID3D12PipelineLibrary;
    #place id3d12pipelinelibrary; id3d12pipelinelibrary1_vtable: *ID3D12PipelineLibrary1_VTable;
}
ID3D12PipelineLibrary1_VTable :: struct #type_info_none {
    using id3d12pipelinelibrary: ID3D12PipelineLibrary_VTable;
    LoadPipeline: (this: *ID3D12PipelineLibrary1, pName: *s16, pDesc: *D3D12_PIPELINE_STATE_STREAM_DESC, riid: *IID, ppPipelineState: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12PipelineLibrary1) -> *ID3D12PipelineLibrary1_VTable { return obj.id3d12pipelinelibrary1_vtable; }


/* interface __MIDL_itf_d3d12_0000_0023 */
/* [local] */
D3D12_MULTIPLE_FENCE_WAIT_FLAGS :: enum_flags u32 {
    NONE :: 0x0;
    ANY  :: 0x1;
    ALL  :: 0x0;

    D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE :: NONE;
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY  :: ANY;
    D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL  :: ALL;
}

D3D12_RESIDENCY_PRIORITY :: enum s32 {
    MINIMUM :: 671088640;
    LOW     :: 1342177280;
    NORMAL  :: 2013265920;
    HIGH    :: -1610547200;
    MAXIMUM :: -939524096;

    D3D12_RESIDENCY_PRIORITY_MINIMUM :: MINIMUM;
    D3D12_RESIDENCY_PRIORITY_LOW     :: LOW;
    D3D12_RESIDENCY_PRIORITY_NORMAL  :: NORMAL;
    D3D12_RESIDENCY_PRIORITY_HIGH    :: HIGH;
    D3D12_RESIDENCY_PRIORITY_MAXIMUM :: MAXIMUM;
}


ID3D12Device1_UUID :: "77acce80-638e-4e65-8895-c1f23386863e";
ID3D12Device1 :: struct {
    #as using id3d12device: ID3D12Device;
    #place id3d12device; id3d12device1_vtable: *ID3D12Device1_VTable;
}
ID3D12Device1_VTable :: struct #type_info_none {
    using id3d12device: ID3D12Device_VTable;
    CreatePipelineLibrary: (this: *ID3D12Device1, pLibraryBlob: *void, BlobLength: SIZE_T, riid: *IID, ppPipelineLibrary: **void) -> HRESULT #cpp_method;
    SetEventOnMultipleFenceCompletion: (this: *ID3D12Device1, ppFences: **ID3D12Fence, pFenceValues: *u64, NumFences: u32, Flags: D3D12_MULTIPLE_FENCE_WAIT_FLAGS, hEvent: HANDLE) -> HRESULT #cpp_method;
    SetResidencyPriority: (this: *ID3D12Device1, NumObjects: u32, ppObjects: **ID3D12Pageable, pPriorities: *D3D12_RESIDENCY_PRIORITY) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Device1) -> *ID3D12Device1_VTable { return obj.id3d12device1_vtable; }



ID3D12Device2_UUID :: "30baa41e-b15b-475c-a0bb-1af5c5b64328";
ID3D12Device2 :: struct {
    #as using id3d12device1: ID3D12Device1;
    #place id3d12device1; id3d12device2_vtable: *ID3D12Device2_VTable;
}
ID3D12Device2_VTable :: struct #type_info_none {
    using id3d12device1: ID3D12Device1_VTable;
    CreatePipelineState: (this: *ID3D12Device2, pDesc: *D3D12_PIPELINE_STATE_STREAM_DESC, riid: *IID, ppPipelineState: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Device2) -> *ID3D12Device2_VTable { return obj.id3d12device2_vtable; }


/* interface __MIDL_itf_d3d12_0000_0025 */
/* [local] */
D3D12_RESIDENCY_FLAGS :: enum_flags u32 {
    NONE            :: 0x0;
    DENY_OVERBUDGET :: 0x1;

    D3D12_RESIDENCY_FLAG_NONE            :: NONE;
    D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET :: DENY_OVERBUDGET;
}


ID3D12Device3_UUID :: "81dadc15-2bad-4392-93c5-101345c4aa98";
ID3D12Device3 :: struct {
    #as using id3d12device2: ID3D12Device2;
    #place id3d12device2; id3d12device3_vtable: *ID3D12Device3_VTable;
}
ID3D12Device3_VTable :: struct #type_info_none {
    using id3d12device2: ID3D12Device2_VTable;
    OpenExistingHeapFromAddress: (this: *ID3D12Device3, pAddress: *void, riid: *IID, ppvHeap: **void) -> HRESULT #cpp_method;
    OpenExistingHeapFromFileMapping: (this: *ID3D12Device3, hFileMapping: HANDLE, riid: *IID, ppvHeap: **void) -> HRESULT #cpp_method;
    EnqueueMakeResident: (this: *ID3D12Device3, Flags: D3D12_RESIDENCY_FLAGS, NumObjects: u32, ppObjects: **ID3D12Pageable, pFenceToSignal: *ID3D12Fence, FenceValueToSignal: u64) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Device3) -> *ID3D12Device3_VTable { return obj.id3d12device3_vtable; }


/* interface __MIDL_itf_d3d12_0000_0026 */
/* [local] */
D3D12_COMMAND_LIST_FLAGS :: enum_flags u32 {
    D3D12_COMMAND_LIST_FLAG_NONE :: 0x0;
}

D3D12_COMMAND_POOL_FLAGS :: enum_flags u32 {
    D3D12_COMMAND_POOL_FLAG_NONE :: 0x0;
}

D3D12_COMMAND_RECORDER_FLAGS :: enum_flags u32 {
    D3D12_COMMAND_RECORDER_FLAG_NONE :: 0x0;
}

D3D12_PROTECTED_SESSION_STATUS :: enum s32 {
    OK      :: 0;
    INVALID :: 1;

    D3D12_PROTECTED_SESSION_STATUS_OK      :: OK;
    D3D12_PROTECTED_SESSION_STATUS_INVALID :: INVALID;
}


ID3D12ProtectedSession_UUID :: "A1533D18-0AC1-4084-85B9-89A96116806B";
ID3D12ProtectedSession :: struct {
    #as using id3d12devicechild: ID3D12DeviceChild;
    #place id3d12devicechild; id3d12protectedsession_vtable: *ID3D12ProtectedSession_VTable;
}
ID3D12ProtectedSession_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetStatusFence: (this: *ID3D12ProtectedSession, riid: *IID, ppFence: **void) -> HRESULT #cpp_method;
    GetSessionStatus: (this: *ID3D12ProtectedSession) -> D3D12_PROTECTED_SESSION_STATUS #cpp_method;
}
vtable :: (obj: *ID3D12ProtectedSession) -> *ID3D12ProtectedSession_VTable { return obj.id3d12protectedsession_vtable; }


/* interface __MIDL_itf_d3d12_0000_0027 */
/* [local] */
D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS :: enum_flags u32 {
    NONE      :: 0x0;
    SUPPORTED :: 0x1;

    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE      :: NONE;
    D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED :: SUPPORTED;
}

D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT :: struct {
    NodeIndex: u32;
    Support:   D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS;
}

D3D12_PROTECTED_RESOURCE_SESSION_FLAGS :: enum_flags u32 {
    D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE :: 0x0;
}

D3D12_PROTECTED_RESOURCE_SESSION_DESC :: struct {
    NodeMask: u32;
    Flags:    D3D12_PROTECTED_RESOURCE_SESSION_FLAGS;
}


ID3D12ProtectedResourceSession_UUID :: "6CD696F4-F289-40CC-8091-5A6C0A099C3D";
ID3D12ProtectedResourceSession :: struct {
    #as using id3d12protectedsession: ID3D12ProtectedSession;
    #place id3d12protectedsession; id3d12protectedresourcesession_vtable: *ID3D12ProtectedResourceSession_VTable;
}
ID3D12ProtectedResourceSession_VTable :: struct #type_info_none {
    using id3d12protectedsession: ID3D12ProtectedSession_VTable;
    GetDesc: (this: *ID3D12ProtectedResourceSession) -> D3D12_PROTECTED_RESOURCE_SESSION_DESC #cpp_method;
}
vtable :: (obj: *ID3D12ProtectedResourceSession) -> *ID3D12ProtectedResourceSession_VTable { return obj.id3d12protectedresourcesession_vtable; }



ID3D12Device4_UUID :: "e865df17-a9ee-46f9-a463-3098315aa2e5";
ID3D12Device4 :: struct {
    #as using id3d12device3: ID3D12Device3;
    #place id3d12device3; id3d12device4_vtable: *ID3D12Device4_VTable;
}
ID3D12Device4_VTable :: struct #type_info_none {
    using id3d12device3: ID3D12Device3_VTable;
    CreateCommandList1: (this: *ID3D12Device4, nodeMask: u32, type: D3D12_COMMAND_LIST_TYPE, flags: D3D12_COMMAND_LIST_FLAGS, riid: *IID, ppCommandList: **void) -> HRESULT #cpp_method;
    CreateProtectedResourceSession: (this: *ID3D12Device4, pDesc: *D3D12_PROTECTED_RESOURCE_SESSION_DESC, riid: *IID, ppSession: **void) -> HRESULT #cpp_method;
    CreateCommittedResource1: (this: *ID3D12Device4, pHeapProperties: *D3D12_HEAP_PROPERTIES, HeapFlags: D3D12_HEAP_FLAGS, pDesc: *D3D12_RESOURCE_DESC, InitialResourceState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *D3D12_CLEAR_VALUE, pProtectedSession: *ID3D12ProtectedResourceSession, riidResource: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    CreateHeap1: (this: *ID3D12Device4, pDesc: *D3D12_HEAP_DESC, pProtectedSession: *ID3D12ProtectedResourceSession, riid: *IID, ppvHeap: **void) -> HRESULT #cpp_method;
    CreateReservedResource1: (this: *ID3D12Device4, pDesc: *D3D12_RESOURCE_DESC, InitialState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *D3D12_CLEAR_VALUE, pProtectedSession: *ID3D12ProtectedResourceSession, riid: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    GetResourceAllocationInfo1: (this: *ID3D12Device4, visibleMask: u32, numResourceDescs: u32, pResourceDescs: *D3D12_RESOURCE_DESC, pResourceAllocationInfo1: *D3D12_RESOURCE_ALLOCATION_INFO1) -> D3D12_RESOURCE_ALLOCATION_INFO #cpp_method;
}
vtable :: (obj: *ID3D12Device4) -> *ID3D12Device4_VTable { return obj.id3d12device4_vtable; }


/* interface __MIDL_itf_d3d12_0000_0029 */
/* [local] */
D3D12_LIFETIME_STATE :: enum s32 {
    IN_USE     :: 0;
    NOT_IN_USE :: 1;

    D3D12_LIFETIME_STATE_IN_USE     :: IN_USE;
    D3D12_LIFETIME_STATE_NOT_IN_USE :: NOT_IN_USE;
}


ID3D12LifetimeOwner_UUID :: "e667af9f-cd56-4f46-83ce-032e595d70a8";
ID3D12LifetimeOwner :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12lifetimeowner_vtable: *ID3D12LifetimeOwner_VTable;
}
ID3D12LifetimeOwner_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    LifetimeStateUpdated: (this: *ID3D12LifetimeOwner, NewState: D3D12_LIFETIME_STATE) -> void #cpp_method;
}
vtable :: (obj: *ID3D12LifetimeOwner) -> *ID3D12LifetimeOwner_VTable { return obj.id3d12lifetimeowner_vtable; }



ID3D12SwapChainAssistant_UUID :: "f1df64b6-57fd-49cd-8807-c0eb88b45c8f";
ID3D12SwapChainAssistant :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12swapchainassistant_vtable: *ID3D12SwapChainAssistant_VTable;
}
ID3D12SwapChainAssistant_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetLUID: (this: *ID3D12SwapChainAssistant) -> LUID #cpp_method;
    GetSwapChainObject: (this: *ID3D12SwapChainAssistant, riid: *IID, ppv: **void) -> HRESULT #cpp_method;
    GetCurrentResourceAndCommandQueue: (this: *ID3D12SwapChainAssistant, riidResource: *IID, ppvResource: **void, riidQueue: *IID, ppvQueue: **void) -> HRESULT #cpp_method;
    InsertImplicitSync: (this: *ID3D12SwapChainAssistant) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12SwapChainAssistant) -> *ID3D12SwapChainAssistant_VTable { return obj.id3d12swapchainassistant_vtable; }



ID3D12LifetimeTracker_UUID :: "3fd03d36-4eb1-424a-a582-494ecb8ba813";
ID3D12LifetimeTracker :: struct {
    #as using id3d12devicechild: ID3D12DeviceChild;
    #place id3d12devicechild; id3d12lifetimetracker_vtable: *ID3D12LifetimeTracker_VTable;
}
ID3D12LifetimeTracker_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    DestroyOwnedObject: (this: *ID3D12LifetimeTracker, pObject: *ID3D12DeviceChild) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12LifetimeTracker) -> *ID3D12LifetimeTracker_VTable { return obj.id3d12lifetimetracker_vtable; }


/* interface __MIDL_itf_d3d12_0000_0032 */
/* [local] */
D3D12_META_COMMAND_PARAMETER_TYPE :: enum s32 {
    FLOAT                                       :: 0;
    UINT64                                      :: 1;
    GPU_VIRTUAL_ADDRESS                         :: 2;
    CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV :: 3;
    GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV :: 4;

    D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT                                       :: FLOAT;
    D3D12_META_COMMAND_PARAMETER_TYPE_UINT64                                      :: UINT64;
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS                         :: GPU_VIRTUAL_ADDRESS;
    D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV :: CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV;
    D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV :: GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV;
}

D3D12_META_COMMAND_PARAMETER_FLAGS :: enum_flags u32 {
    INPUT  :: 0x1;
    OUTPUT :: 0x2;

    D3D12_META_COMMAND_PARAMETER_FLAG_INPUT  :: INPUT;
    D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT :: OUTPUT;
}

D3D12_META_COMMAND_PARAMETER_STAGE :: enum s32 {
    CREATION       :: 0;
    INITIALIZATION :: 1;
    EXECUTION      :: 2;

    D3D12_META_COMMAND_PARAMETER_STAGE_CREATION       :: CREATION;
    D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION :: INITIALIZATION;
    D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION      :: EXECUTION;
}

D3D12_META_COMMAND_PARAMETER_DESC :: struct {
    Name:                  *s16;
    Type:                  D3D12_META_COMMAND_PARAMETER_TYPE;
    Flags:                 D3D12_META_COMMAND_PARAMETER_FLAGS;
    RequiredResourceState: D3D12_RESOURCE_STATES;
    StructureOffset:       u32;
}

D3D12_GRAPHICS_STATES :: enum s32 {
    NONE                    :: 0;
    IA_VERTEX_BUFFERS       :: 1;
    IA_INDEX_BUFFER         :: 2;
    IA_PRIMITIVE_TOPOLOGY   :: 4;
    DESCRIPTOR_HEAP         :: 8;
    GRAPHICS_ROOT_SIGNATURE :: 16;
    COMPUTE_ROOT_SIGNATURE  :: 32;
    RS_VIEWPORTS            :: 64;
    RS_SCISSOR_RECTS        :: 128;
    PREDICATION             :: 256;
    OM_RENDER_TARGETS       :: 512;
    OM_STENCIL_REF          :: 1024;
    OM_BLEND_FACTOR         :: 2048;
    PIPELINE_STATE          :: 4096;
    SO_TARGETS              :: 8192;
    OM_DEPTH_BOUNDS         :: 16384;
    SAMPLE_POSITIONS        :: 32768;
    VIEW_INSTANCE_MASK      :: 65536;

    D3D12_GRAPHICS_STATE_NONE                    :: NONE;
    D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS       :: IA_VERTEX_BUFFERS;
    D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER         :: IA_INDEX_BUFFER;
    D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY   :: IA_PRIMITIVE_TOPOLOGY;
    D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP         :: DESCRIPTOR_HEAP;
    D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE :: GRAPHICS_ROOT_SIGNATURE;
    D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE  :: COMPUTE_ROOT_SIGNATURE;
    D3D12_GRAPHICS_STATE_RS_VIEWPORTS            :: RS_VIEWPORTS;
    D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS        :: RS_SCISSOR_RECTS;
    D3D12_GRAPHICS_STATE_PREDICATION             :: PREDICATION;
    D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS       :: OM_RENDER_TARGETS;
    D3D12_GRAPHICS_STATE_OM_STENCIL_REF          :: OM_STENCIL_REF;
    D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR         :: OM_BLEND_FACTOR;
    D3D12_GRAPHICS_STATE_PIPELINE_STATE          :: PIPELINE_STATE;
    D3D12_GRAPHICS_STATE_SO_TARGETS              :: SO_TARGETS;
    D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS         :: OM_DEPTH_BOUNDS;
    D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS        :: SAMPLE_POSITIONS;
    D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK      :: VIEW_INSTANCE_MASK;
}

D3D12_META_COMMAND_DESC :: struct {
    Id:                       GUID;
    Name:                     *s16;
    InitializationDirtyState: D3D12_GRAPHICS_STATES;
    ExecutionDirtyState:      D3D12_GRAPHICS_STATES;
}


ID3D12StateObject_UUID :: "47016943-fca8-4594-93ea-af258b55346d";
ID3D12StateObject :: struct {
    #as using id3d12pageable: ID3D12Pageable;
}


ID3D12StateObjectProperties_UUID :: "de5fa827-9bf9-4f26-89ff-d7f56fde3860";
ID3D12StateObjectProperties :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12stateobjectproperties_vtable: *ID3D12StateObjectProperties_VTable;
}
ID3D12StateObjectProperties_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetShaderIdentifier: (this: *ID3D12StateObjectProperties, pExportName: *s16) -> *void #cpp_method;
    GetShaderStackSize: (this: *ID3D12StateObjectProperties, pExportName: *s16) -> u64 #cpp_method;
    GetPipelineStackSize: (this: *ID3D12StateObjectProperties) -> u64 #cpp_method;
    SetPipelineStackSize: (this: *ID3D12StateObjectProperties, PipelineStackSizeInBytes: u64) -> void #cpp_method;
}
vtable :: (obj: *ID3D12StateObjectProperties) -> *ID3D12StateObjectProperties_VTable { return obj.id3d12stateobjectproperties_vtable; }


/* interface __MIDL_itf_d3d12_0000_0034 */
/* [local] */
D3D12_STATE_SUBOBJECT_TYPE :: enum s32 {
    STATE_OBJECT_CONFIG                   :: 0;
    GLOBAL_ROOT_SIGNATURE                 :: 1;
    LOCAL_ROOT_SIGNATURE                  :: 2;
    NODE_MASK                             :: 3;
    DXIL_LIBRARY                          :: 5;
    EXISTING_COLLECTION                   :: 6;
    SUBOBJECT_TO_EXPORTS_ASSOCIATION      :: 7;
    DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: 8;
    RAYTRACING_SHADER_CONFIG              :: 9;
    RAYTRACING_PIPELINE_CONFIG            :: 10;
    HIT_GROUP                             :: 11;
    RAYTRACING_PIPELINE_CONFIG1           :: 12;
    MAX_VALID                             :: 13;

    D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG                   :: STATE_OBJECT_CONFIG;
    D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE                 :: GLOBAL_ROOT_SIGNATURE;
    D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE                  :: LOCAL_ROOT_SIGNATURE;
    D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK                             :: NODE_MASK;
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY                          :: DXIL_LIBRARY;
    D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION                   :: EXISTING_COLLECTION;
    D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION      :: SUBOBJECT_TO_EXPORTS_ASSOCIATION;
    D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION;
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG              :: RAYTRACING_SHADER_CONFIG;
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG            :: RAYTRACING_PIPELINE_CONFIG;
    D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP                             :: HIT_GROUP;
    D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1           :: RAYTRACING_PIPELINE_CONFIG1;
    D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID                             :: MAX_VALID;
}

D3D12_STATE_SUBOBJECT :: struct {
    Type:  D3D12_STATE_SUBOBJECT_TYPE;
    pDesc: *void;
}

D3D12_STATE_OBJECT_FLAGS :: enum_flags u32 {
    NONE                                             :: 0x0;
    ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS :: 0x1;
    ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS :: 0x2;
    ALLOW_STATE_OBJECT_ADDITIONS                     :: 0x4;

    D3D12_STATE_OBJECT_FLAG_NONE                                             :: NONE;
    D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS :: ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS;
    D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS :: ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS;
    D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS                     :: ALLOW_STATE_OBJECT_ADDITIONS;
}

D3D12_STATE_OBJECT_CONFIG :: struct {
    Flags: D3D12_STATE_OBJECT_FLAGS;
}

D3D12_GLOBAL_ROOT_SIGNATURE :: struct {
    pGlobalRootSignature: *ID3D12RootSignature;
}

D3D12_LOCAL_ROOT_SIGNATURE :: struct {
    pLocalRootSignature: *ID3D12RootSignature;
}

D3D12_NODE_MASK :: struct {
    NodeMask: u32;
}

D3D12_EXPORT_FLAGS :: enum_flags u32 {
    D3D12_EXPORT_FLAG_NONE :: 0x0;
}

D3D12_EXPORT_DESC :: struct {
    Name:           *s16;
    ExportToRename: *s16;
    Flags:          D3D12_EXPORT_FLAGS;
}

D3D12_DXIL_LIBRARY_DESC :: struct {
    DXILLibrary: D3D12_SHADER_BYTECODE;
    NumExports:  u32;
    pExports:    *D3D12_EXPORT_DESC;
}

D3D12_EXISTING_COLLECTION_DESC :: struct {
    pExistingCollection: *ID3D12StateObject;
    NumExports:          u32;
    pExports:            *D3D12_EXPORT_DESC;
}

D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: struct {
    pSubobjectToAssociate: *D3D12_STATE_SUBOBJECT;
    NumExports:            u32;
    pExports:              **s16;
}

D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION :: struct {
    SubobjectToAssociate: *s16;
    NumExports:           u32;
    pExports:             **s16;
}

D3D12_HIT_GROUP_TYPE :: enum s32 {
    TRIANGLES            :: 0;
    PROCEDURAL_PRIMITIVE :: 1;

    D3D12_HIT_GROUP_TYPE_TRIANGLES            :: TRIANGLES;
    D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE :: PROCEDURAL_PRIMITIVE;
}

D3D12_HIT_GROUP_DESC :: struct {
    HitGroupExport:           *s16;
    Type:                     D3D12_HIT_GROUP_TYPE;
    AnyHitShaderImport:       *s16;
    ClosestHitShaderImport:   *s16;
    IntersectionShaderImport: *s16;
}

D3D12_RAYTRACING_SHADER_CONFIG :: struct {
    MaxPayloadSizeInBytes:   u32;
    MaxAttributeSizeInBytes: u32;
}

D3D12_RAYTRACING_PIPELINE_CONFIG :: struct {
    MaxTraceRecursionDepth: u32;
}

D3D12_RAYTRACING_PIPELINE_FLAGS :: enum_flags u32 {
    NONE                       :: 0x0;
    SKIP_TRIANGLES             :: 0x100;
    SKIP_PROCEDURAL_PRIMITIVES :: 0x200;

    D3D12_RAYTRACING_PIPELINE_FLAG_NONE                       :: NONE;
    D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES             :: SKIP_TRIANGLES;
    D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES :: SKIP_PROCEDURAL_PRIMITIVES;
}

D3D12_RAYTRACING_PIPELINE_CONFIG1 :: struct {
    MaxTraceRecursionDepth: u32;
    Flags:                  D3D12_RAYTRACING_PIPELINE_FLAGS;
}

D3D12_STATE_OBJECT_TYPE :: enum s32 {
    COLLECTION          :: 0;
    RAYTRACING_PIPELINE :: 3;

    D3D12_STATE_OBJECT_TYPE_COLLECTION          :: COLLECTION;
    D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE :: RAYTRACING_PIPELINE;
}

D3D12_STATE_OBJECT_DESC :: struct {
    Type:          D3D12_STATE_OBJECT_TYPE;
    NumSubobjects: u32;
    pSubobjects:   *D3D12_STATE_SUBOBJECT;
}

D3D12_RAYTRACING_GEOMETRY_FLAGS :: enum_flags u32 {
    NONE                           :: 0x0;
    OPAQUE                         :: 0x1;
    NO_DUPLICATE_ANYHIT_INVOCATION :: 0x2;

    D3D12_RAYTRACING_GEOMETRY_FLAG_NONE                           :: NONE;
    D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE                         :: OPAQUE;
    D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION :: NO_DUPLICATE_ANYHIT_INVOCATION;
}

D3D12_RAYTRACING_GEOMETRY_TYPE :: enum s32 {
    TRIANGLES                  :: 0;
    PROCEDURAL_PRIMITIVE_AABBS :: 1;

    D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES                  :: TRIANGLES;
    D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS :: PROCEDURAL_PRIMITIVE_AABBS;
}

D3D12_RAYTRACING_INSTANCE_FLAGS :: enum_flags u32 {
    NONE                            :: 0x0;
    TRIANGLE_CULL_DISABLE           :: 0x1;
    TRIANGLE_FRONT_COUNTERCLOCKWISE :: 0x2;
    FORCE_OPAQUE                    :: 0x4;
    FORCE_NON_OPAQUE                :: 0x8;

    D3D12_RAYTRACING_INSTANCE_FLAG_NONE                            :: NONE;
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE           :: TRIANGLE_CULL_DISABLE;
    D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE :: TRIANGLE_FRONT_COUNTERCLOCKWISE;
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE                    :: FORCE_OPAQUE;
    D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE                :: FORCE_NON_OPAQUE;
}

D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE :: struct {
    StartAddress:  D3D12_GPU_VIRTUAL_ADDRESS;
    StrideInBytes: u64;
}

D3D12_GPU_VIRTUAL_ADDRESS_RANGE :: struct {
    StartAddress: D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes:  u64;
}

D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE :: struct {
    StartAddress:  D3D12_GPU_VIRTUAL_ADDRESS;
    SizeInBytes:   u64;
    StrideInBytes: u64;
}

D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC :: struct {
    Transform3x4: D3D12_GPU_VIRTUAL_ADDRESS;
    IndexFormat:  DXGI_FORMAT;
    VertexFormat: DXGI_FORMAT;
    IndexCount:   u32;
    VertexCount:  u32;
    IndexBuffer:  D3D12_GPU_VIRTUAL_ADDRESS;
    VertexBuffer: D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE;
}

D3D12_RAYTRACING_AABB :: struct {
    MinX: float;
    MinY: float;
    MinZ: float;
    MaxX: float;
    MaxY: float;
    MaxZ: float;
}

D3D12_RAYTRACING_GEOMETRY_AABBS_DESC :: struct {
    AABBCount: u64;
    AABBs:     D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS :: enum_flags u32 {
    NONE              :: 0x0;
    ALLOW_UPDATE      :: 0x1;
    ALLOW_COMPACTION  :: 0x2;
    PREFER_FAST_TRACE :: 0x4;
    PREFER_FAST_BUILD :: 0x8;
    MINIMIZE_MEMORY   :: 0x10;
    PERFORM_UPDATE    :: 0x20;

    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE              :: NONE;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE      :: ALLOW_UPDATE;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION  :: ALLOW_COMPACTION;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE :: PREFER_FAST_TRACE;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD :: PREFER_FAST_BUILD;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY   :: MINIMIZE_MEMORY;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE    :: PERFORM_UPDATE;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE :: enum s32 {
    CLONE                          :: 0;
    COMPACT                        :: 1;
    VISUALIZATION_DECODE_FOR_TOOLS :: 2;
    SERIALIZE                      :: 3;
    DESERIALIZE                    :: 4;

    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE                          :: CLONE;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT                        :: COMPACT;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS :: VISUALIZATION_DECODE_FOR_TOOLS;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE                      :: SERIALIZE;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE                    :: DESERIALIZE;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE :: enum s32 {
    TOP_LEVEL    :: 0;
    BOTTOM_LEVEL :: 1;

    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL    :: TOP_LEVEL;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL :: BOTTOM_LEVEL;
}

D3D12_ELEMENTS_LAYOUT :: enum s32 {
    ARRAY             :: 0;
    ARRAY_OF_POINTERS :: 1;

    D3D12_ELEMENTS_LAYOUT_ARRAY             :: ARRAY;
    D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS :: ARRAY_OF_POINTERS;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE :: enum s32 {
    COMPACTED_SIZE      :: 0;
    TOOLS_VISUALIZATION :: 1;
    SERIALIZATION       :: 2;
    CURRENT_SIZE        :: 3;

    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE      :: COMPACTED_SIZE;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION :: TOOLS_VISUALIZATION;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION       :: SERIALIZATION;
    D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE        :: CURRENT_SIZE;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC :: struct {
    DestBuffer: D3D12_GPU_VIRTUAL_ADDRESS;
    InfoType:   D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC :: struct {
    CompactedSizeInBytes: u64;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC :: struct {
    DecodedSizeInBytes: u64;
}

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER :: struct {
    Type:     D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
    NumDescs: u32;
}

// Regarding D3D12_BUILD_RAY_TRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER above,
// depending on Type field, NumDescs above is followed by either:
//       D3D12_RAY_TRACING_INSTANCE_DESC InstanceDescs[NumDescs]
//    or D3D12_RAY_TRACING_GEOMETRY_DESC GeometryDescs[NumDescs].
// There is 4 bytes of padding between GeometryDesc structs in the array so alignment is natural when viewed by CPU.
D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC :: struct {
    SerializedSizeInBytes:                       u64;
    NumBottomLevelAccelerationStructurePointers: u64;
}

D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER :: struct {
    DriverOpaqueGUID:           GUID;
    DriverOpaqueVersioningData: [16] u8;
}

D3D12_SERIALIZED_DATA_TYPE :: enum s32 {
    D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE :: 0;
}

D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS :: enum s32 {
    COMPATIBLE_WITH_DEVICE :: 0;
    UNSUPPORTED_TYPE       :: 1;
    UNRECOGNIZED           :: 2;
    INCOMPATIBLE_VERSION   :: 3;
    INCOMPATIBLE_TYPE      :: 4;

    D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE :: COMPATIBLE_WITH_DEVICE;
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE       :: UNSUPPORTED_TYPE;
    D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED           :: UNRECOGNIZED;
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION   :: INCOMPATIBLE_VERSION;
    D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE      :: INCOMPATIBLE_TYPE;
}

D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER :: struct {
    DriverMatchingIdentifier:                               D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER;
    SerializedSizeInBytesIncludingHeader:                   u64;
    DeserializedSizeInBytes:                                u64;
    NumBottomLevelAccelerationStructurePointersAfterHeader: u64;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC :: struct {
    CurrentSizeInBytes: u64;
}

D3D12_RAYTRACING_INSTANCE_DESC :: struct {
    Transform:                           [3] [4] float;
    InstanceID:                          u32;
    #place InstanceID; /*bitfield 24*/ InstanceMask:                        u32;
    InstanceContributionToHitGroupIndex: u32;
    #place InstanceContributionToHitGroupIndex; /*bitfield 24*/ Flags:                               u32;
    AccelerationStructure:               D3D12_GPU_VIRTUAL_ADDRESS;
}

D3D12_RAYTRACING_GEOMETRY_DESC :: struct {
    Type:  D3D12_RAYTRACING_GEOMETRY_TYPE;
    Flags: D3D12_RAYTRACING_GEOMETRY_FLAGS;
    union {
        Triangles: D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC;
        AABBs:     D3D12_RAYTRACING_GEOMETRY_AABBS_DESC;
    }
}

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS :: struct {
    Type:        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE;
    Flags:       D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS;
    NumDescs:    u32;
    DescsLayout: D3D12_ELEMENTS_LAYOUT;
    union {
        InstanceDescs:   D3D12_GPU_VIRTUAL_ADDRESS;
        pGeometryDescs:  *D3D12_RAYTRACING_GEOMETRY_DESC;
        ppGeometryDescs: **D3D12_RAYTRACING_GEOMETRY_DESC;
    }
}

D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC :: struct {
    DestAccelerationStructureData:    D3D12_GPU_VIRTUAL_ADDRESS;
    Inputs:                           D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS;
    SourceAccelerationStructureData:  D3D12_GPU_VIRTUAL_ADDRESS;
    ScratchAccelerationStructureData: D3D12_GPU_VIRTUAL_ADDRESS;
}

D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO :: struct {
    ResultDataMaxSizeInBytes:     u64;
    ScratchDataSizeInBytes:       u64;
    UpdateScratchDataSizeInBytes: u64;
}

D3D12_RAY_FLAGS :: enum_flags u32 {
    NONE                            :: 0x0;
    FORCE_OPAQUE                    :: 0x1;
    FORCE_NON_OPAQUE                :: 0x2;
    ACCEPT_FIRST_HIT_AND_END_SEARCH :: 0x4;
    SKIP_CLOSEST_HIT_SHADER         :: 0x8;
    CULL_BACK_FACING_TRIANGLES      :: 0x10;
    CULL_FRONT_FACING_TRIANGLES     :: 0x20;
    CULL_OPAQUE                     :: 0x40;
    CULL_NON_OPAQUE                 :: 0x80;
    SKIP_TRIANGLES                  :: 0x100;
    SKIP_PROCEDURAL_PRIMITIVES      :: 0x200;

    D3D12_RAY_FLAG_NONE                            :: NONE;
    D3D12_RAY_FLAG_FORCE_OPAQUE                    :: FORCE_OPAQUE;
    D3D12_RAY_FLAG_FORCE_NON_OPAQUE                :: FORCE_NON_OPAQUE;
    D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH :: ACCEPT_FIRST_HIT_AND_END_SEARCH;
    D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER         :: SKIP_CLOSEST_HIT_SHADER;
    D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES      :: CULL_BACK_FACING_TRIANGLES;
    D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES     :: CULL_FRONT_FACING_TRIANGLES;
    D3D12_RAY_FLAG_CULL_OPAQUE                     :: CULL_OPAQUE;
    D3D12_RAY_FLAG_CULL_NON_OPAQUE                 :: CULL_NON_OPAQUE;
    D3D12_RAY_FLAG_SKIP_TRIANGLES                  :: SKIP_TRIANGLES;
    D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES      :: SKIP_PROCEDURAL_PRIMITIVES;
}

D3D12_HIT_KIND :: enum s32 {
    TRIANGLE_FRONT_FACE :: 254;
    TRIANGLE_BACK_FACE  :: 255;

    D3D12_HIT_KIND_TRIANGLE_FRONT_FACE :: TRIANGLE_FRONT_FACE;
    D3D12_HIT_KIND_TRIANGLE_BACK_FACE  :: TRIANGLE_BACK_FACE;
}


ID3D12Device5_UUID :: "8b4f173b-2fea-4b80-8f58-4307191ab95d";
ID3D12Device5 :: struct {
    #as using id3d12device4: ID3D12Device4;
    #place id3d12device4; id3d12device5_vtable: *ID3D12Device5_VTable;
}
ID3D12Device5_VTable :: struct #type_info_none {
    using id3d12device4: ID3D12Device4_VTable;
    CreateLifetimeTracker: (this: *ID3D12Device5, pOwner: *ID3D12LifetimeOwner, riid: *IID, ppvTracker: **void) -> HRESULT #cpp_method;
    RemoveDevice: (this: *ID3D12Device5) -> void #cpp_method;
    EnumerateMetaCommands: (this: *ID3D12Device5, pNumMetaCommands: *u32, pDescs: *D3D12_META_COMMAND_DESC) -> HRESULT #cpp_method;
    EnumerateMetaCommandParameters: (this: *ID3D12Device5, CommandId: *GUID, Stage: D3D12_META_COMMAND_PARAMETER_STAGE, pTotalStructureSizeInBytes: *u32, pParameterCount: *u32, pParameterDescs: *D3D12_META_COMMAND_PARAMETER_DESC) -> HRESULT #cpp_method;
    CreateMetaCommand: (this: *ID3D12Device5, CommandId: *GUID, NodeMask: u32, pCreationParametersData: *void, CreationParametersDataSizeInBytes: SIZE_T, riid: *IID, ppMetaCommand: **void) -> HRESULT #cpp_method;
    CreateStateObject: (this: *ID3D12Device5, pDesc: *D3D12_STATE_OBJECT_DESC, riid: *IID, ppStateObject: **void) -> HRESULT #cpp_method;
    GetRaytracingAccelerationStructurePrebuildInfo: (this: *ID3D12Device5, pDesc: *D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS, pInfo: *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO) -> void #cpp_method;
    CheckDriverMatchingIdentifier: (this: *ID3D12Device5, SerializedDataType: D3D12_SERIALIZED_DATA_TYPE, pIdentifierToCheck: *D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER) -> D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS #cpp_method;
}
vtable :: (obj: *ID3D12Device5) -> *ID3D12Device5_VTable { return obj.id3d12device5_vtable; }


/* interface __MIDL_itf_d3d12_0000_0035 */
/* [local] */
D3D12_AUTO_BREADCRUMB_OP :: enum s32 {
    SETMARKER                                        :: 0;
    BEGINEVENT                                       :: 1;
    ENDEVENT                                         :: 2;
    DRAWINSTANCED                                    :: 3;
    DRAWINDEXEDINSTANCED                             :: 4;
    EXECUTEINDIRECT                                  :: 5;
    DISPATCH                                         :: 6;
    COPYBUFFERREGION                                 :: 7;
    COPYTEXTUREREGION                                :: 8;
    COPYRESOURCE                                     :: 9;
    COPYTILES                                        :: 10;
    RESOLVESUBRESOURCE                               :: 11;
    CLEARRENDERTARGETVIEW                            :: 12;
    CLEARUNORDEREDACCESSVIEW                         :: 13;
    CLEARDEPTHSTENCILVIEW                            :: 14;
    RESOURCEBARRIER                                  :: 15;
    EXECUTEBUNDLE                                    :: 16;
    PRESENT                                          :: 17;
    RESOLVEQUERYDATA                                 :: 18;
    BEGINSUBMISSION                                  :: 19;
    ENDSUBMISSION                                    :: 20;
    DECODEFRAME                                      :: 21;
    PROCESSFRAMES                                    :: 22;
    ATOMICCOPYBUFFERUINT                             :: 23;
    ATOMICCOPYBUFFERUINT64                           :: 24;
    RESOLVESUBRESOURCEREGION                         :: 25;
    WRITEBUFFERIMMEDIATE                             :: 26;
    DECODEFRAME1                                     :: 27;
    SETPROTECTEDRESOURCESESSION                      :: 28;
    DECODEFRAME2                                     :: 29;
    PROCESSFRAMES1                                   :: 30;
    BUILDRAYTRACINGACCELERATIONSTRUCTURE             :: 31;
    EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO :: 32;
    COPYRAYTRACINGACCELERATIONSTRUCTURE              :: 33;
    DISPATCHRAYS                                     :: 34;
    INITIALIZEMETACOMMAND                            :: 35;
    EXECUTEMETACOMMAND                               :: 36;
    ESTIMATEMOTION                                   :: 37;
    RESOLVEMOTIONVECTORHEAP                          :: 38;
    SETPIPELINESTATE1                                :: 39;
    INITIALIZEEXTENSIONCOMMAND                       :: 40;
    EXECUTEEXTENSIONCOMMAND                          :: 41;
    DISPATCHMESH                                     :: 42;
    ENCODEFRAME                                      :: 43;
    RESOLVEENCODEROUTPUTMETADATA                     :: 44;

    D3D12_AUTO_BREADCRUMB_OP_SETMARKER                                        :: SETMARKER;
    D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT                                       :: BEGINEVENT;
    D3D12_AUTO_BREADCRUMB_OP_ENDEVENT                                         :: ENDEVENT;
    D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED                                    :: DRAWINSTANCED;
    D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED                             :: DRAWINDEXEDINSTANCED;
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT                                  :: EXECUTEINDIRECT;
    D3D12_AUTO_BREADCRUMB_OP_DISPATCH                                         :: DISPATCH;
    D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION                                 :: COPYBUFFERREGION;
    D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION                                :: COPYTEXTUREREGION;
    D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE                                     :: COPYRESOURCE;
    D3D12_AUTO_BREADCRUMB_OP_COPYTILES                                        :: COPYTILES;
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE                               :: RESOLVESUBRESOURCE;
    D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW                            :: CLEARRENDERTARGETVIEW;
    D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW                         :: CLEARUNORDEREDACCESSVIEW;
    D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW                            :: CLEARDEPTHSTENCILVIEW;
    D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER                                  :: RESOURCEBARRIER;
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE                                    :: EXECUTEBUNDLE;
    D3D12_AUTO_BREADCRUMB_OP_PRESENT                                          :: PRESENT;
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA                                 :: RESOLVEQUERYDATA;
    D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION                                  :: BEGINSUBMISSION;
    D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION                                    :: ENDSUBMISSION;
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME                                      :: DECODEFRAME;
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES                                    :: PROCESSFRAMES;
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT                             :: ATOMICCOPYBUFFERUINT;
    D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64                           :: ATOMICCOPYBUFFERUINT64;
    D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION                         :: RESOLVESUBRESOURCEREGION;
    D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE                             :: WRITEBUFFERIMMEDIATE;
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1                                     :: DECODEFRAME1;
    D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION                      :: SETPROTECTEDRESOURCESESSION;
    D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2                                     :: DECODEFRAME2;
    D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1                                   :: PROCESSFRAMES1;
    D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE             :: BUILDRAYTRACINGACCELERATIONSTRUCTURE;
    D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO :: EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO;
    D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE              :: COPYRAYTRACINGACCELERATIONSTRUCTURE;
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS                                     :: DISPATCHRAYS;
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND                            :: INITIALIZEMETACOMMAND;
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND                               :: EXECUTEMETACOMMAND;
    D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION                                   :: ESTIMATEMOTION;
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP                          :: RESOLVEMOTIONVECTORHEAP;
    D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1                                :: SETPIPELINESTATE1;
    D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND                       :: INITIALIZEEXTENSIONCOMMAND;
    D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND                          :: EXECUTEEXTENSIONCOMMAND;
    D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH                                     :: DISPATCHMESH;
    D3D12_AUTO_BREADCRUMB_OP_ENCODEFRAME                                      :: ENCODEFRAME;
    D3D12_AUTO_BREADCRUMB_OP_RESOLVEENCODEROUTPUTMETADATA                     :: RESOLVEENCODEROUTPUTMETADATA;
}

D3D12_AUTO_BREADCRUMB_NODE :: struct {
    pCommandListDebugNameA:  *u8;
    pCommandListDebugNameW:  *s16;
    pCommandQueueDebugNameA: *u8;
    pCommandQueueDebugNameW: *s16;
    pCommandList:            *ID3D12GraphicsCommandList;
    pCommandQueue:           *ID3D12CommandQueue;
    BreadcrumbCount:         u32;
    pLastBreadcrumbValue:    *u32;
    pCommandHistory:         *D3D12_AUTO_BREADCRUMB_OP;
    pNext:                   *D3D12_AUTO_BREADCRUMB_NODE;
}

D3D12_DRED_BREADCRUMB_CONTEXT :: struct {
    BreadcrumbIndex: u32;
    pContextString:  *s16;
}

D3D12_AUTO_BREADCRUMB_NODE1 :: struct {
    pCommandListDebugNameA:  *u8;
    pCommandListDebugNameW:  *s16;
    pCommandQueueDebugNameA: *u8;
    pCommandQueueDebugNameW: *s16;
    pCommandList:            *ID3D12GraphicsCommandList;
    pCommandQueue:           *ID3D12CommandQueue;
    BreadcrumbCount:         u32;
    pLastBreadcrumbValue:    *u32;
    pCommandHistory:         *D3D12_AUTO_BREADCRUMB_OP;
    pNext:                   *D3D12_AUTO_BREADCRUMB_NODE1;
    BreadcrumbContextsCount: u32;
    pBreadcrumbContexts:     *D3D12_DRED_BREADCRUMB_CONTEXT;
}

D3D12_DRED_VERSION :: enum s32 {
    _1_0 :: 1;
    _1_1 :: 2;
    _1_2 :: 3;
    _1_3 :: 4;

    D3D12_DRED_VERSION_1_0 :: _1_0;
    D3D12_DRED_VERSION_1_1 :: _1_1;
    D3D12_DRED_VERSION_1_2 :: _1_2;
    D3D12_DRED_VERSION_1_3 :: _1_3;
}

D3D12_DRED_FLAGS :: enum_flags u32 {
    NONE                    :: 0x0;
    FORCE_ENABLE            :: 0x1;
    DISABLE_AUTOBREADCRUMBS :: 0x2;

    D3D12_DRED_FLAG_NONE                    :: NONE;
    D3D12_DRED_FLAG_FORCE_ENABLE            :: FORCE_ENABLE;
    D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS :: DISABLE_AUTOBREADCRUMBS;
}

D3D12_DRED_ENABLEMENT :: enum s32 {
    SYSTEM_CONTROLLED :: 0;
    FORCED_OFF        :: 1;
    FORCED_ON         :: 2;

    D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED :: SYSTEM_CONTROLLED;
    D3D12_DRED_ENABLEMENT_FORCED_OFF        :: FORCED_OFF;
    D3D12_DRED_ENABLEMENT_FORCED_ON         :: FORCED_ON;
}

D3D12_DEVICE_REMOVED_EXTENDED_DATA :: struct {
    Flags:                   D3D12_DRED_FLAGS;
    pHeadAutoBreadcrumbNode: *D3D12_AUTO_BREADCRUMB_NODE;
}

D3D12_DRED_ALLOCATION_TYPE :: enum s32 {
    COMMAND_QUEUE            :: 19;
    COMMAND_ALLOCATOR        :: 20;
    PIPELINE_STATE           :: 21;
    COMMAND_LIST             :: 22;
    FENCE                    :: 23;
    DESCRIPTOR_HEAP          :: 24;
    HEAP                     :: 25;
    QUERY_HEAP               :: 27;
    COMMAND_SIGNATURE        :: 28;
    PIPELINE_LIBRARY         :: 29;
    VIDEO_DECODER            :: 30;
    VIDEO_PROCESSOR          :: 32;
    RESOURCE                 :: 34;
    PASS                     :: 35;
    CRYPTOSESSION            :: 36;
    CRYPTOSESSIONPOLICY      :: 37;
    PROTECTEDRESOURCESESSION :: 38;
    VIDEO_DECODER_HEAP       :: 39;
    COMMAND_POOL             :: 40;
    COMMAND_RECORDER         :: 41;
    STATE_OBJECT             :: 42;
    METACOMMAND              :: 43;
    SCHEDULINGGROUP          :: 44;
    VIDEO_MOTION_ESTIMATOR   :: 45;
    VIDEO_MOTION_VECTOR_HEAP :: 46;
    VIDEO_EXTENSION_COMMAND  :: 47;
    VIDEO_ENCODER            :: 48;
    VIDEO_ENCODER_HEAP       :: 49;
    INVALID                  :: -1;

    D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE            :: COMMAND_QUEUE;
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR        :: COMMAND_ALLOCATOR;
    D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE           :: PIPELINE_STATE;
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST             :: COMMAND_LIST;
    D3D12_DRED_ALLOCATION_TYPE_FENCE                    :: FENCE;
    D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP          :: DESCRIPTOR_HEAP;
    D3D12_DRED_ALLOCATION_TYPE_HEAP                     :: HEAP;
    D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP               :: QUERY_HEAP;
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE        :: COMMAND_SIGNATURE;
    D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY         :: PIPELINE_LIBRARY;
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER            :: VIDEO_DECODER;
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR          :: VIDEO_PROCESSOR;
    D3D12_DRED_ALLOCATION_TYPE_RESOURCE                 :: RESOURCE;
    D3D12_DRED_ALLOCATION_TYPE_PASS                     :: PASS;
    D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION            :: CRYPTOSESSION;
    D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY      :: CRYPTOSESSIONPOLICY;
    D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION :: PROTECTEDRESOURCESESSION;
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP       :: VIDEO_DECODER_HEAP;
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL             :: COMMAND_POOL;
    D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER         :: COMMAND_RECORDER;
    D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT             :: STATE_OBJECT;
    D3D12_DRED_ALLOCATION_TYPE_METACOMMAND              :: METACOMMAND;
    D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP          :: SCHEDULINGGROUP;
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR   :: VIDEO_MOTION_ESTIMATOR;
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP :: VIDEO_MOTION_VECTOR_HEAP;
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND  :: VIDEO_EXTENSION_COMMAND;
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER            :: VIDEO_ENCODER;
    D3D12_DRED_ALLOCATION_TYPE_VIDEO_ENCODER_HEAP       :: VIDEO_ENCODER_HEAP;
    D3D12_DRED_ALLOCATION_TYPE_INVALID                  :: INVALID;
}

D3D12_DRED_ALLOCATION_NODE :: struct {
    ObjectNameA:    *u8;
    ObjectNameW:    *s16;
    AllocationType: D3D12_DRED_ALLOCATION_TYPE;
    pNext:          *D3D12_DRED_ALLOCATION_NODE;
}

D3D12_DRED_ALLOCATION_NODE1 :: struct {
    ObjectNameA:    *u8;
    ObjectNameW:    *s16;
    AllocationType: D3D12_DRED_ALLOCATION_TYPE;
    pNext:          *D3D12_DRED_ALLOCATION_NODE1;
    pObject:        *IUnknown;
}

D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT :: struct {
    pHeadAutoBreadcrumbNode: *D3D12_AUTO_BREADCRUMB_NODE;
}

D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 :: struct {
    pHeadAutoBreadcrumbNode: *D3D12_AUTO_BREADCRUMB_NODE1;
}

D3D12_DRED_PAGE_FAULT_OUTPUT :: struct {
    PageFaultVA:                    D3D12_GPU_VIRTUAL_ADDRESS;
    pHeadExistingAllocationNode:    *D3D12_DRED_ALLOCATION_NODE;
    pHeadRecentFreedAllocationNode: *D3D12_DRED_ALLOCATION_NODE;
}

D3D12_DRED_PAGE_FAULT_OUTPUT1 :: struct {
    PageFaultVA:                    D3D12_GPU_VIRTUAL_ADDRESS;
    pHeadExistingAllocationNode:    *D3D12_DRED_ALLOCATION_NODE1;
    pHeadRecentFreedAllocationNode: *D3D12_DRED_ALLOCATION_NODE1;
}

D3D12_DRED_PAGE_FAULT_FLAGS :: enum_flags u32 {
    NONE :: 0x0;
    D3D12_DRED_PAGE_FAULT_FLAGS_NONE :: NONE;
}

D3D12_DRED_DEVICE_STATE :: enum s32 {
    UNKNOWN   :: 0;
    HUNG      :: 3;
    FAULT     :: 6;
    PAGEFAULT :: 7;

    D3D12_DRED_DEVICE_STATE_UNKNOWN   :: UNKNOWN;
    D3D12_DRED_DEVICE_STATE_HUNG      :: HUNG;
    D3D12_DRED_DEVICE_STATE_FAULT     :: FAULT;
    D3D12_DRED_DEVICE_STATE_PAGEFAULT :: PAGEFAULT;
}

D3D12_DRED_PAGE_FAULT_OUTPUT2 :: struct {
    PageFaultVA:                    D3D12_GPU_VIRTUAL_ADDRESS;
    pHeadExistingAllocationNode:    *D3D12_DRED_ALLOCATION_NODE1;
    pHeadRecentFreedAllocationNode: *D3D12_DRED_ALLOCATION_NODE1;
    PageFaultFlags:                 D3D12_DRED_PAGE_FAULT_FLAGS;
}

D3D12_DEVICE_REMOVED_EXTENDED_DATA1 :: struct {
    DeviceRemovedReason:   HRESULT;
    AutoBreadcrumbsOutput: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT;
    PageFaultOutput:       D3D12_DRED_PAGE_FAULT_OUTPUT;
}

D3D12_DEVICE_REMOVED_EXTENDED_DATA2 :: struct {
    DeviceRemovedReason:   HRESULT;
    AutoBreadcrumbsOutput: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1;
    PageFaultOutput:       D3D12_DRED_PAGE_FAULT_OUTPUT1;
}

D3D12_DEVICE_REMOVED_EXTENDED_DATA3 :: struct {
    DeviceRemovedReason:   HRESULT;
    AutoBreadcrumbsOutput: D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1;
    PageFaultOutput:       D3D12_DRED_PAGE_FAULT_OUTPUT2;
    DeviceState:           D3D12_DRED_DEVICE_STATE;
}

D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA :: struct {
    Version: D3D12_DRED_VERSION;
    union {
        Dred_1_0: D3D12_DEVICE_REMOVED_EXTENDED_DATA;
        Dred_1_1: D3D12_DEVICE_REMOVED_EXTENDED_DATA1;
        Dred_1_2: D3D12_DEVICE_REMOVED_EXTENDED_DATA2;
        Dred_1_3: D3D12_DEVICE_REMOVED_EXTENDED_DATA3;
    }
}


ID3D12DeviceRemovedExtendedDataSettings_UUID :: "82BC481C-6B9B-4030-AEDB-7EE3D1DF1E63";
ID3D12DeviceRemovedExtendedDataSettings :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12deviceremovedextendeddatasettings_vtable: *ID3D12DeviceRemovedExtendedDataSettings_VTable;
}
ID3D12DeviceRemovedExtendedDataSettings_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    SetAutoBreadcrumbsEnablement: (this: *ID3D12DeviceRemovedExtendedDataSettings, Enablement: D3D12_DRED_ENABLEMENT) -> void #cpp_method;
    SetPageFaultEnablement: (this: *ID3D12DeviceRemovedExtendedDataSettings, Enablement: D3D12_DRED_ENABLEMENT) -> void #cpp_method;
    SetWatsonDumpEnablement: (this: *ID3D12DeviceRemovedExtendedDataSettings, Enablement: D3D12_DRED_ENABLEMENT) -> void #cpp_method;
}
vtable :: (obj: *ID3D12DeviceRemovedExtendedDataSettings) -> *ID3D12DeviceRemovedExtendedDataSettings_VTable { return obj.id3d12deviceremovedextendeddatasettings_vtable; }



ID3D12DeviceRemovedExtendedDataSettings1_UUID :: "DBD5AE51-3317-4F0A-ADF9-1D7CEDCAAE0B";
ID3D12DeviceRemovedExtendedDataSettings1 :: struct {
    #as using id3d12deviceremovedextendeddatasettings: ID3D12DeviceRemovedExtendedDataSettings;
    #place id3d12deviceremovedextendeddatasettings; id3d12deviceremovedextendeddatasettings1_vtable: *ID3D12DeviceRemovedExtendedDataSettings1_VTable;
}
ID3D12DeviceRemovedExtendedDataSettings1_VTable :: struct #type_info_none {
    using id3d12deviceremovedextendeddatasettings: ID3D12DeviceRemovedExtendedDataSettings_VTable;
    SetBreadcrumbContextEnablement: (this: *ID3D12DeviceRemovedExtendedDataSettings1, Enablement: D3D12_DRED_ENABLEMENT) -> void #cpp_method;
}
vtable :: (obj: *ID3D12DeviceRemovedExtendedDataSettings1) -> *ID3D12DeviceRemovedExtendedDataSettings1_VTable { return obj.id3d12deviceremovedextendeddatasettings1_vtable; }



ID3D12DeviceRemovedExtendedDataSettings2_UUID :: "61552388-01ab-4008-a436-83db189566ea";
ID3D12DeviceRemovedExtendedDataSettings2 :: struct {
    #as using id3d12deviceremovedextendeddatasettings1: ID3D12DeviceRemovedExtendedDataSettings1;
    #place id3d12deviceremovedextendeddatasettings1; id3d12deviceremovedextendeddatasettings2_vtable: *ID3D12DeviceRemovedExtendedDataSettings2_VTable;
}
ID3D12DeviceRemovedExtendedDataSettings2_VTable :: struct #type_info_none {
    using id3d12deviceremovedextendeddatasettings1: ID3D12DeviceRemovedExtendedDataSettings1_VTable;
    UseMarkersOnlyAutoBreadcrumbs: (this: *ID3D12DeviceRemovedExtendedDataSettings2, MarkersOnly: BOOL) -> void #cpp_method;
}
vtable :: (obj: *ID3D12DeviceRemovedExtendedDataSettings2) -> *ID3D12DeviceRemovedExtendedDataSettings2_VTable { return obj.id3d12deviceremovedextendeddatasettings2_vtable; }



ID3D12DeviceRemovedExtendedData_UUID :: "98931D33-5AE8-4791-AA3C-1A73A2934E71";
ID3D12DeviceRemovedExtendedData :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12deviceremovedextendeddata_vtable: *ID3D12DeviceRemovedExtendedData_VTable;
}
ID3D12DeviceRemovedExtendedData_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetAutoBreadcrumbsOutput: (this: *ID3D12DeviceRemovedExtendedData, pOutput: *D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT) -> HRESULT #cpp_method;
    GetPageFaultAllocationOutput: (this: *ID3D12DeviceRemovedExtendedData, pOutput: *D3D12_DRED_PAGE_FAULT_OUTPUT) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12DeviceRemovedExtendedData) -> *ID3D12DeviceRemovedExtendedData_VTable { return obj.id3d12deviceremovedextendeddata_vtable; }



ID3D12DeviceRemovedExtendedData1_UUID :: "9727A022-CF1D-4DDA-9EBA-EFFA653FC506";
ID3D12DeviceRemovedExtendedData1 :: struct {
    #as using id3d12deviceremovedextendeddata: ID3D12DeviceRemovedExtendedData;
    #place id3d12deviceremovedextendeddata; id3d12deviceremovedextendeddata1_vtable: *ID3D12DeviceRemovedExtendedData1_VTable;
}
ID3D12DeviceRemovedExtendedData1_VTable :: struct #type_info_none {
    using id3d12deviceremovedextendeddata: ID3D12DeviceRemovedExtendedData_VTable;
    GetAutoBreadcrumbsOutput1: (this: *ID3D12DeviceRemovedExtendedData1, pOutput: *D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1) -> HRESULT #cpp_method;
    GetPageFaultAllocationOutput1: (this: *ID3D12DeviceRemovedExtendedData1, pOutput: *D3D12_DRED_PAGE_FAULT_OUTPUT1) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12DeviceRemovedExtendedData1) -> *ID3D12DeviceRemovedExtendedData1_VTable { return obj.id3d12deviceremovedextendeddata1_vtable; }



ID3D12DeviceRemovedExtendedData2_UUID :: "67FC5816-E4CA-4915-BF18-42541272DA54";
ID3D12DeviceRemovedExtendedData2 :: struct {
    #as using id3d12deviceremovedextendeddata1: ID3D12DeviceRemovedExtendedData1;
    #place id3d12deviceremovedextendeddata1; id3d12deviceremovedextendeddata2_vtable: *ID3D12DeviceRemovedExtendedData2_VTable;
}
ID3D12DeviceRemovedExtendedData2_VTable :: struct #type_info_none {
    using id3d12deviceremovedextendeddata1: ID3D12DeviceRemovedExtendedData1_VTable;
    GetPageFaultAllocationOutput2: (this: *ID3D12DeviceRemovedExtendedData2, pOutput: *D3D12_DRED_PAGE_FAULT_OUTPUT2) -> HRESULT #cpp_method;
    GetDeviceState: (this: *ID3D12DeviceRemovedExtendedData2) -> D3D12_DRED_DEVICE_STATE #cpp_method;
}
vtable :: (obj: *ID3D12DeviceRemovedExtendedData2) -> *ID3D12DeviceRemovedExtendedData2_VTable { return obj.id3d12deviceremovedextendeddata2_vtable; }


/* interface __MIDL_itf_d3d12_0000_0041 */
/* [local] */
D3D12_BACKGROUND_PROCESSING_MODE :: enum s32 {
    ALLOWED                      :: 0;
    ALLOW_INTRUSIVE_MEASUREMENTS :: 1;
    DISABLE_BACKGROUND_WORK      :: 2;
    DISABLE_PROFILING_BY_SYSTEM  :: 3;

    D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED                      :: ALLOWED;
    D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS :: ALLOW_INTRUSIVE_MEASUREMENTS;
    D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK      :: DISABLE_BACKGROUND_WORK;
    D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM  :: DISABLE_PROFILING_BY_SYSTEM;
}

D3D12_MEASUREMENTS_ACTION :: enum s32 {
    KEEP_ALL                     :: 0;
    COMMIT_RESULTS               :: 1;
    COMMIT_RESULTS_HIGH_PRIORITY :: 2;
    DISCARD_PREVIOUS             :: 3;

    D3D12_MEASUREMENTS_ACTION_KEEP_ALL                     :: KEEP_ALL;
    D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS               :: COMMIT_RESULTS;
    D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY :: COMMIT_RESULTS_HIGH_PRIORITY;
    D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS             :: DISCARD_PREVIOUS;
}


ID3D12Device6_UUID :: "c70b221b-40e4-4a17-89af-025a0727a6dc";
ID3D12Device6 :: struct {
    #as using id3d12device5: ID3D12Device5;
    #place id3d12device5; id3d12device6_vtable: *ID3D12Device6_VTable;
}
ID3D12Device6_VTable :: struct #type_info_none {
    using id3d12device5: ID3D12Device5_VTable;
    SetBackgroundProcessingMode: (this: *ID3D12Device6, Mode: D3D12_BACKGROUND_PROCESSING_MODE, MeasurementsAction: D3D12_MEASUREMENTS_ACTION, hEventToSignalUponCompletion: HANDLE, pbFurtherMeasurementsDesired: *BOOL) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Device6) -> *ID3D12Device6_VTable { return obj.id3d12device6_vtable; }


D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED: GUID;
D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT :: struct {
    NodeIndex: u32;
    Count:     u32;
}

D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES :: struct {
    NodeIndex: u32;
    Count:     u32;
    pTypes:    *GUID;
}

D3D12_PROTECTED_RESOURCE_SESSION_DESC1 :: struct {
    NodeMask:       u32;
    Flags:          D3D12_PROTECTED_RESOURCE_SESSION_FLAGS;
    ProtectionType: GUID;
}


ID3D12ProtectedResourceSession1_UUID :: "D6F12DD6-76FB-406E-8961-4296EEFC0409";
ID3D12ProtectedResourceSession1 :: struct {
    #as using id3d12protectedresourcesession: ID3D12ProtectedResourceSession;
    #place id3d12protectedresourcesession; id3d12protectedresourcesession1_vtable: *ID3D12ProtectedResourceSession1_VTable;
}
ID3D12ProtectedResourceSession1_VTable :: struct #type_info_none {
    using id3d12protectedresourcesession: ID3D12ProtectedResourceSession_VTable;
    GetDesc1: (this: *ID3D12ProtectedResourceSession1) -> D3D12_PROTECTED_RESOURCE_SESSION_DESC1 #cpp_method;
}
vtable :: (obj: *ID3D12ProtectedResourceSession1) -> *ID3D12ProtectedResourceSession1_VTable { return obj.id3d12protectedresourcesession1_vtable; }



ID3D12Device7_UUID :: "5c014b53-68a1-4b9b-8bd1-dd6046b9358b";
ID3D12Device7 :: struct {
    #as using id3d12device6: ID3D12Device6;
    #place id3d12device6; id3d12device7_vtable: *ID3D12Device7_VTable;
}
ID3D12Device7_VTable :: struct #type_info_none {
    using id3d12device6: ID3D12Device6_VTable;
    AddToStateObject: (this: *ID3D12Device7, pAddition: *D3D12_STATE_OBJECT_DESC, pStateObjectToGrowFrom: *ID3D12StateObject, riid: *IID, ppNewStateObject: **void) -> HRESULT #cpp_method;
    CreateProtectedResourceSession1: (this: *ID3D12Device7, pDesc: *D3D12_PROTECTED_RESOURCE_SESSION_DESC1, riid: *IID, ppSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Device7) -> *ID3D12Device7_VTable { return obj.id3d12device7_vtable; }



ID3D12Device8_UUID :: "9218E6BB-F944-4F7E-A75C-B1B2C7B701F3";
ID3D12Device8 :: struct {
    #as using id3d12device7: ID3D12Device7;
    #place id3d12device7; id3d12device8_vtable: *ID3D12Device8_VTable;
}
ID3D12Device8_VTable :: struct #type_info_none {
    using id3d12device7: ID3D12Device7_VTable;
    GetResourceAllocationInfo2: (this: *ID3D12Device8, visibleMask: u32, numResourceDescs: u32, pResourceDescs: *D3D12_RESOURCE_DESC1, pResourceAllocationInfo1: *D3D12_RESOURCE_ALLOCATION_INFO1) -> D3D12_RESOURCE_ALLOCATION_INFO #cpp_method;
    CreateCommittedResource2: (this: *ID3D12Device8, pHeapProperties: *D3D12_HEAP_PROPERTIES, HeapFlags: D3D12_HEAP_FLAGS, pDesc: *D3D12_RESOURCE_DESC1, InitialResourceState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *D3D12_CLEAR_VALUE, pProtectedSession: *ID3D12ProtectedResourceSession, riidResource: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    CreatePlacedResource1: (this: *ID3D12Device8, pHeap: *ID3D12Heap, HeapOffset: u64, pDesc: *D3D12_RESOURCE_DESC1, InitialState: D3D12_RESOURCE_STATES, pOptimizedClearValue: *D3D12_CLEAR_VALUE, riid: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    CreateSamplerFeedbackUnorderedAccessView: (this: *ID3D12Device8, pTargetedResource: *ID3D12Resource, pFeedbackResource: *ID3D12Resource, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
    GetCopyableFootprints1: (this: *ID3D12Device8, pResourceDesc: *D3D12_RESOURCE_DESC1, FirstSubresource: u32, NumSubresources: u32, BaseOffset: u64, pLayouts: *D3D12_PLACED_SUBRESOURCE_FOOTPRINT, pNumRows: *u32, pRowSizeInBytes: *u64, pTotalBytes: *u64) -> void #cpp_method;
}
vtable :: (obj: *ID3D12Device8) -> *ID3D12Device8_VTable { return obj.id3d12device8_vtable; }



ID3D12Resource1_UUID :: "9D5E227A-4430-4161-88B3-3ECA6BB16E19";
ID3D12Resource1 :: struct {
    #as using id3d12resource: ID3D12Resource;
    #place id3d12resource; id3d12resource1_vtable: *ID3D12Resource1_VTable;
}
ID3D12Resource1_VTable :: struct #type_info_none {
    using id3d12resource: ID3D12Resource_VTable;
    GetProtectedResourceSession: (this: *ID3D12Resource1, riid: *IID, ppProtectedSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Resource1) -> *ID3D12Resource1_VTable { return obj.id3d12resource1_vtable; }



ID3D12Resource2_UUID :: "BE36EC3B-EA85-4AEB-A45A-E9D76404A495";
ID3D12Resource2 :: struct {
    #as using id3d12resource1: ID3D12Resource1;
    #place id3d12resource1; id3d12resource2_vtable: *ID3D12Resource2_VTable;
}
ID3D12Resource2_VTable :: struct #type_info_none {
    using id3d12resource1: ID3D12Resource1_VTable;
    GetDesc1: (this: *ID3D12Resource2) -> D3D12_RESOURCE_DESC1 #cpp_method;
}
vtable :: (obj: *ID3D12Resource2) -> *ID3D12Resource2_VTable { return obj.id3d12resource2_vtable; }



ID3D12Heap1_UUID :: "572F7389-2168-49E3-9693-D6DF5871BF6D";
ID3D12Heap1 :: struct {
    #as using id3d12heap: ID3D12Heap;
    #place id3d12heap; id3d12heap1_vtable: *ID3D12Heap1_VTable;
}
ID3D12Heap1_VTable :: struct #type_info_none {
    using id3d12heap: ID3D12Heap_VTable;
    GetProtectedResourceSession: (this: *ID3D12Heap1, riid: *IID, ppProtectedSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Heap1) -> *ID3D12Heap1_VTable { return obj.id3d12heap1_vtable; }



ID3D12GraphicsCommandList3_UUID :: "6FDA83A7-B84C-4E38-9AC8-C7BD22016B3D";
ID3D12GraphicsCommandList3 :: struct {
    #as using id3d12graphicscommandlist2: ID3D12GraphicsCommandList2;
    #place id3d12graphicscommandlist2; id3d12graphicscommandlist3_vtable: *ID3D12GraphicsCommandList3_VTable;
}
ID3D12GraphicsCommandList3_VTable :: struct #type_info_none {
    using id3d12graphicscommandlist2: ID3D12GraphicsCommandList2_VTable;
    SetProtectedResourceSession: (this: *ID3D12GraphicsCommandList3, pProtectedResourceSession: *ID3D12ProtectedResourceSession) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList3) -> *ID3D12GraphicsCommandList3_VTable { return obj.id3d12graphicscommandlist3_vtable; }


/* interface __MIDL_itf_d3d12_0000_0049 */
/* [local] */
D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE :: enum s32 {
    DISCARD   :: 0;
    PRESERVE  :: 1;
    CLEAR     :: 2;
    NO_ACCESS :: 3;

    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD   :: DISCARD;
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE  :: PRESERVE;
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR     :: CLEAR;
    D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS :: NO_ACCESS;
}

D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS :: struct {
    ClearValue: D3D12_CLEAR_VALUE;
}

D3D12_RENDER_PASS_BEGINNING_ACCESS :: struct {
    Type: D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE;
    union {
        Clear: D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS;
    }
}

D3D12_RENDER_PASS_ENDING_ACCESS_TYPE :: enum s32 {
    DISCARD   :: 0;
    PRESERVE  :: 1;
    RESOLVE   :: 2;
    NO_ACCESS :: 3;

    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD   :: DISCARD;
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE  :: PRESERVE;
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE   :: RESOLVE;
    D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS :: NO_ACCESS;
}

D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS :: struct {
    SrcSubresource: u32;
    DstSubresource: u32;
    DstX:           u32;
    DstY:           u32;
    SrcRect:        D3D12_RECT;
}

D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS :: struct {
    pSrcResource:           *ID3D12Resource;
    pDstResource:           *ID3D12Resource;
    SubresourceCount:       u32;
    pSubresourceParameters: *D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS;
    Format:                 DXGI_FORMAT;
    ResolveMode:            D3D12_RESOLVE_MODE;
    PreserveResolveSource:  BOOL;
}

D3D12_RENDER_PASS_ENDING_ACCESS :: struct {
    Type: D3D12_RENDER_PASS_ENDING_ACCESS_TYPE;
    union {
        Resolve: D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS;
    }
}

D3D12_RENDER_PASS_RENDER_TARGET_DESC :: struct {
    cpuDescriptor:   D3D12_CPU_DESCRIPTOR_HANDLE;
    BeginningAccess: D3D12_RENDER_PASS_BEGINNING_ACCESS;
    EndingAccess:    D3D12_RENDER_PASS_ENDING_ACCESS;
}

D3D12_RENDER_PASS_DEPTH_STENCIL_DESC :: struct {
    cpuDescriptor:          D3D12_CPU_DESCRIPTOR_HANDLE;
    DepthBeginningAccess:   D3D12_RENDER_PASS_BEGINNING_ACCESS;
    StencilBeginningAccess: D3D12_RENDER_PASS_BEGINNING_ACCESS;
    DepthEndingAccess:      D3D12_RENDER_PASS_ENDING_ACCESS;
    StencilEndingAccess:    D3D12_RENDER_PASS_ENDING_ACCESS;
}

D3D12_RENDER_PASS_FLAGS :: enum_flags u32 {
    NONE             :: 0x0;
    ALLOW_UAV_WRITES :: 0x1;
    SUSPENDING_PASS  :: 0x2;
    RESUMING_PASS    :: 0x4;

    D3D12_RENDER_PASS_FLAG_NONE             :: NONE;
    D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES :: ALLOW_UAV_WRITES;
    D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS  :: SUSPENDING_PASS;
    D3D12_RENDER_PASS_FLAG_RESUMING_PASS    :: RESUMING_PASS;
}


ID3D12MetaCommand_UUID :: "DBB84C27-36CE-4FC9-B801-F048C46AC570";
ID3D12MetaCommand :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12metacommand_vtable: *ID3D12MetaCommand_VTable;
}
ID3D12MetaCommand_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetRequiredParameterResourceSize: (this: *ID3D12MetaCommand, Stage: D3D12_META_COMMAND_PARAMETER_STAGE, ParameterIndex: u32) -> u64 #cpp_method;
}
vtable :: (obj: *ID3D12MetaCommand) -> *ID3D12MetaCommand_VTable { return obj.id3d12metacommand_vtable; }


/* interface __MIDL_itf_d3d12_0000_0050 */
/* [local] */
D3D12_DISPATCH_RAYS_DESC :: struct {
    RayGenerationShaderRecord: D3D12_GPU_VIRTUAL_ADDRESS_RANGE;
    MissShaderTable:           D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE;
    HitGroupTable:             D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE;
    CallableShaderTable:       D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE;
    Width:                     u32;
    Height:                    u32;
    Depth:                     u32;
}


ID3D12GraphicsCommandList4_UUID :: "8754318e-d3a9-4541-98cf-645b50dc4874";
ID3D12GraphicsCommandList4 :: struct {
    #as using id3d12graphicscommandlist3: ID3D12GraphicsCommandList3;
    #place id3d12graphicscommandlist3; id3d12graphicscommandlist4_vtable: *ID3D12GraphicsCommandList4_VTable;
}
ID3D12GraphicsCommandList4_VTable :: struct #type_info_none {
    using id3d12graphicscommandlist3: ID3D12GraphicsCommandList3_VTable;
    BeginRenderPass: (this: *ID3D12GraphicsCommandList4, NumRenderTargets: u32, pRenderTargets: *D3D12_RENDER_PASS_RENDER_TARGET_DESC, pDepthStencil: *D3D12_RENDER_PASS_DEPTH_STENCIL_DESC, Flags: D3D12_RENDER_PASS_FLAGS) -> void #cpp_method;
    EndRenderPass: (this: *ID3D12GraphicsCommandList4) -> void #cpp_method;
    InitializeMetaCommand: (this: *ID3D12GraphicsCommandList4, pMetaCommand: *ID3D12MetaCommand, pInitializationParametersData: *void, InitializationParametersDataSizeInBytes: SIZE_T) -> void #cpp_method;
    ExecuteMetaCommand: (this: *ID3D12GraphicsCommandList4, pMetaCommand: *ID3D12MetaCommand, pExecutionParametersData: *void, ExecutionParametersDataSizeInBytes: SIZE_T) -> void #cpp_method;
    BuildRaytracingAccelerationStructure: (this: *ID3D12GraphicsCommandList4, pDesc: *D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC, NumPostbuildInfoDescs: u32, pPostbuildInfoDescs: *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC) -> void #cpp_method;
    EmitRaytracingAccelerationStructurePostbuildInfo: (this: *ID3D12GraphicsCommandList4, pDesc: *D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC, NumSourceAccelerationStructures: u32, pSourceAccelerationStructureData: *D3D12_GPU_VIRTUAL_ADDRESS) -> void #cpp_method;
    CopyRaytracingAccelerationStructure: (this: *ID3D12GraphicsCommandList4, DestAccelerationStructureData: D3D12_GPU_VIRTUAL_ADDRESS, SourceAccelerationStructureData: D3D12_GPU_VIRTUAL_ADDRESS, Mode: D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE) -> void #cpp_method;
    SetPipelineState1: (this: *ID3D12GraphicsCommandList4, pStateObject: *ID3D12StateObject) -> void #cpp_method;
    DispatchRays: (this: *ID3D12GraphicsCommandList4, pDesc: *D3D12_DISPATCH_RAYS_DESC) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList4) -> *ID3D12GraphicsCommandList4_VTable { return obj.id3d12graphicscommandlist4_vtable; }


/* interface __MIDL_itf_d3d12_0000_0051 */
/* [local] */
D3D12_SHADER_CACHE_MODE :: enum s32 {
    MEMORY :: 0;
    DISK   :: 1;

    D3D12_SHADER_CACHE_MODE_MEMORY :: MEMORY;
    D3D12_SHADER_CACHE_MODE_DISK   :: DISK;
}

D3D12_SHADER_CACHE_FLAGS :: enum_flags u32 {
    NONE             :: 0x0;
    DRIVER_VERSIONED :: 0x1;
    USE_WORKING_DIR  :: 0x2;

    D3D12_SHADER_CACHE_FLAG_NONE             :: NONE;
    D3D12_SHADER_CACHE_FLAG_DRIVER_VERSIONED :: DRIVER_VERSIONED;
    D3D12_SHADER_CACHE_FLAG_USE_WORKING_DIR  :: USE_WORKING_DIR;
}

D3D12_SHADER_CACHE_SESSION_DESC :: struct {
    Identifier:                    GUID;
    Mode:                          D3D12_SHADER_CACHE_MODE;
    Flags:                         D3D12_SHADER_CACHE_FLAGS;
    MaximumInMemoryCacheSizeBytes: u32;
    MaximumInMemoryCacheEntries:   u32;
    MaximumValueFileSizeBytes:     u32;
    Version:                       u64;
}

D3D12_BARRIER_LAYOUT :: enum s32 {
    UNDEFINED                      :: -1;
    COMMON                         :: 0;
    PRESENT                        :: 0;
    GENERIC_READ                   :: 1;
    RENDER_TARGET                  :: 2;
    UNORDERED_ACCESS               :: 3;
    DEPTH_STENCIL_WRITE            :: 4;
    DEPTH_STENCIL_READ             :: 5;
    SHADER_RESOURCE                :: 6;
    COPY_SOURCE                    :: 7;
    COPY_DEST                      :: 8;
    RESOLVE_SOURCE                 :: 9;
    RESOLVE_DEST                   :: 10;
    SHADING_RATE_SOURCE            :: 11;
    VIDEO_DECODE_READ              :: 12;
    VIDEO_DECODE_WRITE             :: 13;
    VIDEO_PROCESS_READ             :: 14;
    VIDEO_PROCESS_WRITE            :: 15;
    VIDEO_ENCODE_READ              :: 16;
    VIDEO_ENCODE_WRITE             :: 17;
    DIRECT_QUEUE_COMMON            :: 18;
    DIRECT_QUEUE_GENERIC_READ      :: 19;
    DIRECT_QUEUE_UNORDERED_ACCESS  :: 20;
    DIRECT_QUEUE_SHADER_RESOURCE   :: 21;
    DIRECT_QUEUE_COPY_SOURCE       :: 22;
    DIRECT_QUEUE_COPY_DEST         :: 23;
    COMPUTE_QUEUE_COMMON           :: 24;
    COMPUTE_QUEUE_GENERIC_READ     :: 25;
    COMPUTE_QUEUE_UNORDERED_ACCESS :: 26;
    COMPUTE_QUEUE_SHADER_RESOURCE  :: 27;
    COMPUTE_QUEUE_COPY_SOURCE      :: 28;
    COMPUTE_QUEUE_COPY_DEST        :: 29;
    VIDEO_QUEUE_COMMON             :: 30;

    D3D12_BARRIER_LAYOUT_UNDEFINED                      :: UNDEFINED;
    D3D12_BARRIER_LAYOUT_COMMON                         :: COMMON;
    D3D12_BARRIER_LAYOUT_PRESENT                        :: PRESENT;
    D3D12_BARRIER_LAYOUT_GENERIC_READ                   :: GENERIC_READ;
    D3D12_BARRIER_LAYOUT_RENDER_TARGET                  :: RENDER_TARGET;
    D3D12_BARRIER_LAYOUT_UNORDERED_ACCESS               :: UNORDERED_ACCESS;
    D3D12_BARRIER_LAYOUT_DEPTH_STENCIL_WRITE            :: DEPTH_STENCIL_WRITE;
    D3D12_BARRIER_LAYOUT_DEPTH_STENCIL_READ             :: DEPTH_STENCIL_READ;
    D3D12_BARRIER_LAYOUT_SHADER_RESOURCE                :: SHADER_RESOURCE;
    D3D12_BARRIER_LAYOUT_COPY_SOURCE                    :: COPY_SOURCE;
    D3D12_BARRIER_LAYOUT_COPY_DEST                      :: COPY_DEST;
    D3D12_BARRIER_LAYOUT_RESOLVE_SOURCE                 :: RESOLVE_SOURCE;
    D3D12_BARRIER_LAYOUT_RESOLVE_DEST                   :: RESOLVE_DEST;
    D3D12_BARRIER_LAYOUT_SHADING_RATE_SOURCE            :: SHADING_RATE_SOURCE;
    D3D12_BARRIER_LAYOUT_VIDEO_DECODE_READ              :: VIDEO_DECODE_READ;
    D3D12_BARRIER_LAYOUT_VIDEO_DECODE_WRITE             :: VIDEO_DECODE_WRITE;
    D3D12_BARRIER_LAYOUT_VIDEO_PROCESS_READ             :: VIDEO_PROCESS_READ;
    D3D12_BARRIER_LAYOUT_VIDEO_PROCESS_WRITE            :: VIDEO_PROCESS_WRITE;
    D3D12_BARRIER_LAYOUT_VIDEO_ENCODE_READ              :: VIDEO_ENCODE_READ;
    D3D12_BARRIER_LAYOUT_VIDEO_ENCODE_WRITE             :: VIDEO_ENCODE_WRITE;
    D3D12_BARRIER_LAYOUT_DIRECT_QUEUE_COMMON            :: DIRECT_QUEUE_COMMON;
    D3D12_BARRIER_LAYOUT_DIRECT_QUEUE_GENERIC_READ      :: DIRECT_QUEUE_GENERIC_READ;
    D3D12_BARRIER_LAYOUT_DIRECT_QUEUE_UNORDERED_ACCESS  :: DIRECT_QUEUE_UNORDERED_ACCESS;
    D3D12_BARRIER_LAYOUT_DIRECT_QUEUE_SHADER_RESOURCE   :: DIRECT_QUEUE_SHADER_RESOURCE;
    D3D12_BARRIER_LAYOUT_DIRECT_QUEUE_COPY_SOURCE       :: DIRECT_QUEUE_COPY_SOURCE;
    D3D12_BARRIER_LAYOUT_DIRECT_QUEUE_COPY_DEST         :: DIRECT_QUEUE_COPY_DEST;
    D3D12_BARRIER_LAYOUT_COMPUTE_QUEUE_COMMON           :: COMPUTE_QUEUE_COMMON;
    D3D12_BARRIER_LAYOUT_COMPUTE_QUEUE_GENERIC_READ     :: COMPUTE_QUEUE_GENERIC_READ;
    D3D12_BARRIER_LAYOUT_COMPUTE_QUEUE_UNORDERED_ACCESS :: COMPUTE_QUEUE_UNORDERED_ACCESS;
    D3D12_BARRIER_LAYOUT_COMPUTE_QUEUE_SHADER_RESOURCE  :: COMPUTE_QUEUE_SHADER_RESOURCE;
    D3D12_BARRIER_LAYOUT_COMPUTE_QUEUE_COPY_SOURCE      :: COMPUTE_QUEUE_COPY_SOURCE;
    D3D12_BARRIER_LAYOUT_COMPUTE_QUEUE_COPY_DEST        :: COMPUTE_QUEUE_COPY_DEST;
    D3D12_BARRIER_LAYOUT_VIDEO_QUEUE_COMMON             :: VIDEO_QUEUE_COMMON;
}

D3D12_BARRIER_SYNC :: enum s32 {
    NONE                                                  :: 0;
    ALL                                                   :: 1;
    DRAW                                                  :: 2;
    INPUT_ASSEMBLER                                       :: 4;
    VERTEX_SHADING                                        :: 8;
    PIXEL_SHADING                                         :: 16;
    DEPTH_STENCIL                                         :: 32;
    RENDER_TARGET                                         :: 64;
    COMPUTE_SHADING                                       :: 128;
    RAYTRACING                                            :: 256;
    COPY                                                  :: 512;
    RESOLVE                                               :: 1024;
    EXECUTE_INDIRECT                                      :: 2048;
    PREDICATION                                           :: 2048;
    ALL_SHADING                                           :: 4096;
    NON_PIXEL_SHADING                                     :: 8192;
    EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO :: 16384;
    CLEAR_UNORDERED_ACCESS_VIEW                           :: 32768;
    VIDEO_DECODE                                          :: 1048576;
    VIDEO_PROCESS                                         :: 2097152;
    VIDEO_ENCODE                                          :: 4194304;
    BUILD_RAYTRACING_ACCELERATION_STRUCTURE               :: 8388608;
    COPY_RAYTRACING_ACCELERATION_STRUCTURE                :: 16777216;
    SPLIT                                                 :: -2147483648;

    D3D12_BARRIER_SYNC_NONE                                                  :: NONE;
    D3D12_BARRIER_SYNC_ALL                                                   :: ALL;
    D3D12_BARRIER_SYNC_DRAW                                                  :: DRAW;
    D3D12_BARRIER_SYNC_INPUT_ASSEMBLER                                       :: INPUT_ASSEMBLER;
    D3D12_BARRIER_SYNC_VERTEX_SHADING                                        :: VERTEX_SHADING;
    D3D12_BARRIER_SYNC_PIXEL_SHADING                                         :: PIXEL_SHADING;
    D3D12_BARRIER_SYNC_DEPTH_STENCIL                                         :: DEPTH_STENCIL;
    D3D12_BARRIER_SYNC_RENDER_TARGET                                         :: RENDER_TARGET;
    D3D12_BARRIER_SYNC_COMPUTE_SHADING                                       :: COMPUTE_SHADING;
    D3D12_BARRIER_SYNC_RAYTRACING                                            :: RAYTRACING;
    D3D12_BARRIER_SYNC_COPY                                                  :: COPY;
    D3D12_BARRIER_SYNC_RESOLVE                                               :: RESOLVE;
    D3D12_BARRIER_SYNC_EXECUTE_INDIRECT                                      :: EXECUTE_INDIRECT;
    D3D12_BARRIER_SYNC_PREDICATION                                           :: PREDICATION;
    D3D12_BARRIER_SYNC_ALL_SHADING                                           :: ALL_SHADING;
    D3D12_BARRIER_SYNC_NON_PIXEL_SHADING                                     :: NON_PIXEL_SHADING;
    D3D12_BARRIER_SYNC_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO :: EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO;
    D3D12_BARRIER_SYNC_CLEAR_UNORDERED_ACCESS_VIEW                           :: CLEAR_UNORDERED_ACCESS_VIEW;
    D3D12_BARRIER_SYNC_VIDEO_DECODE                                          :: VIDEO_DECODE;
    D3D12_BARRIER_SYNC_VIDEO_PROCESS                                         :: VIDEO_PROCESS;
    D3D12_BARRIER_SYNC_VIDEO_ENCODE                                          :: VIDEO_ENCODE;
    D3D12_BARRIER_SYNC_BUILD_RAYTRACING_ACCELERATION_STRUCTURE               :: BUILD_RAYTRACING_ACCELERATION_STRUCTURE;
    D3D12_BARRIER_SYNC_COPY_RAYTRACING_ACCELERATION_STRUCTURE                :: COPY_RAYTRACING_ACCELERATION_STRUCTURE;
    D3D12_BARRIER_SYNC_SPLIT                                                 :: SPLIT;
}

D3D12_BARRIER_ACCESS :: enum s32 {
    COMMON                                  :: 0;
    VERTEX_BUFFER                           :: 1;
    CONSTANT_BUFFER                         :: 2;
    INDEX_BUFFER                            :: 4;
    RENDER_TARGET                           :: 8;
    UNORDERED_ACCESS                        :: 16;
    DEPTH_STENCIL_WRITE                     :: 32;
    DEPTH_STENCIL_READ                      :: 64;
    SHADER_RESOURCE                         :: 128;
    STREAM_OUTPUT                           :: 256;
    INDIRECT_ARGUMENT                       :: 512;
    PREDICATION                             :: 512;
    COPY_DEST                               :: 1024;
    COPY_SOURCE                             :: 2048;
    RESOLVE_DEST                            :: 4096;
    RESOLVE_SOURCE                          :: 8192;
    RAYTRACING_ACCELERATION_STRUCTURE_READ  :: 16384;
    RAYTRACING_ACCELERATION_STRUCTURE_WRITE :: 32768;
    SHADING_RATE_SOURCE                     :: 65536;
    VIDEO_DECODE_READ                       :: 131072;
    VIDEO_DECODE_WRITE                      :: 262144;
    VIDEO_PROCESS_READ                      :: 524288;
    VIDEO_PROCESS_WRITE                     :: 1048576;
    VIDEO_ENCODE_READ                       :: 2097152;
    VIDEO_ENCODE_WRITE                      :: 4194304;
    NO_ACCESS                               :: -2147483648;

    D3D12_BARRIER_ACCESS_COMMON                                  :: COMMON;
    D3D12_BARRIER_ACCESS_VERTEX_BUFFER                           :: VERTEX_BUFFER;
    D3D12_BARRIER_ACCESS_CONSTANT_BUFFER                         :: CONSTANT_BUFFER;
    D3D12_BARRIER_ACCESS_INDEX_BUFFER                            :: INDEX_BUFFER;
    D3D12_BARRIER_ACCESS_RENDER_TARGET                           :: RENDER_TARGET;
    D3D12_BARRIER_ACCESS_UNORDERED_ACCESS                        :: UNORDERED_ACCESS;
    D3D12_BARRIER_ACCESS_DEPTH_STENCIL_WRITE                     :: DEPTH_STENCIL_WRITE;
    D3D12_BARRIER_ACCESS_DEPTH_STENCIL_READ                      :: DEPTH_STENCIL_READ;
    D3D12_BARRIER_ACCESS_SHADER_RESOURCE                         :: SHADER_RESOURCE;
    D3D12_BARRIER_ACCESS_STREAM_OUTPUT                           :: STREAM_OUTPUT;
    D3D12_BARRIER_ACCESS_INDIRECT_ARGUMENT                       :: INDIRECT_ARGUMENT;
    D3D12_BARRIER_ACCESS_PREDICATION                             :: PREDICATION;
    D3D12_BARRIER_ACCESS_COPY_DEST                               :: COPY_DEST;
    D3D12_BARRIER_ACCESS_COPY_SOURCE                             :: COPY_SOURCE;
    D3D12_BARRIER_ACCESS_RESOLVE_DEST                            :: RESOLVE_DEST;
    D3D12_BARRIER_ACCESS_RESOLVE_SOURCE                          :: RESOLVE_SOURCE;
    D3D12_BARRIER_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_READ  :: RAYTRACING_ACCELERATION_STRUCTURE_READ;
    D3D12_BARRIER_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_WRITE :: RAYTRACING_ACCELERATION_STRUCTURE_WRITE;
    D3D12_BARRIER_ACCESS_SHADING_RATE_SOURCE                     :: SHADING_RATE_SOURCE;
    D3D12_BARRIER_ACCESS_VIDEO_DECODE_READ                       :: VIDEO_DECODE_READ;
    D3D12_BARRIER_ACCESS_VIDEO_DECODE_WRITE                      :: VIDEO_DECODE_WRITE;
    D3D12_BARRIER_ACCESS_VIDEO_PROCESS_READ                      :: VIDEO_PROCESS_READ;
    D3D12_BARRIER_ACCESS_VIDEO_PROCESS_WRITE                     :: VIDEO_PROCESS_WRITE;
    D3D12_BARRIER_ACCESS_VIDEO_ENCODE_READ                       :: VIDEO_ENCODE_READ;
    D3D12_BARRIER_ACCESS_VIDEO_ENCODE_WRITE                      :: VIDEO_ENCODE_WRITE;
    D3D12_BARRIER_ACCESS_NO_ACCESS                               :: NO_ACCESS;
}

D3D12_BARRIER_TYPE :: enum s32 {
    GLOBAL  :: 0;
    TEXTURE :: 1;
    BUFFER  :: 2;

    D3D12_BARRIER_TYPE_GLOBAL  :: GLOBAL;
    D3D12_BARRIER_TYPE_TEXTURE :: TEXTURE;
    D3D12_BARRIER_TYPE_BUFFER  :: BUFFER;
}

D3D12_TEXTURE_BARRIER_FLAGS :: enum_flags u32 {
    NONE    :: 0x0;
    DISCARD :: 0x1;

    D3D12_TEXTURE_BARRIER_FLAG_NONE    :: NONE;
    D3D12_TEXTURE_BARRIER_FLAG_DISCARD :: DISCARD;
}

D3D12_BARRIER_SUBRESOURCE_RANGE :: struct {
    IndexOrFirstMipLevel: u32;
    NumMipLevels:         u32;
    FirstArraySlice:      u32;
    NumArraySlices:       u32;
    FirstPlane:           u32;
    NumPlanes:            u32;
}

D3D12_GLOBAL_BARRIER :: struct {
    SyncBefore:   D3D12_BARRIER_SYNC;
    SyncAfter:    D3D12_BARRIER_SYNC;
    AccessBefore: D3D12_BARRIER_ACCESS;
    AccessAfter:  D3D12_BARRIER_ACCESS;
}

D3D12_TEXTURE_BARRIER :: struct {
    SyncBefore:   D3D12_BARRIER_SYNC;
    SyncAfter:    D3D12_BARRIER_SYNC;
    AccessBefore: D3D12_BARRIER_ACCESS;
    AccessAfter:  D3D12_BARRIER_ACCESS;
    LayoutBefore: D3D12_BARRIER_LAYOUT;
    LayoutAfter:  D3D12_BARRIER_LAYOUT;
    pResource:    *ID3D12Resource;
    Subresources: D3D12_BARRIER_SUBRESOURCE_RANGE;
    Flags:        D3D12_TEXTURE_BARRIER_FLAGS;
}

D3D12_BUFFER_BARRIER :: struct {
    SyncBefore:   D3D12_BARRIER_SYNC;
    SyncAfter:    D3D12_BARRIER_SYNC;
    AccessBefore: D3D12_BARRIER_ACCESS;
    AccessAfter:  D3D12_BARRIER_ACCESS;
    pResource:    *ID3D12Resource;
    Offset:       u64;
    Size:         u64;
}

D3D12_BARRIER_GROUP :: struct {
    Type:        D3D12_BARRIER_TYPE;
    NumBarriers: u32;
    union {
        pGlobalBarriers:  *D3D12_GLOBAL_BARRIER;
        pTextureBarriers: *D3D12_TEXTURE_BARRIER;
        pBufferBarriers:  *D3D12_BUFFER_BARRIER;
    }
}


ID3D12ShaderCacheSession_UUID :: "28e2495d-0f64-4ae4-a6ec-129255dc49a8";
ID3D12ShaderCacheSession :: struct {
    #as using id3d12devicechild: ID3D12DeviceChild;
    #place id3d12devicechild; id3d12shadercachesession_vtable: *ID3D12ShaderCacheSession_VTable;
}
ID3D12ShaderCacheSession_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    FindValue: (this: *ID3D12ShaderCacheSession, pKey: *void, KeySize: u32, pValue: *void, pValueSize: *u32) -> HRESULT #cpp_method;
    StoreValue: (this: *ID3D12ShaderCacheSession, pKey: *void, KeySize: u32, pValue: *void, ValueSize: u32) -> HRESULT #cpp_method;
    SetDeleteOnDestroy: (this: *ID3D12ShaderCacheSession) -> void #cpp_method;
    GetDesc: (this: *ID3D12ShaderCacheSession) -> D3D12_SHADER_CACHE_SESSION_DESC #cpp_method;
}
vtable :: (obj: *ID3D12ShaderCacheSession) -> *ID3D12ShaderCacheSession_VTable { return obj.id3d12shadercachesession_vtable; }


/* interface __MIDL_itf_d3d12_0000_0052 */
/* [local] */
D3D12_SHADER_CACHE_KIND_FLAGS :: enum_flags u32 {
    IMPLICIT_D3D_CACHE_FOR_DRIVER :: 0x1;
    IMPLICIT_D3D_CONVERSIONS      :: 0x2;
    IMPLICIT_DRIVER_MANAGED       :: 0x4;
    APPLICATION_MANAGED           :: 0x8;

    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CACHE_FOR_DRIVER :: IMPLICIT_D3D_CACHE_FOR_DRIVER;
    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_D3D_CONVERSIONS      :: IMPLICIT_D3D_CONVERSIONS;
    D3D12_SHADER_CACHE_KIND_FLAG_IMPLICIT_DRIVER_MANAGED       :: IMPLICIT_DRIVER_MANAGED;
    D3D12_SHADER_CACHE_KIND_FLAG_APPLICATION_MANAGED           :: APPLICATION_MANAGED;
}

D3D12_SHADER_CACHE_CONTROL_FLAGS :: enum_flags u32 {
    DISABLE :: 0x1;
    ENABLE  :: 0x2;
    CLEAR   :: 0x4;

    D3D12_SHADER_CACHE_CONTROL_FLAG_DISABLE :: DISABLE;
    D3D12_SHADER_CACHE_CONTROL_FLAG_ENABLE  :: ENABLE;
    D3D12_SHADER_CACHE_CONTROL_FLAG_CLEAR   :: CLEAR;
}


ID3D12Device9_UUID :: "4c80e962-f032-4f60-bc9e-ebc2cfa1d83c";
ID3D12Device9 :: struct {
    #as using id3d12device8: ID3D12Device8;
    #place id3d12device8; id3d12device9_vtable: *ID3D12Device9_VTable;
}
ID3D12Device9_VTable :: struct #type_info_none {
    using id3d12device8: ID3D12Device8_VTable;
    CreateShaderCacheSession: (this: *ID3D12Device9, pDesc: *D3D12_SHADER_CACHE_SESSION_DESC, riid: *IID, ppvSession: **void) -> HRESULT #cpp_method;
    ShaderCacheControl: (this: *ID3D12Device9, Kinds: D3D12_SHADER_CACHE_KIND_FLAGS, Control: D3D12_SHADER_CACHE_CONTROL_FLAGS) -> HRESULT #cpp_method;
    CreateCommandQueue1: (this: *ID3D12Device9, pDesc: *D3D12_COMMAND_QUEUE_DESC, CreatorID: *IID, riid: *IID, ppCommandQueue: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Device9) -> *ID3D12Device9_VTable { return obj.id3d12device9_vtable; }



ID3D12Device10_UUID :: "517f8718-aa66-49f9-b02b-a7ab89c06031";
ID3D12Device10 :: struct {
    #as using id3d12device9: ID3D12Device9;
    #place id3d12device9; id3d12device10_vtable: *ID3D12Device10_VTable;
}
ID3D12Device10_VTable :: struct #type_info_none {
    using id3d12device9: ID3D12Device9_VTable;
    CreateCommittedResource3: (this: *ID3D12Device10, pHeapProperties: *D3D12_HEAP_PROPERTIES, HeapFlags: D3D12_HEAP_FLAGS, pDesc: *D3D12_RESOURCE_DESC1, InitialLayout: D3D12_BARRIER_LAYOUT, pOptimizedClearValue: *D3D12_CLEAR_VALUE, pProtectedSession: *ID3D12ProtectedResourceSession, NumCastableFormats: u32, pCastableFormats: *DXGI_FORMAT, riidResource: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    CreatePlacedResource2: (this: *ID3D12Device10, pHeap: *ID3D12Heap, HeapOffset: u64, pDesc: *D3D12_RESOURCE_DESC1, InitialLayout: D3D12_BARRIER_LAYOUT, pOptimizedClearValue: *D3D12_CLEAR_VALUE, NumCastableFormats: u32, pCastableFormats: *DXGI_FORMAT, riid: *IID, ppvResource: **void) -> HRESULT #cpp_method;
    CreateReservedResource2: (this: *ID3D12Device10, pDesc: *D3D12_RESOURCE_DESC, InitialLayout: D3D12_BARRIER_LAYOUT, pOptimizedClearValue: *D3D12_CLEAR_VALUE, pProtectedSession: *ID3D12ProtectedResourceSession, NumCastableFormats: u32, pCastableFormats: *DXGI_FORMAT, riid: *IID, ppvResource: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12Device10) -> *ID3D12Device10_VTable { return obj.id3d12device10_vtable; }



ID3D12Device11_UUID :: "5405c344-d457-444e-b4dd-2366e45aee39";
ID3D12Device11 :: struct {
    #as using id3d12device10: ID3D12Device10;
    #place id3d12device10; id3d12device11_vtable: *ID3D12Device11_VTable;
}
ID3D12Device11_VTable :: struct #type_info_none {
    using id3d12device10: ID3D12Device10_VTable;
    CreateSampler2: (this: *ID3D12Device11, pDesc: *D3D12_SAMPLER_DESC2, DestDescriptor: D3D12_CPU_DESCRIPTOR_HANDLE) -> void #cpp_method;
}
vtable :: (obj: *ID3D12Device11) -> *ID3D12Device11_VTable { return obj.id3d12device11_vtable; }



ID3D12VirtualizationGuestDevice_UUID :: "bc66d368-7373-4943-8757-fc87dc79e476";
ID3D12VirtualizationGuestDevice :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12virtualizationguestdevice_vtable: *ID3D12VirtualizationGuestDevice_VTable;
}
ID3D12VirtualizationGuestDevice_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    ShareWithHost: (this: *ID3D12VirtualizationGuestDevice, pObject: *ID3D12DeviceChild, pHandle: *HANDLE) -> HRESULT #cpp_method;
    CreateFenceFd: (this: *ID3D12VirtualizationGuestDevice, pFence: *ID3D12Fence, FenceValue: u64, pFenceFd: *s32) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VirtualizationGuestDevice) -> *ID3D12VirtualizationGuestDevice_VTable { return obj.id3d12virtualizationguestdevice_vtable; }



ID3D12Tools_UUID :: "7071e1f0-e84b-4b33-974f-12fa49de65c5";
ID3D12Tools :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12tools_vtable: *ID3D12Tools_VTable;
}
ID3D12Tools_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    EnableShaderInstrumentation: (this: *ID3D12Tools, bEnable: BOOL) -> void #cpp_method;
    ShaderInstrumentationEnabled: (this: *ID3D12Tools) -> BOOL #cpp_method;
}
vtable :: (obj: *ID3D12Tools) -> *ID3D12Tools_VTable { return obj.id3d12tools_vtable; }


/* interface __MIDL_itf_d3d12_0000_0057 */
/* [local] */
D3D12_SUBRESOURCE_DATA :: struct {
    pData:      *void;
    RowPitch:   s64;
    SlicePitch: s64;
}

D3D12_MEMCPY_DEST :: struct {
    pData:      *void;
    RowPitch:   SIZE_T;
    SlicePitch: SIZE_T;
}

///////////////////////////////////////////////////////////////////////////
// D3D12CreateDevice
// ------------------
//
// pAdapter
//      If NULL, D3D12CreateDevice will choose the primary adapter.
//      If non-NULL, D3D12CreateDevice will use the provided adapter.
// MinimumFeatureLevel
//      The minimum feature level required for successful device creation.
// riid
//      The interface IID of the device to be returned. Expected: ID3D12Device.
// ppDevice
//      Pointer to returned interface. May be NULL.
//
// Return Values
//  Any of those documented for 
//          CreateDXGIFactory1
//          IDXGIFactory::EnumAdapters
//          D3D12CreateDevice
//
///////////////////////////////////////////////////////////////////////////
PFN_D3D12_CREATE_DEVICE :: #type (unknown0: *IUnknown, unknown1: D3D_FEATURE_LEVEL, unknown2: *IID, unknown3: **void) -> HRESULT #c_call;

D3D12CreateDevice :: (pAdapter: *IUnknown, MinimumFeatureLevel: D3D_FEATURE_LEVEL, riid: *IID, ppDevice: **void) -> HRESULT #foreign d3d12;
D3D12CreateDevice :: (pAdapter: *IUnknown, MinimumFeatureLevel: D3D_FEATURE_LEVEL, riid: IID, ppDevice: **void) -> HRESULT #no_context {
    return D3D12CreateDevice(pAdapter, MinimumFeatureLevel, *riid, ppDevice);
}

PFN_D3D12_GET_DEBUG_INTERFACE :: #type (unknown0: *IID, unknown1: **void) -> HRESULT #c_call;

D3D12GetDebugInterface :: (riid: *IID, ppvDebug: **void) -> HRESULT #foreign d3d12;
D3D12GetDebugInterface :: (riid: IID, ppvDebug: **void) -> HRESULT #no_context {
    return D3D12GetDebugInterface(*riid, ppvDebug);
}

// --------------------------------------------------------------------------------------------------------------------------------
// D3D12EnableExperimentalFeatures
//
// Pass in a list of feature GUIDs to be enabled together.
// 
// If a particular feature requires some configuration information on enablement, it will have
// a configuration struct that can be passed alongside the GUID.
// 
// Some features might use an interface IID as the GUID.  For these, once the feature is enabled via
// D3D12EnableExperimentalFeatures, D3D12GetDebugInterface can then be called with the IID to retrieve the interface
// for manipulating the feature.  This allows for control that might not cleanly be expressed by just 
// the configuration struct that D3D12EnableExperimentalFeatures provides.
//
// If this method is called and a change to existing feature enablement is made, 
// all current D3D12 devices are set to DEVICE_REMOVED state, since under the covers there is really only one
// singleton device for a process.  Removing the devices when configuration changes prevents
// mismatched expectations of how a device is supposed to work after it has been created from the app's point of view.
//
// The call returns E_NOINTERFACE if an unrecognized feature is passed in or Windows Developer mode is not on.
// The call returns E_INVALIDARG if the configuration of a feature is incorrect, the set of features passed
// in are known to be incompatible with each other, or other errors.
// Returns S_OK otherwise.
//
// --------------------------------------------------------------------------------------------------------------------------------
D3D12EnableExperimentalFeatures :: (NumFeatures: u32, pIIDs: *IID, pConfigurationStructs: *void, pConfigurationStructSizes: *u32) -> HRESULT #foreign d3d12;

D3D12ExperimentalShaderModels: UUID; /* 76f5573e-f13a-40f5-b297-81ce9e18933f */

D3D12TiledResourceTier4: UUID; /* c9c4725f-a81a-4f56-8c5b-c51039d694fb */

CLSID_D3D12Debug: GUID;
CLSID_D3D12Tools: GUID;
CLSID_D3D12DeviceRemovedExtendedData: GUID;
CLSID_D3D12SDKConfiguration: GUID;
CLSID_D3D12DeviceFactory: GUID;

PFN_D3D12_GET_INTERFACE :: #type (unknown0: *IID, unknown1: *IID, unknown2: **void) -> HRESULT #c_call;

D3D12GetInterface :: (rclsid: *IID, riid: *IID, ppvDebug: **void) -> HRESULT #foreign d3d12;
D3D12GetInterface :: (rclsid: IID, riid: IID, ppvDebug: **void) -> HRESULT #no_context {
    return D3D12GetInterface(*rclsid, *riid, ppvDebug);
}


ID3D12SDKConfiguration_UUID :: "e9eb5314-33aa-42b2-a718-d77f58b1f1c7";
ID3D12SDKConfiguration :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12sdkconfiguration_vtable: *ID3D12SDKConfiguration_VTable;
}
ID3D12SDKConfiguration_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    SetSDKVersion: (this: *ID3D12SDKConfiguration, SDKVersion: u32, SDKPath: *u8) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12SDKConfiguration) -> *ID3D12SDKConfiguration_VTable { return obj.id3d12sdkconfiguration_vtable; }



ID3D12SDKConfiguration1_UUID :: "8aaf9303-ad25-48b9-9a57-d9c37e009d9f";
ID3D12SDKConfiguration1 :: struct {
    #as using id3d12sdkconfiguration: ID3D12SDKConfiguration;
    #place id3d12sdkconfiguration; id3d12sdkconfiguration1_vtable: *ID3D12SDKConfiguration1_VTable;
}
ID3D12SDKConfiguration1_VTable :: struct #type_info_none {
    using id3d12sdkconfiguration: ID3D12SDKConfiguration_VTable;
    CreateDeviceFactory: (this: *ID3D12SDKConfiguration1, SDKVersion: u32, SDKPath: *u8, riid: *IID, ppvFactory: **void) -> HRESULT #cpp_method;
    FreeUnusedSDKs: (this: *ID3D12SDKConfiguration1) -> void #cpp_method;
}
vtable :: (obj: *ID3D12SDKConfiguration1) -> *ID3D12SDKConfiguration1_VTable { return obj.id3d12sdkconfiguration1_vtable; }


/* interface __MIDL_itf_d3d12_0000_0059 */
/* [local] */
D3D12_DEVICE_FACTORY_FLAGS :: enum_flags u32 {
    NONE                                         :: 0x0;
    ALLOW_RETURNING_EXISTING_DEVICE              :: 0x1;
    ALLOW_RETURNING_INCOMPATIBLE_EXISTING_DEVICE :: 0x2;
    DISALLOW_STORING_NEW_DEVICE_AS_SINGLETON     :: 0x4;

    D3D12_DEVICE_FACTORY_FLAG_NONE                                         :: NONE;
    D3D12_DEVICE_FACTORY_FLAG_ALLOW_RETURNING_EXISTING_DEVICE              :: ALLOW_RETURNING_EXISTING_DEVICE;
    D3D12_DEVICE_FACTORY_FLAG_ALLOW_RETURNING_INCOMPATIBLE_EXISTING_DEVICE :: ALLOW_RETURNING_INCOMPATIBLE_EXISTING_DEVICE;
    D3D12_DEVICE_FACTORY_FLAG_DISALLOW_STORING_NEW_DEVICE_AS_SINGLETON     :: DISALLOW_STORING_NEW_DEVICE_AS_SINGLETON;
}


ID3D12DeviceFactory_UUID :: "61f307d3-d34e-4e7c-8374-3ba4de23cccb";
ID3D12DeviceFactory :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12devicefactory_vtable: *ID3D12DeviceFactory_VTable;
}
ID3D12DeviceFactory_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    InitializeFromGlobalState: (this: *ID3D12DeviceFactory) -> HRESULT #cpp_method;
    ApplyToGlobalState: (this: *ID3D12DeviceFactory) -> HRESULT #cpp_method;
    SetFlags: (this: *ID3D12DeviceFactory, flags: D3D12_DEVICE_FACTORY_FLAGS) -> HRESULT #cpp_method;
    GetFlags: (this: *ID3D12DeviceFactory) -> D3D12_DEVICE_FACTORY_FLAGS #cpp_method;
    GetConfigurationInterface: (this: *ID3D12DeviceFactory, clsid: *IID, iid: *IID, ppv: **void) -> HRESULT #cpp_method;
    EnableExperimentalFeatures: (this: *ID3D12DeviceFactory, NumFeatures: u32, pIIDs: *IID, pConfigurationStructs: *void, pConfigurationStructSizes: *u32) -> HRESULT #cpp_method;
    CreateDevice: (this: *ID3D12DeviceFactory, adapter: *IUnknown, FeatureLevel: D3D_FEATURE_LEVEL, riid: *IID, ppvDevice: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12DeviceFactory) -> *ID3D12DeviceFactory_VTable { return obj.id3d12devicefactory_vtable; }


/* interface __MIDL_itf_d3d12_0000_0060 */
/* [local] */
D3D12_DEVICE_FLAGS :: enum_flags u32 {
    NONE                                           :: 0x0;
    DEBUG_LAYER_ENABLED                            :: 0x1;
    GPU_BASED_VALIDATION_ENABLED                   :: 0x2;
    SYNCHRONIZED_COMMAND_QUEUE_VALIDATION_DISABLED :: 0x4;
    DRED_AUTO_BREADCRUMBS_ENABLED                  :: 0x8;
    DRED_PAGE_FAULT_REPORTING_ENABLED              :: 0x10;
    DRED_WATSON_REPORTING_ENABLED                  :: 0x20;
    DRED_BREADCRUMB_CONTEXT_ENABLED                :: 0x40;
    DRED_USE_MARKERS_ONLY_BREADCRUMBS              :: 0x80;
    SHADER_INSTRUMENTATION_ENABLED                 :: 0x100;
    AUTO_DEBUG_NAME_ENABLED                        :: 0x200;
    FORCE_LEGACY_STATE_VALIDATION                  :: 0x400;

    D3D12_DEVICE_FLAG_NONE                                           :: NONE;
    D3D12_DEVICE_FLAG_DEBUG_LAYER_ENABLED                            :: DEBUG_LAYER_ENABLED;
    D3D12_DEVICE_FLAG_GPU_BASED_VALIDATION_ENABLED                   :: GPU_BASED_VALIDATION_ENABLED;
    D3D12_DEVICE_FLAG_SYNCHRONIZED_COMMAND_QUEUE_VALIDATION_DISABLED :: SYNCHRONIZED_COMMAND_QUEUE_VALIDATION_DISABLED;
    D3D12_DEVICE_FLAG_DRED_AUTO_BREADCRUMBS_ENABLED                  :: DRED_AUTO_BREADCRUMBS_ENABLED;
    D3D12_DEVICE_FLAG_DRED_PAGE_FAULT_REPORTING_ENABLED              :: DRED_PAGE_FAULT_REPORTING_ENABLED;
    D3D12_DEVICE_FLAG_DRED_WATSON_REPORTING_ENABLED                  :: DRED_WATSON_REPORTING_ENABLED;
    D3D12_DEVICE_FLAG_DRED_BREADCRUMB_CONTEXT_ENABLED                :: DRED_BREADCRUMB_CONTEXT_ENABLED;
    D3D12_DEVICE_FLAG_DRED_USE_MARKERS_ONLY_BREADCRUMBS              :: DRED_USE_MARKERS_ONLY_BREADCRUMBS;
    D3D12_DEVICE_FLAG_SHADER_INSTRUMENTATION_ENABLED                 :: SHADER_INSTRUMENTATION_ENABLED;
    D3D12_DEVICE_FLAG_AUTO_DEBUG_NAME_ENABLED                        :: AUTO_DEBUG_NAME_ENABLED;
    D3D12_DEVICE_FLAG_FORCE_LEGACY_STATE_VALIDATION                  :: FORCE_LEGACY_STATE_VALIDATION;
}

D3D12_DEVICE_CONFIGURATION_DESC :: struct {
    Flags:                          D3D12_DEVICE_FLAGS;
    GpuBasedValidationFlags:        u32;
    SDKVersion:                     u32;
    NumEnabledExperimentalFeatures: u32;
}


ID3D12DeviceConfiguration_UUID :: "78dbf87b-f766-422b-a61c-c8c446bdb9ad";
ID3D12DeviceConfiguration :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12deviceconfiguration_vtable: *ID3D12DeviceConfiguration_VTable;
}
ID3D12DeviceConfiguration_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    GetDesc: (this: *ID3D12DeviceConfiguration) -> D3D12_DEVICE_CONFIGURATION_DESC #cpp_method;
    GetEnabledExperimentalFeatures: (this: *ID3D12DeviceConfiguration, pGuids: *GUID, NumGuids: u32) -> HRESULT #cpp_method;
    SerializeVersionedRootSignature: (this: *ID3D12DeviceConfiguration, pDesc: *D3D12_VERSIONED_ROOT_SIGNATURE_DESC, ppResult: **ID3DBlob, ppError: **ID3DBlob) -> HRESULT #cpp_method;
    CreateVersionedRootSignatureDeserializer: (this: *ID3D12DeviceConfiguration, pBlob: *void, Size: SIZE_T, riid: *IID, ppvDeserializer: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12DeviceConfiguration) -> *ID3D12DeviceConfiguration_VTable { return obj.id3d12deviceconfiguration_vtable; }


/* interface __MIDL_itf_d3d12_0000_0061 */
/* [local] */
D3D12_AXIS_SHADING_RATE :: enum s32 {
    _1X :: 0;
    _2X :: 1;
    _4X :: 2;

    D3D12_AXIS_SHADING_RATE_1X :: _1X;
    D3D12_AXIS_SHADING_RATE_2X :: _2X;
    D3D12_AXIS_SHADING_RATE_4X :: _4X;
}

D3D12_SHADING_RATE :: enum s32 {
    _1X1 :: 0;
    _1X2 :: 1;
    _2X1 :: 4;
    _2X2 :: 5;
    _2X4 :: 6;
    _4X2 :: 9;
    _4X4 :: 10;

    D3D12_SHADING_RATE_1X1 :: _1X1;
    D3D12_SHADING_RATE_1X2 :: _1X2;
    D3D12_SHADING_RATE_2X1 :: _2X1;
    D3D12_SHADING_RATE_2X2 :: _2X2;
    D3D12_SHADING_RATE_2X4 :: _2X4;
    D3D12_SHADING_RATE_4X2 :: _4X2;
    D3D12_SHADING_RATE_4X4 :: _4X4;
}

D3D12_SHADING_RATE_COMBINER :: enum s32 {
    PASSTHROUGH :: 0;
    OVERRIDE    :: 1;
    MIN         :: 2;
    MAX         :: 3;
    SUM         :: 4;

    D3D12_SHADING_RATE_COMBINER_PASSTHROUGH :: PASSTHROUGH;
    D3D12_SHADING_RATE_COMBINER_OVERRIDE    :: OVERRIDE;
    D3D12_SHADING_RATE_COMBINER_MIN         :: MIN;
    D3D12_SHADING_RATE_COMBINER_MAX         :: MAX;
    D3D12_SHADING_RATE_COMBINER_SUM         :: SUM;
}


ID3D12GraphicsCommandList5_UUID :: "55050859-4024-474c-87f5-6472eaee44ea";
ID3D12GraphicsCommandList5 :: struct {
    #as using id3d12graphicscommandlist4: ID3D12GraphicsCommandList4;
    #place id3d12graphicscommandlist4; id3d12graphicscommandlist5_vtable: *ID3D12GraphicsCommandList5_VTable;
}
ID3D12GraphicsCommandList5_VTable :: struct #type_info_none {
    using id3d12graphicscommandlist4: ID3D12GraphicsCommandList4_VTable;
    RSSetShadingRate: (this: *ID3D12GraphicsCommandList5, baseShadingRate: D3D12_SHADING_RATE, combiners: *D3D12_SHADING_RATE_COMBINER) -> void #cpp_method;
    RSSetShadingRateImage: (this: *ID3D12GraphicsCommandList5, shadingRateImage: *ID3D12Resource) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList5) -> *ID3D12GraphicsCommandList5_VTable { return obj.id3d12graphicscommandlist5_vtable; }


/* interface __MIDL_itf_d3d12_0000_0062 */
/* [local] */
D3D12_DISPATCH_MESH_ARGUMENTS :: struct {
    ThreadGroupCountX: u32;
    ThreadGroupCountY: u32;
    ThreadGroupCountZ: u32;
}


ID3D12GraphicsCommandList6_UUID :: "c3827890-e548-4cfa-96cf-5689a9370f80";
ID3D12GraphicsCommandList6 :: struct {
    #as using id3d12graphicscommandlist5: ID3D12GraphicsCommandList5;
    #place id3d12graphicscommandlist5; id3d12graphicscommandlist6_vtable: *ID3D12GraphicsCommandList6_VTable;
}
ID3D12GraphicsCommandList6_VTable :: struct #type_info_none {
    using id3d12graphicscommandlist5: ID3D12GraphicsCommandList5_VTable;
    DispatchMesh: (this: *ID3D12GraphicsCommandList6, ThreadGroupCountX: u32, ThreadGroupCountY: u32, ThreadGroupCountZ: u32) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList6) -> *ID3D12GraphicsCommandList6_VTable { return obj.id3d12graphicscommandlist6_vtable; }



ID3D12GraphicsCommandList7_UUID :: "dd171223-8b61-4769-90e3-160ccde4e2c1";
ID3D12GraphicsCommandList7 :: struct {
    #as using id3d12graphicscommandlist6: ID3D12GraphicsCommandList6;
    #place id3d12graphicscommandlist6; id3d12graphicscommandlist7_vtable: *ID3D12GraphicsCommandList7_VTable;
}
ID3D12GraphicsCommandList7_VTable :: struct #type_info_none {
    using id3d12graphicscommandlist6: ID3D12GraphicsCommandList6_VTable;
    Barrier: (this: *ID3D12GraphicsCommandList7, NumBarrierGroups: u32, pBarrierGroups: *D3D12_BARRIER_GROUP) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList7) -> *ID3D12GraphicsCommandList7_VTable { return obj.id3d12graphicscommandlist7_vtable; }



ID3D12GraphicsCommandList8_UUID :: "ee936ef9-599d-4d28-938e-23c4ad05ce51";
ID3D12GraphicsCommandList8 :: struct {
    #as using id3d12graphicscommandlist7: ID3D12GraphicsCommandList7;
    #place id3d12graphicscommandlist7; id3d12graphicscommandlist8_vtable: *ID3D12GraphicsCommandList8_VTable;
}
ID3D12GraphicsCommandList8_VTable :: struct #type_info_none {
    using id3d12graphicscommandlist7: ID3D12GraphicsCommandList7_VTable;
    OMSetFrontAndBackStencilRef: (this: *ID3D12GraphicsCommandList8, FrontStencilRef: u32, BackStencilRef: u32) -> void #cpp_method;
}
vtable :: (obj: *ID3D12GraphicsCommandList8) -> *ID3D12GraphicsCommandList8_VTable { return obj.id3d12graphicscommandlist8_vtable; }


D3D12_VIDEO_FIELD_TYPE :: enum s32 {
    NONE                          :: 0;
    INTERLACED_TOP_FIELD_FIRST    :: 1;
    INTERLACED_BOTTOM_FIELD_FIRST :: 2;

    D3D12_VIDEO_FIELD_TYPE_NONE                          :: NONE;
    D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST    :: INTERLACED_TOP_FIELD_FIRST;
    D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST :: INTERLACED_BOTTOM_FIELD_FIRST;
}

D3D12_VIDEO_FRAME_STEREO_FORMAT :: enum s32 {
    NONE       :: 0;
    MONO       :: 1;
    HORIZONTAL :: 2;
    VERTICAL   :: 3;
    SEPARATE   :: 4;

    D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE       :: NONE;
    D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO       :: MONO;
    D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL :: HORIZONTAL;
    D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL   :: VERTICAL;
    D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE   :: SEPARATE;
}

D3D12_VIDEO_FORMAT :: struct {
    Format:     DXGI_FORMAT;
    ColorSpace: DXGI_COLOR_SPACE_TYPE;
}

D3D12_VIDEO_SAMPLE :: struct {
    Width:  u32;
    Height: u32;
    Format: D3D12_VIDEO_FORMAT;
}

D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE :: enum s32 {
    NONE        :: 0;
    FIELD_BASED :: 1;

    D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE        :: NONE;
    D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED :: FIELD_BASED;
}

D3D12_FEATURE_VIDEO :: enum s32 {
    DECODE_SUPPORT                         :: 0;
    DECODE_PROFILES                        :: 1;
    DECODE_FORMATS                         :: 2;
    DECODE_CONVERSION_SUPPORT              :: 3;
    PROCESS_SUPPORT                        :: 5;
    PROCESS_MAX_INPUT_STREAMS              :: 6;
    PROCESS_REFERENCE_INFO                 :: 7;
    DECODER_HEAP_SIZE                      :: 8;
    PROCESSOR_SIZE                         :: 9;
    DECODE_PROFILE_COUNT                   :: 10;
    DECODE_FORMAT_COUNT                    :: 11;
    ARCHITECTURE                           :: 17;
    DECODE_HISTOGRAM                       :: 18;
    FEATURE_AREA_SUPPORT                   :: 19;
    MOTION_ESTIMATOR                       :: 20;
    MOTION_ESTIMATOR_SIZE                  :: 21;
    EXTENSION_COMMAND_COUNT                :: 22;
    EXTENSION_COMMANDS                     :: 23;
    EXTENSION_COMMAND_PARAMETER_COUNT      :: 24;
    EXTENSION_COMMAND_PARAMETERS           :: 25;
    EXTENSION_COMMAND_SUPPORT              :: 26;
    EXTENSION_COMMAND_SIZE                 :: 27;
    DECODE_PROTECTED_RESOURCES             :: 28;
    PROCESS_PROTECTED_RESOURCES            :: 29;
    MOTION_ESTIMATOR_PROTECTED_RESOURCES   :: 30;
    DECODER_HEAP_SIZE1                     :: 31;
    PROCESSOR_SIZE1                        :: 32;
    ENCODER_CODEC                          :: 33;
    ENCODER_PROFILE_LEVEL                  :: 34;
    ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT :: 35;
    ENCODER_OUTPUT_RESOLUTION              :: 36;
    ENCODER_INPUT_FORMAT                   :: 37;
    ENCODER_RATE_CONTROL_MODE              :: 38;
    ENCODER_INTRA_REFRESH_MODE             :: 39;
    ENCODER_FRAME_SUBREGION_LAYOUT_MODE    :: 40;
    ENCODER_HEAP_SIZE                      :: 41;
    ENCODER_CODEC_CONFIGURATION_SUPPORT    :: 42;
    ENCODER_SUPPORT                        :: 43;
    ENCODER_CODEC_PICTURE_CONTROL_SUPPORT  :: 44;
    ENCODER_RESOURCE_REQUIREMENTS          :: 45;

    D3D12_FEATURE_VIDEO_DECODE_SUPPORT                         :: DECODE_SUPPORT;
    D3D12_FEATURE_VIDEO_DECODE_PROFILES                        :: DECODE_PROFILES;
    D3D12_FEATURE_VIDEO_DECODE_FORMATS                         :: DECODE_FORMATS;
    D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT              :: DECODE_CONVERSION_SUPPORT;
    D3D12_FEATURE_VIDEO_PROCESS_SUPPORT                        :: PROCESS_SUPPORT;
    D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS              :: PROCESS_MAX_INPUT_STREAMS;
    D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO                 :: PROCESS_REFERENCE_INFO;
    D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE                      :: DECODER_HEAP_SIZE;
    D3D12_FEATURE_VIDEO_PROCESSOR_SIZE                         :: PROCESSOR_SIZE;
    D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT                   :: DECODE_PROFILE_COUNT;
    D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT                    :: DECODE_FORMAT_COUNT;
    D3D12_FEATURE_VIDEO_ARCHITECTURE                           :: ARCHITECTURE;
    D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM                       :: DECODE_HISTOGRAM;
    D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT                   :: FEATURE_AREA_SUPPORT;
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR                       :: MOTION_ESTIMATOR;
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE                  :: MOTION_ESTIMATOR_SIZE;
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT                :: EXTENSION_COMMAND_COUNT;
    D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS                     :: EXTENSION_COMMANDS;
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT      :: EXTENSION_COMMAND_PARAMETER_COUNT;
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS           :: EXTENSION_COMMAND_PARAMETERS;
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT              :: EXTENSION_COMMAND_SUPPORT;
    D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE                 :: EXTENSION_COMMAND_SIZE;
    D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES             :: DECODE_PROTECTED_RESOURCES;
    D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES            :: PROCESS_PROTECTED_RESOURCES;
    D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES   :: MOTION_ESTIMATOR_PROTECTED_RESOURCES;
    D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1                     :: DECODER_HEAP_SIZE1;
    D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1                        :: PROCESSOR_SIZE1;
    D3D12_FEATURE_VIDEO_ENCODER_CODEC                          :: ENCODER_CODEC;
    D3D12_FEATURE_VIDEO_ENCODER_PROFILE_LEVEL                  :: ENCODER_PROFILE_LEVEL;
    D3D12_FEATURE_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT :: ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT;
    D3D12_FEATURE_VIDEO_ENCODER_OUTPUT_RESOLUTION              :: ENCODER_OUTPUT_RESOLUTION;
    D3D12_FEATURE_VIDEO_ENCODER_INPUT_FORMAT                   :: ENCODER_INPUT_FORMAT;
    D3D12_FEATURE_VIDEO_ENCODER_RATE_CONTROL_MODE              :: ENCODER_RATE_CONTROL_MODE;
    D3D12_FEATURE_VIDEO_ENCODER_INTRA_REFRESH_MODE             :: ENCODER_INTRA_REFRESH_MODE;
    D3D12_FEATURE_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE    :: ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    D3D12_FEATURE_VIDEO_ENCODER_HEAP_SIZE                      :: ENCODER_HEAP_SIZE;
    D3D12_FEATURE_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT    :: ENCODER_CODEC_CONFIGURATION_SUPPORT;
    D3D12_FEATURE_VIDEO_ENCODER_SUPPORT                        :: ENCODER_SUPPORT;
    D3D12_FEATURE_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT  :: ENCODER_CODEC_PICTURE_CONTROL_SUPPORT;
    D3D12_FEATURE_VIDEO_ENCODER_RESOURCE_REQUIREMENTS          :: ENCODER_RESOURCE_REQUIREMENTS;
}

D3D12_BITSTREAM_ENCRYPTION_TYPE :: enum s32 {
    NONE :: 0;
    D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE :: NONE;
}

D3D12_VIDEO_DECODE_CONFIGURATION :: struct {
    DecodeProfile:       GUID;
    BitstreamEncryption: D3D12_BITSTREAM_ENCRYPTION_TYPE;
    InterlaceType:       D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE;
}

D3D12_VIDEO_DECODER_DESC :: struct {
    NodeMask:      u32;
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;
}

D3D12_VIDEO_DECODER_HEAP_DESC :: struct {
    NodeMask:                    u32;
    Configuration:               D3D12_VIDEO_DECODE_CONFIGURATION;
    DecodeWidth:                 u32;
    DecodeHeight:                u32;
    Format:                      DXGI_FORMAT;
    FrameRate:                   DXGI_RATIONAL;
    BitRate:                     u32;
    MaxDecodePictureBufferCount: u32;
}

D3D12_VIDEO_SIZE_RANGE :: struct {
    MaxWidth:  u32;
    MaxHeight: u32;
    MinWidth:  u32;
    MinHeight: u32;
}

D3D12_VIDEO_PROCESS_FILTER :: enum s32 {
    BRIGHTNESS         :: 0;
    CONTRAST           :: 1;
    HUE                :: 2;
    SATURATION         :: 3;
    NOISE_REDUCTION    :: 4;
    EDGE_ENHANCEMENT   :: 5;
    ANAMORPHIC_SCALING :: 6;
    STEREO_ADJUSTMENT  :: 7;

    D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS         :: BRIGHTNESS;
    D3D12_VIDEO_PROCESS_FILTER_CONTRAST           :: CONTRAST;
    D3D12_VIDEO_PROCESS_FILTER_HUE                :: HUE;
    D3D12_VIDEO_PROCESS_FILTER_SATURATION         :: SATURATION;
    D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION    :: NOISE_REDUCTION;
    D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT   :: EDGE_ENHANCEMENT;
    D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING :: ANAMORPHIC_SCALING;
    D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT  :: STEREO_ADJUSTMENT;
}

D3D12_VIDEO_PROCESS_FILTER_FLAGS :: enum_flags u32 {
    NONE               :: 0x0;
    BRIGHTNESS         :: 0x1;
    CONTRAST           :: 0x2;
    HUE                :: 0x4;
    SATURATION         :: 0x8;
    NOISE_REDUCTION    :: 0x10;
    EDGE_ENHANCEMENT   :: 0x20;
    ANAMORPHIC_SCALING :: 0x40;
    STEREO_ADJUSTMENT  :: 0x80;

    D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE               :: NONE;
    D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS         :: BRIGHTNESS;
    D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST           :: CONTRAST;
    D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE                :: HUE;
    D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION         :: SATURATION;
    D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION    :: NOISE_REDUCTION;
    D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT   :: EDGE_ENHANCEMENT;
    D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING :: ANAMORPHIC_SCALING;
    D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT  :: STEREO_ADJUSTMENT;
}

D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS :: enum_flags u32 {
    NONE   :: 0x0;
    BOB    :: 0x1;
    CUSTOM :: 0x80000000;

    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE   :: NONE;
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB    :: BOB;
    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM :: CUSTOM;
}

D3D12_VIDEO_PROCESS_ALPHA_BLENDING :: struct {
    Enable: BOOL;
    Alpha:  float;
}

D3D12_VIDEO_PROCESS_LUMA_KEY :: struct {
    Enable: BOOL;
    Lower:  float;
    Upper:  float;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC :: struct {
    Format:                 DXGI_FORMAT;
    ColorSpace:             DXGI_COLOR_SPACE_TYPE;
    SourceAspectRatio:      DXGI_RATIONAL;
    DestinationAspectRatio: DXGI_RATIONAL;
    FrameRate:              DXGI_RATIONAL;
    SourceSizeRange:        D3D12_VIDEO_SIZE_RANGE;
    DestinationSizeRange:   D3D12_VIDEO_SIZE_RANGE;
    EnableOrientation:      BOOL;
    FilterFlags:            D3D12_VIDEO_PROCESS_FILTER_FLAGS;
    StereoFormat:           D3D12_VIDEO_FRAME_STEREO_FORMAT;
    FieldType:              D3D12_VIDEO_FIELD_TYPE;
    DeinterlaceMode:        D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
    EnableAlphaBlending:    BOOL;
    LumaKey:                D3D12_VIDEO_PROCESS_LUMA_KEY;
    NumPastFrames:          u32;
    NumFutureFrames:        u32;
    EnableAutoProcessing:   BOOL;
}

D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE :: enum s32 {
    OPAQUE        :: 0;
    BACKGROUND    :: 1;
    DESTINATION   :: 2;
    SOURCE_STREAM :: 3;

    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE        :: OPAQUE;
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND    :: BACKGROUND;
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION   :: DESTINATION;
    D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM :: SOURCE_STREAM;
}

D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC :: struct {
    Format:                         DXGI_FORMAT;
    ColorSpace:                     DXGI_COLOR_SPACE_TYPE;
    AlphaFillMode:                  D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE;
    AlphaFillModeSourceStreamIndex: u32;
    BackgroundColor:                [4] float;
    FrameRate:                      DXGI_RATIONAL;
    EnableStereo:                   BOOL;
}


ID3D12VideoDecoderHeap_UUID :: "0946B7C9-EBF6-4047-BB73-8683E27DBB1F";
ID3D12VideoDecoderHeap :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12videodecoderheap_vtable: *ID3D12VideoDecoderHeap_VTable;
}
ID3D12VideoDecoderHeap_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetDesc: (this: *ID3D12VideoDecoderHeap) -> D3D12_VIDEO_DECODER_HEAP_DESC #cpp_method;
}
vtable :: (obj: *ID3D12VideoDecoderHeap) -> *ID3D12VideoDecoderHeap_VTable { return obj.id3d12videodecoderheap_vtable; }



ID3D12VideoDevice_UUID :: "1F052807-0B46-4ACC-8A89-364F793718A4";
ID3D12VideoDevice :: struct {
    #as using iunknown: IUnknown;
    #place iunknown; id3d12videodevice_vtable: *ID3D12VideoDevice_VTable;
}
ID3D12VideoDevice_VTable :: struct #type_info_none {
    using iunknown: IUnknown_VTable;
    CheckFeatureSupport: (this: *ID3D12VideoDevice, FeatureVideo: D3D12_FEATURE_VIDEO, pFeatureSupportData: *void, FeatureSupportDataSize: u32) -> HRESULT #cpp_method;
    CreateVideoDecoder: (this: *ID3D12VideoDevice, pDesc: *D3D12_VIDEO_DECODER_DESC, riid: *IID, ppVideoDecoder: **void) -> HRESULT #cpp_method;
    CreateVideoDecoderHeap: (this: *ID3D12VideoDevice, pVideoDecoderHeapDesc: *D3D12_VIDEO_DECODER_HEAP_DESC, riid: *IID, ppVideoDecoderHeap: **void) -> HRESULT #cpp_method;
    CreateVideoProcessor: (this: *ID3D12VideoDevice, NodeMask: u32, pOutputStreamDesc: *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, NumInputStreamDescs: u32, pInputStreamDescs: *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, riid: *IID, ppVideoProcessor: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoDevice) -> *ID3D12VideoDevice_VTable { return obj.id3d12videodevice_vtable; }



ID3D12VideoDecoder_UUID :: "C59B6BDC-7720-4074-A136-17A156037470";
ID3D12VideoDecoder :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12videodecoder_vtable: *ID3D12VideoDecoder_VTable;
}
ID3D12VideoDecoder_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetDesc: (this: *ID3D12VideoDecoder) -> D3D12_VIDEO_DECODER_DESC #cpp_method;
}
vtable :: (obj: *ID3D12VideoDecoder) -> *ID3D12VideoDecoder_VTable { return obj.id3d12videodecoder_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0003 */
/* [local] */
D3D12_VIDEO_DECODE_TIER :: enum s32 {
    NOT_SUPPORTED :: 0;
    _1            :: 1;
    _2            :: 2;
    _3            :: 3;

    D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED :: NOT_SUPPORTED;
    D3D12_VIDEO_DECODE_TIER_1             :: _1;
    D3D12_VIDEO_DECODE_TIER_2             :: _2;
    D3D12_VIDEO_DECODE_TIER_3             :: _3;
}

D3D12_VIDEO_DECODE_SUPPORT_FLAGS :: enum_flags u32 {
    NONE      :: 0x0;
    SUPPORTED :: 0x1;

    D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE      :: NONE;
    D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED :: SUPPORTED;
}

D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS :: enum_flags u32 {
    NONE                                     :: 0x0;
    HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED    :: 0x1;
    POST_PROCESSING_SUPPORTED                :: 0x2;
    REFERENCE_ONLY_ALLOCATIONS_REQUIRED      :: 0x4;
    ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME :: 0x8;

    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE                                     :: NONE;
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED    :: HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED;
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED                :: POST_PROCESSING_SUPPORTED;
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED      :: REFERENCE_ONLY_ALLOCATIONS_REQUIRED;
    D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME :: ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME;
}

D3D12_VIDEO_DECODE_STATUS :: enum s32 {
    OK                    :: 0;
    CONTINUE              :: 1;
    CONTINUE_SKIP_DISPLAY :: 2;
    RESTART               :: 3;
    RATE_EXCEEDED         :: 4;

    D3D12_VIDEO_DECODE_STATUS_OK                    :: OK;
    D3D12_VIDEO_DECODE_STATUS_CONTINUE              :: CONTINUE;
    D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY :: CONTINUE_SKIP_DISPLAY;
    D3D12_VIDEO_DECODE_STATUS_RESTART               :: RESTART;
    D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED         :: RATE_EXCEEDED;
}

D3D12_VIDEO_DECODE_ARGUMENT_TYPE :: enum s32 {
    PICTURE_PARAMETERS          :: 0;
    INVERSE_QUANTIZATION_MATRIX :: 1;
    SLICE_CONTROL               :: 2;
    MAX_VALID                   :: 3;

    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS          :: PICTURE_PARAMETERS;
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX :: INVERSE_QUANTIZATION_MATRIX;
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL               :: SLICE_CONTROL;
    D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID                   :: MAX_VALID;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT :: struct {
    NodeIndex:          u32;
    Configuration:      D3D12_VIDEO_DECODE_CONFIGURATION;
    Width:              u32;
    Height:             u32;
    DecodeFormat:       DXGI_FORMAT;
    FrameRate:          DXGI_RATIONAL;
    BitRate:            u32;
    SupportFlags:       D3D12_VIDEO_DECODE_SUPPORT_FLAGS;
    ConfigurationFlags: D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS;
    DecodeTier:         D3D12_VIDEO_DECODE_TIER;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT :: struct {
    NodeIndex:    u32;
    ProfileCount: u32;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES :: struct {
    NodeIndex:    u32;
    ProfileCount: u32;
    pProfiles:    *GUID;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT :: struct {
    NodeIndex:     u32;
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;
    FormatCount:   u32;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS :: struct {
    NodeIndex:      u32;
    Configuration:  D3D12_VIDEO_DECODE_CONFIGURATION;
    FormatCount:    u32;
    pOutputFormats: *DXGI_FORMAT;
}

D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE :: struct {
    IOCoherent: BOOL;
}

D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT :: enum s32 {
    Y :: 0;
    U :: 1;
    V :: 2;
    R :: 0;
    G :: 1;
    B :: 2;
    A :: 3;

    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y :: Y;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U :: U;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V :: V;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R :: R;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G :: G;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B :: B;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A :: A;
}

D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS :: enum_flags u32 {
    NONE :: 0x0;
    Y    :: 0x1;
    U    :: 0x2;
    V    :: 0x4;
    R    :: 0x1;
    G    :: 0x2;
    B    :: 0x4;
    A    :: 0x8;

    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE :: NONE;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y    :: Y;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U    :: U;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V    :: V;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R    :: R;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G    :: G;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B    :: B;
    D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A    :: A;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM :: struct {
    NodeIndex:       u32;
    DecodeProfile:   GUID;
    Width:           u32;
    Height:          u32;
    DecodeFormat:    DXGI_FORMAT;
    Components:      D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS;
    BinCount:        u32;
    CounterBitDepth: u32;
}

D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS :: enum_flags u32 {
    NONE      :: 0x0;
    SUPPORTED :: 0x1;

    D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE      :: NONE;
    D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED :: SUPPORTED;
}

D3D12_VIDEO_SCALE_SUPPORT_FLAGS :: enum_flags u32 {
    NONE                 :: 0x0;
    POW2_ONLY            :: 0x1;
    EVEN_DIMENSIONS_ONLY :: 0x2;

    D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE                 :: NONE;
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY            :: POW2_ONLY;
    D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY :: EVEN_DIMENSIONS_ONLY;
}

D3D12_VIDEO_SCALE_SUPPORT :: struct {
    OutputSizeRange: D3D12_VIDEO_SIZE_RANGE;
    Flags:           D3D12_VIDEO_SCALE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT :: struct {
    NodeIndex:     u32;
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;
    DecodeSample:  D3D12_VIDEO_SAMPLE;
    OutputFormat:  D3D12_VIDEO_FORMAT;
    FrameRate:     DXGI_RATIONAL;
    BitRate:       u32;
    SupportFlags:  D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS;
    ScaleSupport:  D3D12_VIDEO_SCALE_SUPPORT;
}

D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE :: struct {
    VideoDecoderHeapDesc: D3D12_VIDEO_DECODER_HEAP_DESC;
    MemoryPoolL0Size:     u64;
    MemoryPoolL1Size:     u64;
}

D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE :: struct {
    NodeMask:            u32;
    pOutputStreamDesc:   *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;
    NumInputStreamDescs: u32;
    pInputStreamDescs:   *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC;
    MemoryPoolL0Size:    u64;
    MemoryPoolL1Size:    u64;
}

D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS :: struct {
    Status:                 u64;
    NumMacroblocksAffected: u64;
    FrameRate:              DXGI_RATIONAL;
    BitRate:                u32;
}

D3D12_VIDEO_DECODE_FRAME_ARGUMENT :: struct {
    Type:  D3D12_VIDEO_DECODE_ARGUMENT_TYPE;
    Size:  u32;
    pData: *void;
}

D3D12_VIDEO_DECODE_REFERENCE_FRAMES :: struct {
    NumTexture2Ds: u32;
    ppTexture2Ds:  **ID3D12Resource;
    pSubresources: *u32;
    ppHeaps:       **ID3D12VideoDecoderHeap;
}

D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM :: struct {
    pBuffer: *ID3D12Resource;
    Offset:  u64;
    Size:    u64;
}

D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS :: struct {
    Enable:               BOOL;
    pReferenceTexture2D:  *ID3D12Resource;
    ReferenceSubresource: u32;
    OutputColorSpace:     DXGI_COLOR_SPACE_TYPE;
    DecodeColorSpace:     DXGI_COLOR_SPACE_TYPE;
}

D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS :: struct {
    NumFrameArguments:   u32;
    FrameArguments:      [10] D3D12_VIDEO_DECODE_FRAME_ARGUMENT;
    ReferenceFrames:     D3D12_VIDEO_DECODE_REFERENCE_FRAMES;
    CompressedBitstream: D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM;
    pHeap:               *ID3D12VideoDecoderHeap;
}

D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS :: struct {
    pOutputTexture2D:    *ID3D12Resource;
    OutputSubresource:   u32;
    ConversionArguments: D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS;
}


ID3D12VideoProcessor_UUID :: "304FDB32-BEDE-410A-8545-943AC6A46138";
ID3D12VideoProcessor :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12videoprocessor_vtable: *ID3D12VideoProcessor_VTable;
}
ID3D12VideoProcessor_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetNodeMask: (this: *ID3D12VideoProcessor) -> u32 #cpp_method;
    GetNumInputStreamDescs: (this: *ID3D12VideoProcessor) -> u32 #cpp_method;
    GetInputStreamDescs: (this: *ID3D12VideoProcessor, NumInputStreamDescs: u32, pInputStreamDescs: *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC) -> HRESULT #cpp_method;
    GetOutputStreamDesc: (this: *ID3D12VideoProcessor) -> D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC #cpp_method;
}
vtable :: (obj: *ID3D12VideoProcessor) -> *ID3D12VideoProcessor_VTable { return obj.id3d12videoprocessor_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0004 */
/* [local] */
D3D12_VIDEO_PROCESS_FEATURE_FLAGS :: enum_flags u32 {
    NONE               :: 0x0;
    ALPHA_FILL         :: 0x1;
    LUMA_KEY           :: 0x2;
    STEREO             :: 0x4;
    ROTATION           :: 0x8;
    FLIP               :: 0x10;
    ALPHA_BLENDING     :: 0x20;
    PIXEL_ASPECT_RATIO :: 0x40;

    D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE               :: NONE;
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL         :: ALPHA_FILL;
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY           :: LUMA_KEY;
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO             :: STEREO;
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION           :: ROTATION;
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP               :: FLIP;
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING     :: ALPHA_BLENDING;
    D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO :: PIXEL_ASPECT_RATIO;
}

D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS :: enum_flags u32 {
    NONE                :: 0x0;
    DENOISE             :: 0x1;
    DERINGING           :: 0x2;
    EDGE_ENHANCEMENT    :: 0x4;
    COLOR_CORRECTION    :: 0x8;
    FLESH_TONE_MAPPING  :: 0x10;
    IMAGE_STABILIZATION :: 0x20;
    SUPER_RESOLUTION    :: 0x40;
    ANAMORPHIC_SCALING  :: 0x80;
    CUSTOM              :: 0x80000000;

    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE                :: NONE;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE             :: DENOISE;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING           :: DERINGING;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT    :: EDGE_ENHANCEMENT;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION    :: COLOR_CORRECTION;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING  :: FLESH_TONE_MAPPING;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION :: IMAGE_STABILIZATION;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION    :: SUPER_RESOLUTION;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING  :: ANAMORPHIC_SCALING;
    D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM              :: CUSTOM;
}

D3D12_VIDEO_PROCESS_ORIENTATION :: enum s32 {
    DEFAULT                       :: 0;
    FLIP_HORIZONTAL               :: 1;
    CLOCKWISE_90                  :: 2;
    CLOCKWISE_90_FLIP_HORIZONTAL  :: 3;
    CLOCKWISE_180                 :: 4;
    FLIP_VERTICAL                 :: 5;
    CLOCKWISE_270                 :: 6;
    CLOCKWISE_270_FLIP_HORIZONTAL :: 7;

    D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT                       :: DEFAULT;
    D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL               :: FLIP_HORIZONTAL;
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90                  :: CLOCKWISE_90;
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL  :: CLOCKWISE_90_FLIP_HORIZONTAL;
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180                 :: CLOCKWISE_180;
    D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL                 :: FLIP_VERTICAL;
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270                 :: CLOCKWISE_270;
    D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL :: CLOCKWISE_270_FLIP_HORIZONTAL;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS :: enum_flags u32 {
    NONE                :: 0x0;
    FRAME_DISCONTINUITY :: 0x1;
    FRAME_REPEAT        :: 0x2;

    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE                :: NONE;
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY :: FRAME_DISCONTINUITY;
    D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT        :: FRAME_REPEAT;
}

D3D12_VIDEO_PROCESS_FILTER_RANGE :: struct {
    Minimum:    s32;
    Maximum:    s32;
    Default:    s32;
    Multiplier: float;
}

D3D12_VIDEO_PROCESS_SUPPORT_FLAGS :: enum_flags u32 {
    NONE      :: 0x0;
    SUPPORTED :: 0x1;

    D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE      :: NONE;
    D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED :: SUPPORTED;
}

D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT :: struct {
    NodeIndex:             u32;
    InputSample:           D3D12_VIDEO_SAMPLE;
    InputFieldType:        D3D12_VIDEO_FIELD_TYPE;
    InputStereoFormat:     D3D12_VIDEO_FRAME_STEREO_FORMAT;
    InputFrameRate:        DXGI_RATIONAL;
    OutputFormat:          D3D12_VIDEO_FORMAT;
    OutputStereoFormat:    D3D12_VIDEO_FRAME_STEREO_FORMAT;
    OutputFrameRate:       DXGI_RATIONAL;
    SupportFlags:          D3D12_VIDEO_PROCESS_SUPPORT_FLAGS;
    ScaleSupport:          D3D12_VIDEO_SCALE_SUPPORT;
    FeatureSupport:        D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
    DeinterlaceSupport:    D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
    AutoProcessingSupport: D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS;
    FilterSupport:         D3D12_VIDEO_PROCESS_FILTER_FLAGS;
    FilterRangeSupport:    [32] D3D12_VIDEO_PROCESS_FILTER_RANGE;
}

D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS :: struct {
    NodeIndex:       u32;
    MaxInputStreams: u32;
}

D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO :: struct {
    NodeIndex:            u32;
    DeinterlaceMode:      D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS;
    Filters:              D3D12_VIDEO_PROCESS_FILTER_FLAGS;
    FeatureSupport:       D3D12_VIDEO_PROCESS_FEATURE_FLAGS;
    InputFrameRate:       DXGI_RATIONAL;
    OutputFrameRate:      DXGI_RATIONAL;
    EnableAutoProcessing: BOOL;
    PastFrames:           u32;
    FutureFrames:         u32;
}

D3D12_VIDEO_PROCESS_REFERENCE_SET :: struct {
    NumPastFrames:       u32;
    ppPastFrames:        **ID3D12Resource;
    pPastSubresources:   *u32;
    NumFutureFrames:     u32;
    ppFutureFrames:      **ID3D12Resource;
    pFutureSubresources: *u32;
}

D3D12_VIDEO_PROCESS_TRANSFORM :: struct {
    SourceRectangle:      D3D12_RECT;
    DestinationRectangle: D3D12_RECT;
    Orientation:          D3D12_VIDEO_PROCESS_ORIENTATION;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE :: struct {
    OutputIndex:       u32;
    InputFrameOrField: u32;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM :: struct {
    pTexture2D:   *ID3D12Resource;
    Subresource:  u32;
    ReferenceSet: D3D12_VIDEO_PROCESS_REFERENCE_SET;
}

D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS :: struct {
    InputStream:   [2] D3D12_VIDEO_PROCESS_INPUT_STREAM;
    Transform:     D3D12_VIDEO_PROCESS_TRANSFORM;
    Flags:         D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
    RateInfo:      D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE;
    FilterLevels:  [32] s32;
    AlphaBlending: D3D12_VIDEO_PROCESS_ALPHA_BLENDING;
}

D3D12_VIDEO_PROCESS_OUTPUT_STREAM :: struct {
    pTexture2D:  *ID3D12Resource;
    Subresource: u32;
}

D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS :: struct {
    OutputStream:    [2] D3D12_VIDEO_PROCESS_OUTPUT_STREAM;
    TargetRectangle: D3D12_RECT;
}


ID3D12VideoDecodeCommandList_UUID :: "3B60536E-AD29-4E64-A269-F853837E5E53";
ID3D12VideoDecodeCommandList :: struct {
    #as using id3d12commandlist: ID3D12CommandList;
    #place id3d12commandlist; id3d12videodecodecommandlist_vtable: *ID3D12VideoDecodeCommandList_VTable;
}
ID3D12VideoDecodeCommandList_VTable :: struct #type_info_none {
    using id3d12commandlist: ID3D12CommandList_VTable;
    Close: (this: *ID3D12VideoDecodeCommandList) -> HRESULT #cpp_method;
    Reset: (this: *ID3D12VideoDecodeCommandList, pAllocator: *ID3D12CommandAllocator) -> HRESULT #cpp_method;
    ClearState: (this: *ID3D12VideoDecodeCommandList) -> void #cpp_method;
    ResourceBarrier: (this: *ID3D12VideoDecodeCommandList, NumBarriers: u32, pBarriers: *D3D12_RESOURCE_BARRIER) -> void #cpp_method;
    DiscardResource: (this: *ID3D12VideoDecodeCommandList, pResource: *ID3D12Resource, pRegion: *D3D12_DISCARD_REGION) -> void #cpp_method;
    BeginQuery: (this: *ID3D12VideoDecodeCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: u32) -> void #cpp_method;
    EndQuery: (this: *ID3D12VideoDecodeCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: u32) -> void #cpp_method;
    ResolveQueryData: (this: *ID3D12VideoDecodeCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, StartIndex: u32, NumQueries: u32, pDestinationBuffer: *ID3D12Resource, AlignedDestinationBufferOffset: u64) -> void #cpp_method;
    SetPredication: (this: *ID3D12VideoDecodeCommandList, pBuffer: *ID3D12Resource, AlignedBufferOffset: u64, Operation: D3D12_PREDICATION_OP) -> void #cpp_method;
    SetMarker: (this: *ID3D12VideoDecodeCommandList, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    BeginEvent: (this: *ID3D12VideoDecodeCommandList, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    EndEvent: (this: *ID3D12VideoDecodeCommandList) -> void #cpp_method;
    DecodeFrame: (this: *ID3D12VideoDecodeCommandList, pDecoder: *ID3D12VideoDecoder, pOutputArguments: *D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS, pInputArguments: *D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) -> void #cpp_method;
    WriteBufferImmediate: (this: *ID3D12VideoDecodeCommandList, Count: u32, pParams: *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes: *D3D12_WRITEBUFFERIMMEDIATE_MODE) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoDecodeCommandList) -> *ID3D12VideoDecodeCommandList_VTable { return obj.id3d12videodecodecommandlist_vtable; }



ID3D12VideoProcessCommandList_UUID :: "AEB2543A-167F-4682-ACC8-D159ED4A6209";
ID3D12VideoProcessCommandList :: struct {
    #as using id3d12commandlist: ID3D12CommandList;
    #place id3d12commandlist; id3d12videoprocesscommandlist_vtable: *ID3D12VideoProcessCommandList_VTable;
}
ID3D12VideoProcessCommandList_VTable :: struct #type_info_none {
    using id3d12commandlist: ID3D12CommandList_VTable;
    Close: (this: *ID3D12VideoProcessCommandList) -> HRESULT #cpp_method;
    Reset: (this: *ID3D12VideoProcessCommandList, pAllocator: *ID3D12CommandAllocator) -> HRESULT #cpp_method;
    ClearState: (this: *ID3D12VideoProcessCommandList) -> void #cpp_method;
    ResourceBarrier: (this: *ID3D12VideoProcessCommandList, NumBarriers: u32, pBarriers: *D3D12_RESOURCE_BARRIER) -> void #cpp_method;
    DiscardResource: (this: *ID3D12VideoProcessCommandList, pResource: *ID3D12Resource, pRegion: *D3D12_DISCARD_REGION) -> void #cpp_method;
    BeginQuery: (this: *ID3D12VideoProcessCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: u32) -> void #cpp_method;
    EndQuery: (this: *ID3D12VideoProcessCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: u32) -> void #cpp_method;
    ResolveQueryData: (this: *ID3D12VideoProcessCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, StartIndex: u32, NumQueries: u32, pDestinationBuffer: *ID3D12Resource, AlignedDestinationBufferOffset: u64) -> void #cpp_method;
    SetPredication: (this: *ID3D12VideoProcessCommandList, pBuffer: *ID3D12Resource, AlignedBufferOffset: u64, Operation: D3D12_PREDICATION_OP) -> void #cpp_method;
    SetMarker: (this: *ID3D12VideoProcessCommandList, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    BeginEvent: (this: *ID3D12VideoProcessCommandList, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    EndEvent: (this: *ID3D12VideoProcessCommandList) -> void #cpp_method;
    ProcessFrames: (this: *ID3D12VideoProcessCommandList, pVideoProcessor: *ID3D12VideoProcessor, pOutputArguments: *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, NumInputStreams: u32, pInputArguments: *D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS) -> void #cpp_method;
    WriteBufferImmediate: (this: *ID3D12VideoProcessCommandList, Count: u32, pParams: *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes: *D3D12_WRITEBUFFERIMMEDIATE_MODE) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoProcessCommandList) -> *ID3D12VideoProcessCommandList_VTable { return obj.id3d12videoprocesscommandlist_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0006 */
/* [local] */
D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM :: struct {
    Offset:  u64;
    pBuffer: *ID3D12Resource;
}

D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 :: struct {
    Enable:               BOOL;
    pReferenceTexture2D:  *ID3D12Resource;
    ReferenceSubresource: u32;
    OutputColorSpace:     DXGI_COLOR_SPACE_TYPE;
    DecodeColorSpace:     DXGI_COLOR_SPACE_TYPE;
    OutputWidth:          u32;
    OutputHeight:         u32;
}

D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 :: struct {
    pOutputTexture2D:    *ID3D12Resource;
    OutputSubresource:   u32;
    ConversionArguments: D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1;
    Histograms:          [4] D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM;
}


ID3D12VideoDecodeCommandList1_UUID :: "D52F011B-B56E-453C-A05A-A7F311C8F472";
ID3D12VideoDecodeCommandList1 :: struct {
    #as using id3d12videodecodecommandlist: ID3D12VideoDecodeCommandList;
    #place id3d12videodecodecommandlist; id3d12videodecodecommandlist1_vtable: *ID3D12VideoDecodeCommandList1_VTable;
}
ID3D12VideoDecodeCommandList1_VTable :: struct #type_info_none {
    using id3d12videodecodecommandlist: ID3D12VideoDecodeCommandList_VTable;
    DecodeFrame1: (this: *ID3D12VideoDecodeCommandList1, pDecoder: *ID3D12VideoDecoder, pOutputArguments: *D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1, pInputArguments: *D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoDecodeCommandList1) -> *ID3D12VideoDecodeCommandList1_VTable { return obj.id3d12videodecodecommandlist1_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0007 */
/* [local] */
D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 :: struct {
    InputStream:   [2] D3D12_VIDEO_PROCESS_INPUT_STREAM;
    Transform:     D3D12_VIDEO_PROCESS_TRANSFORM;
    Flags:         D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS;
    RateInfo:      D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE;
    FilterLevels:  [32] s32;
    AlphaBlending: D3D12_VIDEO_PROCESS_ALPHA_BLENDING;
    FieldType:     D3D12_VIDEO_FIELD_TYPE;
}


ID3D12VideoProcessCommandList1_UUID :: "542C5C4D-7596-434F-8C93-4EFA6766F267";
ID3D12VideoProcessCommandList1 :: struct {
    #as using id3d12videoprocesscommandlist: ID3D12VideoProcessCommandList;
    #place id3d12videoprocesscommandlist; id3d12videoprocesscommandlist1_vtable: *ID3D12VideoProcessCommandList1_VTable;
}
ID3D12VideoProcessCommandList1_VTable :: struct #type_info_none {
    using id3d12videoprocesscommandlist: ID3D12VideoProcessCommandList_VTable;
    ProcessFrames1: (this: *ID3D12VideoProcessCommandList1, pVideoProcessor: *ID3D12VideoProcessor, pOutputArguments: *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS, NumInputStreams: u32, pInputArguments: *D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoProcessCommandList1) -> *ID3D12VideoProcessCommandList1_VTable { return obj.id3d12videoprocesscommandlist1_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0008 */
/* [local] */
D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE :: enum s32 {
    _8X8   :: 0;
    _16X16 :: 1;

    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8   :: _8X8;
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 :: _16X16;
}

D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS :: enum_flags u32 {
    NONE   :: 0x0;
    _8X8   :: 0x1;
    _16X16 :: 0x2;

    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE  :: NONE;
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8   :: _8X8;
    D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 :: _16X16;
}

D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION :: enum s32 {
    QUARTER_PEL :: 0;
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL :: QUARTER_PEL;
}

D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS :: enum_flags u32 {
    NONE        :: 0x0;
    QUARTER_PEL :: 0x1;

    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE        :: NONE;
    D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL :: QUARTER_PEL;
}

D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT :: struct {
    NodeIndex:           u32;
    VideoDecodeSupport:  BOOL;
    VideoProcessSupport: BOOL;
    VideoEncodeSupport:  BOOL;
}

D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR :: struct {
    NodeIndex:      u32;
    InputFormat:    DXGI_FORMAT;
    BlockSizeFlags: D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS;
    PrecisionFlags: D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS;
    SizeRange:      D3D12_VIDEO_SIZE_RANGE;
}

D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE :: struct {
    NodeIndex:                        u32;
    InputFormat:                      DXGI_FORMAT;
    BlockSize:                        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
    Precision:                        D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
    SizeRange:                        D3D12_VIDEO_SIZE_RANGE;
    Protected:                        BOOL;
    MotionVectorHeapMemoryPoolL0Size: u64;
    MotionVectorHeapMemoryPoolL1Size: u64;
    MotionEstimatorMemoryPoolL0Size:  u64;
    MotionEstimatorMemoryPoolL1Size:  u64;
}

D3D12_VIDEO_MOTION_ESTIMATOR_DESC :: struct {
    NodeMask:    u32;
    InputFormat: DXGI_FORMAT;
    BlockSize:   D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
    Precision:   D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
    SizeRange:   D3D12_VIDEO_SIZE_RANGE;
}


ID3D12VideoMotionEstimator_UUID :: "33FDAE0E-098B-428F-87BB-34B695DE08F8";
ID3D12VideoMotionEstimator :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12videomotionestimator_vtable: *ID3D12VideoMotionEstimator_VTable;
}
ID3D12VideoMotionEstimator_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetDesc: (this: *ID3D12VideoMotionEstimator) -> D3D12_VIDEO_MOTION_ESTIMATOR_DESC #cpp_method;
    GetProtectedResourceSession: (this: *ID3D12VideoMotionEstimator, riid: *IID, ppProtectedSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoMotionEstimator) -> *ID3D12VideoMotionEstimator_VTable { return obj.id3d12videomotionestimator_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0009 */
/* [local] */
D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC :: struct {
    NodeMask:    u32;
    InputFormat: DXGI_FORMAT;
    BlockSize:   D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
    Precision:   D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
    SizeRange:   D3D12_VIDEO_SIZE_RANGE;
}


ID3D12VideoMotionVectorHeap_UUID :: "5BE17987-743A-4061-834B-23D22DAEA505";
ID3D12VideoMotionVectorHeap :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12videomotionvectorheap_vtable: *ID3D12VideoMotionVectorHeap_VTable;
}
ID3D12VideoMotionVectorHeap_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetDesc: (this: *ID3D12VideoMotionVectorHeap) -> D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC #cpp_method;
    GetProtectedResourceSession: (this: *ID3D12VideoMotionVectorHeap, riid: *IID, ppProtectedSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoMotionVectorHeap) -> *ID3D12VideoMotionVectorHeap_VTable { return obj.id3d12videomotionvectorheap_vtable; }



ID3D12VideoDevice1_UUID :: "981611AD-A144-4C83-9890-F30E26D658AB";
ID3D12VideoDevice1 :: struct {
    #as using id3d12videodevice: ID3D12VideoDevice;
    #place id3d12videodevice; id3d12videodevice1_vtable: *ID3D12VideoDevice1_VTable;
}
ID3D12VideoDevice1_VTable :: struct #type_info_none {
    using id3d12videodevice: ID3D12VideoDevice_VTable;
    CreateVideoMotionEstimator: (this: *ID3D12VideoDevice1, pDesc: *D3D12_VIDEO_MOTION_ESTIMATOR_DESC, pProtectedResourceSession: *ID3D12ProtectedResourceSession, riid: *IID, ppVideoMotionEstimator: **void) -> HRESULT #cpp_method;
    CreateVideoMotionVectorHeap: (this: *ID3D12VideoDevice1, pDesc: *D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC, pProtectedResourceSession: *ID3D12ProtectedResourceSession, riid: *IID, ppVideoMotionVectorHeap: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoDevice1) -> *ID3D12VideoDevice1_VTable { return obj.id3d12videodevice1_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0011 */
/* [local] */
D3D12_RESOURCE_COORDINATE :: struct {
    X:                u64;
    Y:                u32;
    Z:                u32;
    SubresourceIndex: u32;
}

D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT :: struct {
    pMotionVectorHeap: *ID3D12VideoMotionVectorHeap;
}

D3D12_VIDEO_MOTION_ESTIMATOR_INPUT :: struct {
    pInputTexture2D:           *ID3D12Resource;
    InputSubresourceIndex:     u32;
    pReferenceTexture2D:       *ID3D12Resource;
    ReferenceSubresourceIndex: u32;
    pHintMotionVectorHeap:     *ID3D12VideoMotionVectorHeap;
}

D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT :: struct {
    pMotionVectorTexture2D: *ID3D12Resource;
    MotionVectorCoordinate: D3D12_RESOURCE_COORDINATE;
}

D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT :: struct {
    pMotionVectorHeap: *ID3D12VideoMotionVectorHeap;
    PixelWidth:        u32;
    PixelHeight:       u32;
}


ID3D12VideoEncodeCommandList_UUID :: "8455293A-0CBD-4831-9B39-FBDBAB724723";
ID3D12VideoEncodeCommandList :: struct {
    #as using id3d12commandlist: ID3D12CommandList;
    #place id3d12commandlist; id3d12videoencodecommandlist_vtable: *ID3D12VideoEncodeCommandList_VTable;
}
ID3D12VideoEncodeCommandList_VTable :: struct #type_info_none {
    using id3d12commandlist: ID3D12CommandList_VTable;
    Close: (this: *ID3D12VideoEncodeCommandList) -> HRESULT #cpp_method;
    Reset: (this: *ID3D12VideoEncodeCommandList, pAllocator: *ID3D12CommandAllocator) -> HRESULT #cpp_method;
    ClearState: (this: *ID3D12VideoEncodeCommandList) -> void #cpp_method;
    ResourceBarrier: (this: *ID3D12VideoEncodeCommandList, NumBarriers: u32, pBarriers: *D3D12_RESOURCE_BARRIER) -> void #cpp_method;
    DiscardResource: (this: *ID3D12VideoEncodeCommandList, pResource: *ID3D12Resource, pRegion: *D3D12_DISCARD_REGION) -> void #cpp_method;
    BeginQuery: (this: *ID3D12VideoEncodeCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: u32) -> void #cpp_method;
    EndQuery: (this: *ID3D12VideoEncodeCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, Index: u32) -> void #cpp_method;
    ResolveQueryData: (this: *ID3D12VideoEncodeCommandList, pQueryHeap: *ID3D12QueryHeap, Type: D3D12_QUERY_TYPE, StartIndex: u32, NumQueries: u32, pDestinationBuffer: *ID3D12Resource, AlignedDestinationBufferOffset: u64) -> void #cpp_method;
    SetPredication: (this: *ID3D12VideoEncodeCommandList, pBuffer: *ID3D12Resource, AlignedBufferOffset: u64, Operation: D3D12_PREDICATION_OP) -> void #cpp_method;
    SetMarker: (this: *ID3D12VideoEncodeCommandList, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    BeginEvent: (this: *ID3D12VideoEncodeCommandList, Metadata: u32, pData: *void, Size: u32) -> void #cpp_method;
    EndEvent: (this: *ID3D12VideoEncodeCommandList) -> void #cpp_method;
    EstimateMotion: (this: *ID3D12VideoEncodeCommandList, pMotionEstimator: *ID3D12VideoMotionEstimator, pOutputArguments: *D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT, pInputArguments: *D3D12_VIDEO_MOTION_ESTIMATOR_INPUT) -> void #cpp_method;
    ResolveMotionVectorHeap: (this: *ID3D12VideoEncodeCommandList, pOutputArguments: *D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT, pInputArguments: *D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT) -> void #cpp_method;
    WriteBufferImmediate: (this: *ID3D12VideoEncodeCommandList, Count: u32, pParams: *D3D12_WRITEBUFFERIMMEDIATE_PARAMETER, pModes: *D3D12_WRITEBUFFERIMMEDIATE_MODE) -> void #cpp_method;
    SetProtectedResourceSession: (this: *ID3D12VideoEncodeCommandList, pProtectedResourceSession: *ID3D12ProtectedResourceSession) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoEncodeCommandList) -> *ID3D12VideoEncodeCommandList_VTable { return obj.id3d12videoencodecommandlist_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0012 */
/* [local] */
D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS :: enum_flags u32 {
    NONE      :: 0x0;
    SUPPORTED :: 0x1;

    D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE      :: NONE;
    D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED :: SUPPORTED;
}

D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES :: struct {
    NodeIndex:     u32;
    Configuration: D3D12_VIDEO_DECODE_CONFIGURATION;
    SupportFlags:  D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES :: struct {
    NodeIndex:    u32;
    SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES :: struct {
    NodeIndex:    u32;
    SupportFlags: D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1 :: struct {
    VideoDecoderHeapDesc: D3D12_VIDEO_DECODER_HEAP_DESC;
    Protected:            BOOL;
    MemoryPoolL0Size:     u64;
    MemoryPoolL1Size:     u64;
}

D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1 :: struct {
    NodeMask:            u32;
    pOutputStreamDesc:   *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC;
    NumInputStreamDescs: u32;
    pInputStreamDescs:   *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC;
    Protected:           BOOL;
    MemoryPoolL0Size:    u64;
    MemoryPoolL1Size:    u64;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE :: enum s32 {
    CREATION              :: 0;
    INITIALIZATION        :: 1;
    EXECUTION             :: 2;
    CAPS_INPUT            :: 3;
    CAPS_OUTPUT           :: 4;
    DEVICE_EXECUTE_INPUT  :: 5;
    DEVICE_EXECUTE_OUTPUT :: 6;

    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION              :: CREATION;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION        :: INITIALIZATION;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION             :: EXECUTION;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT            :: CAPS_INPUT;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT           :: CAPS_OUTPUT;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT  :: DEVICE_EXECUTE_INPUT;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT :: DEVICE_EXECUTE_OUTPUT;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE :: enum s32 {
    UINT8    :: 0;
    UINT16   :: 1;
    UINT32   :: 2;
    UINT64   :: 3;
    SINT8    :: 4;
    SINT16   :: 5;
    SINT32   :: 6;
    SINT64   :: 7;
    FLOAT    :: 8;
    DOUBLE   :: 9;
    RESOURCE :: 10;

    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8    :: UINT8;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16   :: UINT16;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32   :: UINT32;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64   :: UINT64;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8    :: SINT8;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16   :: SINT16;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32   :: SINT32;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64   :: SINT64;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT    :: FLOAT;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE   :: DOUBLE;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE :: RESOURCE;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS :: enum_flags u32 {
    NONE  :: 0x0;
    READ  :: 0x1;
    WRITE :: 0x2;

    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE  :: NONE;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ  :: READ;
    D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE :: WRITE;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT :: struct {
    NodeIndex:    u32;
    CommandCount: u32;
}

D3D12_VIDEO_EXTENSION_COMMAND_INFO :: struct {
    CommandId:               GUID;
    Name:                    *s16;
    CommandListSupportFlags: D3D12_COMMAND_LIST_SUPPORT_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS :: struct {
    NodeIndex:     u32;
    CommandCount:  u32;
    pCommandInfos: *D3D12_VIDEO_EXTENSION_COMMAND_INFO;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT :: struct {
    CommandId:        GUID;
    Stage:            D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
    ParameterCount:   u32;
    ParameterPacking: u32;
}

D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO :: struct {
    Name:  *s16;
    Type:  D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE;
    Flags: D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS :: struct {
    CommandId:       GUID;
    Stage:           D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE;
    ParameterCount:  u32;
    pParameterInfos: *D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT :: struct {
    NodeIndex:             u32;
    CommandId:             GUID;
    pInputData:            *void;
    InputDataSizeInBytes:  SIZE_T;
    pOutputData:           *void;
    OutputDataSizeInBytes: SIZE_T;
}

D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE :: struct {
    NodeIndex:                     u32;
    CommandId:                     GUID;
    pCreationParameters:           *void;
    CreationParametersSizeInBytes: SIZE_T;
    MemoryPoolL0Size:              u64;
    MemoryPoolL1Size:              u64;
}

D3D12_VIDEO_EXTENSION_COMMAND_DESC :: struct {
    NodeMask:  u32;
    CommandId: GUID;
}


ID3D12VideoDecoder1_UUID :: "79A2E5FB-CCD2-469A-9FDE-195D10951F7E";
ID3D12VideoDecoder1 :: struct {
    #as using id3d12videodecoder: ID3D12VideoDecoder;
    #place id3d12videodecoder; id3d12videodecoder1_vtable: *ID3D12VideoDecoder1_VTable;
}
ID3D12VideoDecoder1_VTable :: struct #type_info_none {
    using id3d12videodecoder: ID3D12VideoDecoder_VTable;
    GetProtectedResourceSession: (this: *ID3D12VideoDecoder1, riid: *IID, ppProtectedSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoDecoder1) -> *ID3D12VideoDecoder1_VTable { return obj.id3d12videodecoder1_vtable; }



ID3D12VideoDecoderHeap1_UUID :: "DA1D98C5-539F-41B2-BF6B-1198A03B6D26";
ID3D12VideoDecoderHeap1 :: struct {
    #as using id3d12videodecoderheap: ID3D12VideoDecoderHeap;
    #place id3d12videodecoderheap; id3d12videodecoderheap1_vtable: *ID3D12VideoDecoderHeap1_VTable;
}
ID3D12VideoDecoderHeap1_VTable :: struct #type_info_none {
    using id3d12videodecoderheap: ID3D12VideoDecoderHeap_VTable;
    GetProtectedResourceSession: (this: *ID3D12VideoDecoderHeap1, riid: *IID, ppProtectedSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoDecoderHeap1) -> *ID3D12VideoDecoderHeap1_VTable { return obj.id3d12videodecoderheap1_vtable; }



ID3D12VideoProcessor1_UUID :: "F3CFE615-553F-425C-86D8-EE8C1B1FB01C";
ID3D12VideoProcessor1 :: struct {
    #as using id3d12videoprocessor: ID3D12VideoProcessor;
    #place id3d12videoprocessor; id3d12videoprocessor1_vtable: *ID3D12VideoProcessor1_VTable;
}
ID3D12VideoProcessor1_VTable :: struct #type_info_none {
    using id3d12videoprocessor: ID3D12VideoProcessor_VTable;
    GetProtectedResourceSession: (this: *ID3D12VideoProcessor1, riid: *IID, ppProtectedSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoProcessor1) -> *ID3D12VideoProcessor1_VTable { return obj.id3d12videoprocessor1_vtable; }



ID3D12VideoExtensionCommand_UUID :: "554E41E8-AE8E-4A8C-B7D2-5B4F274A30E4";
ID3D12VideoExtensionCommand :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12videoextensioncommand_vtable: *ID3D12VideoExtensionCommand_VTable;
}
ID3D12VideoExtensionCommand_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetDesc: (this: *ID3D12VideoExtensionCommand) -> D3D12_VIDEO_EXTENSION_COMMAND_DESC #cpp_method;
    GetProtectedResourceSession: (this: *ID3D12VideoExtensionCommand, riid: *IID, ppProtectedSession: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoExtensionCommand) -> *ID3D12VideoExtensionCommand_VTable { return obj.id3d12videoextensioncommand_vtable; }



ID3D12VideoDevice2_UUID :: "F019AC49-F838-4A95-9B17-579437C8F513";
ID3D12VideoDevice2 :: struct {
    #as using id3d12videodevice1: ID3D12VideoDevice1;
    #place id3d12videodevice1; id3d12videodevice2_vtable: *ID3D12VideoDevice2_VTable;
}
ID3D12VideoDevice2_VTable :: struct #type_info_none {
    using id3d12videodevice1: ID3D12VideoDevice1_VTable;
    CreateVideoDecoder1: (this: *ID3D12VideoDevice2, pDesc: *D3D12_VIDEO_DECODER_DESC, pProtectedResourceSession: *ID3D12ProtectedResourceSession, riid: *IID, ppVideoDecoder: **void) -> HRESULT #cpp_method;
    CreateVideoDecoderHeap1: (this: *ID3D12VideoDevice2, pVideoDecoderHeapDesc: *D3D12_VIDEO_DECODER_HEAP_DESC, pProtectedResourceSession: *ID3D12ProtectedResourceSession, riid: *IID, ppVideoDecoderHeap: **void) -> HRESULT #cpp_method;
    CreateVideoProcessor1: (this: *ID3D12VideoDevice2, NodeMask: u32, pOutputStreamDesc: *D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC, NumInputStreamDescs: u32, pInputStreamDescs: *D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC, pProtectedResourceSession: *ID3D12ProtectedResourceSession, riid: *IID, ppVideoProcessor: **void) -> HRESULT #cpp_method;
    CreateVideoExtensionCommand: (this: *ID3D12VideoDevice2, pDesc: *D3D12_VIDEO_EXTENSION_COMMAND_DESC, pCreationParameters: *void, CreationParametersDataSizeInBytes: SIZE_T, pProtectedResourceSession: *ID3D12ProtectedResourceSession, riid: *IID, ppVideoExtensionCommand: **void) -> HRESULT #cpp_method;
    ExecuteExtensionCommand: (this: *ID3D12VideoDevice2, pExtensionCommand: *ID3D12VideoExtensionCommand, pExecutionParameters: *void, ExecutionParametersSizeInBytes: SIZE_T, pOutputData: *void, OutputDataSizeInBytes: SIZE_T) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoDevice2) -> *ID3D12VideoDevice2_VTable { return obj.id3d12videodevice2_vtable; }



ID3D12VideoDecodeCommandList2_UUID :: "6e120880-c114-4153-8036-d247051e1729";
ID3D12VideoDecodeCommandList2 :: struct {
    #as using id3d12videodecodecommandlist1: ID3D12VideoDecodeCommandList1;
    #place id3d12videodecodecommandlist1; id3d12videodecodecommandlist2_vtable: *ID3D12VideoDecodeCommandList2_VTable;
}
ID3D12VideoDecodeCommandList2_VTable :: struct #type_info_none {
    using id3d12videodecodecommandlist1: ID3D12VideoDecodeCommandList1_VTable;
    SetProtectedResourceSession: (this: *ID3D12VideoDecodeCommandList2, pProtectedResourceSession: *ID3D12ProtectedResourceSession) -> void #cpp_method;
    InitializeExtensionCommand: (this: *ID3D12VideoDecodeCommandList2, pExtensionCommand: *ID3D12VideoExtensionCommand, pInitializationParameters: *void, InitializationParametersSizeInBytes: SIZE_T) -> void #cpp_method;
    ExecuteExtensionCommand: (this: *ID3D12VideoDecodeCommandList2, pExtensionCommand: *ID3D12VideoExtensionCommand, pExecutionParameters: *void, ExecutionParametersSizeInBytes: SIZE_T) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoDecodeCommandList2) -> *ID3D12VideoDecodeCommandList2_VTable { return obj.id3d12videodecodecommandlist2_vtable; }



ID3D12VideoDecodeCommandList3_UUID :: "2aee8c37-9562-42da-8abf-61efeb2e4513";
ID3D12VideoDecodeCommandList3 :: struct {
    #as using id3d12videodecodecommandlist2: ID3D12VideoDecodeCommandList2;
    #place id3d12videodecodecommandlist2; id3d12videodecodecommandlist3_vtable: *ID3D12VideoDecodeCommandList3_VTable;
}
ID3D12VideoDecodeCommandList3_VTable :: struct #type_info_none {
    using id3d12videodecodecommandlist2: ID3D12VideoDecodeCommandList2_VTable;
    Barrier: (this: *ID3D12VideoDecodeCommandList3, NumBarrierGroups: u32, pBarrierGroups: *D3D12_BARRIER_GROUP) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoDecodeCommandList3) -> *ID3D12VideoDecodeCommandList3_VTable { return obj.id3d12videodecodecommandlist3_vtable; }



ID3D12VideoProcessCommandList2_UUID :: "db525ae4-6ad6-473c-baa7-59b2e37082e4";
ID3D12VideoProcessCommandList2 :: struct {
    #as using id3d12videoprocesscommandlist1: ID3D12VideoProcessCommandList1;
    #place id3d12videoprocesscommandlist1; id3d12videoprocesscommandlist2_vtable: *ID3D12VideoProcessCommandList2_VTable;
}
ID3D12VideoProcessCommandList2_VTable :: struct #type_info_none {
    using id3d12videoprocesscommandlist1: ID3D12VideoProcessCommandList1_VTable;
    SetProtectedResourceSession: (this: *ID3D12VideoProcessCommandList2, pProtectedResourceSession: *ID3D12ProtectedResourceSession) -> void #cpp_method;
    InitializeExtensionCommand: (this: *ID3D12VideoProcessCommandList2, pExtensionCommand: *ID3D12VideoExtensionCommand, pInitializationParameters: *void, InitializationParametersSizeInBytes: SIZE_T) -> void #cpp_method;
    ExecuteExtensionCommand: (this: *ID3D12VideoProcessCommandList2, pExtensionCommand: *ID3D12VideoExtensionCommand, pExecutionParameters: *void, ExecutionParametersSizeInBytes: SIZE_T) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoProcessCommandList2) -> *ID3D12VideoProcessCommandList2_VTable { return obj.id3d12videoprocesscommandlist2_vtable; }



ID3D12VideoProcessCommandList3_UUID :: "1a0a4ca4-9f08-40ce-9558-b411fd2666ff";
ID3D12VideoProcessCommandList3 :: struct {
    #as using id3d12videoprocesscommandlist2: ID3D12VideoProcessCommandList2;
    #place id3d12videoprocesscommandlist2; id3d12videoprocesscommandlist3_vtable: *ID3D12VideoProcessCommandList3_VTable;
}
ID3D12VideoProcessCommandList3_VTable :: struct #type_info_none {
    using id3d12videoprocesscommandlist2: ID3D12VideoProcessCommandList2_VTable;
    Barrier: (this: *ID3D12VideoProcessCommandList3, NumBarrierGroups: u32, pBarrierGroups: *D3D12_BARRIER_GROUP) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoProcessCommandList3) -> *ID3D12VideoProcessCommandList3_VTable { return obj.id3d12videoprocesscommandlist3_vtable; }



ID3D12VideoEncodeCommandList1_UUID :: "94971eca-2bdb-4769-88cf-3675ea757ebc";
ID3D12VideoEncodeCommandList1 :: struct {
    #as using id3d12videoencodecommandlist: ID3D12VideoEncodeCommandList;
    #place id3d12videoencodecommandlist; id3d12videoencodecommandlist1_vtable: *ID3D12VideoEncodeCommandList1_VTable;
}
ID3D12VideoEncodeCommandList1_VTable :: struct #type_info_none {
    using id3d12videoencodecommandlist: ID3D12VideoEncodeCommandList_VTable;
    InitializeExtensionCommand: (this: *ID3D12VideoEncodeCommandList1, pExtensionCommand: *ID3D12VideoExtensionCommand, pInitializationParameters: *void, InitializationParametersSizeInBytes: SIZE_T) -> void #cpp_method;
    ExecuteExtensionCommand: (this: *ID3D12VideoEncodeCommandList1, pExtensionCommand: *ID3D12VideoExtensionCommand, pExecutionParameters: *void, ExecutionParametersSizeInBytes: SIZE_T) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoEncodeCommandList1) -> *ID3D12VideoEncodeCommandList1_VTable { return obj.id3d12videoencodecommandlist1_vtable; }


D3D12_VIDEO_DECODE_PROFILE_MPEG2: GUID;
D3D12_VIDEO_DECODE_PROFILE_MPEG1_AND_MPEG2: GUID;
D3D12_VIDEO_DECODE_PROFILE_H264: GUID;
D3D12_VIDEO_DECODE_PROFILE_H264_STEREO_PROGRESSIVE: GUID;
D3D12_VIDEO_DECODE_PROFILE_H264_STEREO: GUID;
D3D12_VIDEO_DECODE_PROFILE_H264_MULTIVIEW: GUID;
D3D12_VIDEO_DECODE_PROFILE_VC1: GUID;
D3D12_VIDEO_DECODE_PROFILE_VC1_D2010: GUID;
D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_SIMPLE: GUID;
D3D12_VIDEO_DECODE_PROFILE_MPEG4PT2_ADVSIMPLE_NOGMC: GUID;
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN: GUID;
D3D12_VIDEO_DECODE_PROFILE_HEVC_MAIN10: GUID;
D3D12_VIDEO_DECODE_PROFILE_VP9: GUID;
D3D12_VIDEO_DECODE_PROFILE_VP9_10BIT_PROFILE2: GUID;
D3D12_VIDEO_DECODE_PROFILE_VP8: GUID;
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE0: GUID;
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE1: GUID;
D3D12_VIDEO_DECODE_PROFILE_AV1_PROFILE2: GUID;
D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2: GUID;
D3D12_VIDEO_DECODE_PROFILE_AV1_12BIT_PROFILE2_420: GUID;

D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE :: enum s32 {
    ABSOLUTE_QP_MAP :: 0;
    CQP             :: 1;
    CBR             :: 2;
    VBR             :: 3;
    QVBR            :: 4;

    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_ABSOLUTE_QP_MAP :: ABSOLUTE_QP_MAP;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CQP             :: CQP;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_CBR             :: CBR;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_VBR             :: VBR;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE_QVBR            :: QVBR;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS :: enum_flags u32 {
    NONE                  :: 0x0;
    ENABLE_DELTA_QP       :: 0x1;
    ENABLE_FRAME_ANALYSIS :: 0x2;
    ENABLE_QP_RANGE       :: 0x4;
    ENABLE_INITIAL_QP     :: 0x8;
    ENABLE_MAX_FRAME_SIZE :: 0x10;
    ENABLE_VBV_SIZES      :: 0x20;

    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_NONE                  :: NONE;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_DELTA_QP       :: ENABLE_DELTA_QP;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_FRAME_ANALYSIS :: ENABLE_FRAME_ANALYSIS;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_QP_RANGE       :: ENABLE_QP_RANGE;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_INITIAL_QP     :: ENABLE_INITIAL_QP;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_MAX_FRAME_SIZE :: ENABLE_MAX_FRAME_SIZE;
    D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAG_ENABLE_VBV_SIZES      :: ENABLE_VBV_SIZES;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP :: struct {
    ConstantQP_FullIntracodedFrame:                  u32;
    ConstantQP_InterPredictedFrame_PrevRefOnly:      u32;
    ConstantQP_InterPredictedFrame_BiDirectionalRef: u32;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR :: struct {
    InitialQP:          u32;
    MinQP:              u32;
    MaxQP:              u32;
    MaxFrameBitSize:    u64;
    TargetBitRate:      u64;
    VBVCapacity:        u64;
    InitialVBVFullness: u64;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR :: struct {
    InitialQP:          u32;
    MinQP:              u32;
    MaxQP:              u32;
    MaxFrameBitSize:    u64;
    TargetAvgBitRate:   u64;
    PeakBitRate:        u64;
    VBVCapacity:        u64;
    InitialVBVFullness: u64;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR :: struct {
    InitialQP:             u32;
    MinQP:                 u32;
    MaxQP:                 u32;
    MaxFrameBitSize:       u64;
    TargetAvgBitRate:      u64;
    PeakBitRate:           u64;
    ConstantQualityTarget: u32;
}

D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS :: struct {
    DataSize: u32;
    union {
        pConfiguration_CQP:  *D3D12_VIDEO_ENCODER_RATE_CONTROL_CQP;
        pConfiguration_CBR:  *D3D12_VIDEO_ENCODER_RATE_CONTROL_CBR;
        pConfiguration_VBR:  *D3D12_VIDEO_ENCODER_RATE_CONTROL_VBR;
        pConfiguration_QVBR: *D3D12_VIDEO_ENCODER_RATE_CONTROL_QVBR;
    }
}

D3D12_VIDEO_ENCODER_RATE_CONTROL :: struct {
    Mode:            D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
    Flags:           D3D12_VIDEO_ENCODER_RATE_CONTROL_FLAGS;
    ConfigParams:    D3D12_VIDEO_ENCODER_RATE_CONTROL_CONFIGURATION_PARAMS;
    TargetFrameRate: DXGI_RATIONAL;
}

D3D12_VIDEO_ENCODER_CODEC :: enum s32 {
    H264 :: 0;
    HEVC :: 1;

    D3D12_VIDEO_ENCODER_CODEC_H264 :: H264;
    D3D12_VIDEO_ENCODER_CODEC_HEVC :: HEVC;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC :: struct {
    NodeIndex:   u32;
    Codec:       D3D12_VIDEO_ENCODER_CODEC;
    IsSupported: BOOL;
}

D3D12_VIDEO_ENCODER_PROFILE_H264 :: enum s32 {
    MAIN    :: 0;
    HIGH    :: 1;
    HIGH_10 :: 2;

    D3D12_VIDEO_ENCODER_PROFILE_H264_MAIN    :: MAIN;
    D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH    :: HIGH;
    D3D12_VIDEO_ENCODER_PROFILE_H264_HIGH_10 :: HIGH_10;
}

D3D12_VIDEO_ENCODER_PROFILE_HEVC :: enum s32 {
    MAIN   :: 0;
    MAIN10 :: 1;

    D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN   :: MAIN;
    D3D12_VIDEO_ENCODER_PROFILE_HEVC_MAIN10 :: MAIN10;
}

D3D12_VIDEO_ENCODER_PROFILE_DESC :: struct {
    DataSize: u32;
    union {
        pH264Profile: *D3D12_VIDEO_ENCODER_PROFILE_H264;
        pHEVCProfile: *D3D12_VIDEO_ENCODER_PROFILE_HEVC;
    }
}

D3D12_VIDEO_ENCODER_LEVELS_H264 :: enum s32 {
    _1  :: 0;
    _1b :: 1;
    _11 :: 2;
    _12 :: 3;
    _13 :: 4;
    _2  :: 5;
    _21 :: 6;
    _22 :: 7;
    _3  :: 8;
    _31 :: 9;
    _32 :: 10;
    _4  :: 11;
    _41 :: 12;
    _42 :: 13;
    _5  :: 14;
    _51 :: 15;
    _52 :: 16;
    _6  :: 17;
    _61 :: 18;
    _62 :: 19;

    D3D12_VIDEO_ENCODER_LEVELS_H264_1  :: _1;
    D3D12_VIDEO_ENCODER_LEVELS_H264_1b :: _1b;
    D3D12_VIDEO_ENCODER_LEVELS_H264_11 :: _11;
    D3D12_VIDEO_ENCODER_LEVELS_H264_12 :: _12;
    D3D12_VIDEO_ENCODER_LEVELS_H264_13 :: _13;
    D3D12_VIDEO_ENCODER_LEVELS_H264_2  :: _2;
    D3D12_VIDEO_ENCODER_LEVELS_H264_21 :: _21;
    D3D12_VIDEO_ENCODER_LEVELS_H264_22 :: _22;
    D3D12_VIDEO_ENCODER_LEVELS_H264_3  :: _3;
    D3D12_VIDEO_ENCODER_LEVELS_H264_31 :: _31;
    D3D12_VIDEO_ENCODER_LEVELS_H264_32 :: _32;
    D3D12_VIDEO_ENCODER_LEVELS_H264_4  :: _4;
    D3D12_VIDEO_ENCODER_LEVELS_H264_41 :: _41;
    D3D12_VIDEO_ENCODER_LEVELS_H264_42 :: _42;
    D3D12_VIDEO_ENCODER_LEVELS_H264_5  :: _5;
    D3D12_VIDEO_ENCODER_LEVELS_H264_51 :: _51;
    D3D12_VIDEO_ENCODER_LEVELS_H264_52 :: _52;
    D3D12_VIDEO_ENCODER_LEVELS_H264_6  :: _6;
    D3D12_VIDEO_ENCODER_LEVELS_H264_61 :: _61;
    D3D12_VIDEO_ENCODER_LEVELS_H264_62 :: _62;
}

D3D12_VIDEO_ENCODER_TIER_HEVC :: enum s32 {
    MAIN :: 0;
    HIGH :: 1;

    D3D12_VIDEO_ENCODER_TIER_HEVC_MAIN :: MAIN;
    D3D12_VIDEO_ENCODER_TIER_HEVC_HIGH :: HIGH;
}

D3D12_VIDEO_ENCODER_LEVELS_HEVC :: enum s32 {
    _1  :: 0;
    _2  :: 1;
    _21 :: 2;
    _3  :: 3;
    _31 :: 4;
    _4  :: 5;
    _41 :: 6;
    _5  :: 7;
    _51 :: 8;
    _52 :: 9;
    _6  :: 10;
    _61 :: 11;
    _62 :: 12;

    D3D12_VIDEO_ENCODER_LEVELS_HEVC_1  :: _1;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_2  :: _2;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_21 :: _21;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_3  :: _3;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_31 :: _31;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_4  :: _4;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_41 :: _41;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_5  :: _5;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_51 :: _51;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_52 :: _52;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_6  :: _6;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_61 :: _61;
    D3D12_VIDEO_ENCODER_LEVELS_HEVC_62 :: _62;
}

D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC :: struct {
    Level: D3D12_VIDEO_ENCODER_LEVELS_HEVC;
    Tier:  D3D12_VIDEO_ENCODER_TIER_HEVC;
}

D3D12_VIDEO_ENCODER_LEVEL_SETTING :: struct {
    DataSize: u32;
    union {
        pH264LevelSetting: *D3D12_VIDEO_ENCODER_LEVELS_H264;
        pHEVCLevelSetting: *D3D12_VIDEO_ENCODER_LEVEL_TIER_CONSTRAINTS_HEVC;
    }
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_PROFILE_LEVEL :: struct {
    NodeIndex:         u32;
    Codec:             D3D12_VIDEO_ENCODER_CODEC;
    Profile:           D3D12_VIDEO_ENCODER_PROFILE_DESC;
    IsSupported:       BOOL;
    MinSupportedLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING #align 8;
    MaxSupportedLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING;
}

D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC :: struct {
    Width:  u32;
    Height: u32;
}

D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC :: struct {
    WidthRatio:  u32;
    HeightRatio: u32;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION_RATIOS_COUNT :: struct {
    NodeIndex:             u32;
    Codec:                 D3D12_VIDEO_ENCODER_CODEC;
    ResolutionRatiosCount: u32;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_OUTPUT_RESOLUTION :: struct {
    NodeIndex:                           u32;
    Codec:                               D3D12_VIDEO_ENCODER_CODEC;
    ResolutionRatiosCount:               u32;
    IsSupported:                         BOOL;
    MinResolutionSupported:              D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    MaxResolutionSupported:              D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    ResolutionWidthMultipleRequirement:  u32;
    ResolutionHeightMultipleRequirement: u32;
    pResolutionRatios:                   *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_RATIO_DESC;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_INPUT_FORMAT :: struct {
    NodeIndex:   u32;
    Codec:       D3D12_VIDEO_ENCODER_CODEC;
    Profile:     D3D12_VIDEO_ENCODER_PROFILE_DESC;
    Format:      DXGI_FORMAT;
    IsSupported: BOOL;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_RATE_CONTROL_MODE :: struct {
    NodeIndex:       u32;
    Codec:           D3D12_VIDEO_ENCODER_CODEC;
    RateControlMode: D3D12_VIDEO_ENCODER_RATE_CONTROL_MODE;
    IsSupported:     BOOL;
}

D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE :: enum s32 {
    NONE      :: 0;
    ROW_BASED :: 1;

    D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_NONE      :: NONE;
    D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE_ROW_BASED :: ROW_BASED;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_INTRA_REFRESH_MODE :: struct {
    NodeIndex:        u32;
    Codec:            D3D12_VIDEO_ENCODER_CODEC;
    Profile:          D3D12_VIDEO_ENCODER_PROFILE_DESC;
    Level:            D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    IntraRefreshMode: D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    IsSupported:      BOOL;
}

D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE :: enum s32 {
    FULL_FRAME                                :: 0;
    BYTES_PER_SUBREGION                       :: 1;
    SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED  :: 2;
    UNIFORM_PARTITIONING_ROWS_PER_SUBREGION   :: 3;
    UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME :: 4;

    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_FULL_FRAME                                :: FULL_FRAME;
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_BYTES_PER_SUBREGION                       :: BYTES_PER_SUBREGION;
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED  :: SQUARE_UNITS_PER_SUBREGION_ROW_UNALIGNED;
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_ROWS_PER_SUBREGION   :: UNIFORM_PARTITIONING_ROWS_PER_SUBREGION;
    D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE_UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME :: UNIFORM_PARTITIONING_SUBREGIONS_PER_FRAME;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE :: struct {
    NodeIndex:     u32;
    Codec:         D3D12_VIDEO_ENCODER_CODEC;
    Profile:       D3D12_VIDEO_ENCODER_PROFILE_DESC;
    Level:         D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    SubregionMode: D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    IsSupported:   BOOL;
}

D3D12_VIDEO_ENCODER_HEAP_FLAGS :: enum_flags u32 {
    D3D12_VIDEO_ENCODER_HEAP_FLAG_NONE :: 0x0;
}

D3D12_VIDEO_ENCODER_HEAP_DESC :: struct {
    NodeMask:             u32;
    Flags:                D3D12_VIDEO_ENCODER_HEAP_FLAGS;
    EncodeCodec:          D3D12_VIDEO_ENCODER_CODEC;
    EncodeProfile:        D3D12_VIDEO_ENCODER_PROFILE_DESC #align 8;
    EncodeLevel:          D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    ResolutionsListCount: u32;
    pResolutionList:      *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_HEAP_SIZE :: struct {
    HeapDesc:         D3D12_VIDEO_ENCODER_HEAP_DESC;
    IsSupported:      BOOL;
    MemoryPoolL0Size: u64;
    MemoryPoolL1Size: u64;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS :: enum_flags u32 {
    NONE                                     :: 0x0;
    CABAC_ENCODING_SUPPORT                   :: 0x1;
    INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT :: 0x2;
    BFRAME_LTR_COMBINED_SUPPORT              :: 0x4;
    ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT  :: 0x8;
    DIRECT_SPATIAL_ENCODING_SUPPORT          :: 0x10;
    DIRECT_TEMPORAL_ENCODING_SUPPORT         :: 0x20;
    CONSTRAINED_INTRAPREDICTION_SUPPORT      :: 0x40;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_NONE                                     :: NONE;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CABAC_ENCODING_SUPPORT                   :: CABAC_ENCODING_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT :: INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_BFRAME_LTR_COMBINED_SUPPORT              :: BFRAME_LTR_COMBINED_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT  :: ADAPTIVE_8x8_TRANSFORM_ENCODING_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_SPATIAL_ENCODING_SUPPORT          :: DIRECT_SPATIAL_ENCODING_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_DIRECT_TEMPORAL_ENCODING_SUPPORT         :: DIRECT_TEMPORAL_ENCODING_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT      :: CONSTRAINED_INTRAPREDICTION_SUPPORT;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES :: enum s32 {
    _0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED            :: 0;
    _1_DISABLE_ALL_SLICE_BLOCK_EDGES                                :: 1;
    _2_DISABLE_SLICE_BOUNDARIES_BLOCKS                              :: 2;
    _3_USE_TWO_STAGE_DEBLOCKING                                     :: 3;
    _4_DISABLE_CHROMA_BLOCK_EDGES                                   :: 4;
    _5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES               :: 5;
    _6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING :: 6;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED            :: _0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_1_DISABLE_ALL_SLICE_BLOCK_EDGES                                :: _1_DISABLE_ALL_SLICE_BLOCK_EDGES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_2_DISABLE_SLICE_BOUNDARIES_BLOCKS                              :: _2_DISABLE_SLICE_BOUNDARIES_BLOCKS;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_3_USE_TWO_STAGE_DEBLOCKING                                     :: _3_USE_TWO_STAGE_DEBLOCKING;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_4_DISABLE_CHROMA_BLOCK_EDGES                                   :: _4_DISABLE_CHROMA_BLOCK_EDGES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES               :: _5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING :: _6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS :: enum_flags u32 {
    NONE                                                            :: 0x0;
    _0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED            :: 0x1;
    _1_DISABLE_ALL_SLICE_BLOCK_EDGES                                :: 0x2;
    _2_DISABLE_SLICE_BOUNDARIES_BLOCKS                              :: 0x4;
    _3_USE_TWO_STAGE_DEBLOCKING                                     :: 0x8;
    _4_DISABLE_CHROMA_BLOCK_EDGES                                   :: 0x10;
    _5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES               :: 0x20;
    _6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING :: 0x40;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_NONE                                                           :: NONE;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED            :: _0_ALL_LUMA_CHROMA_SLICE_BLOCK_EDGES_ALWAYS_FILTERED;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_1_DISABLE_ALL_SLICE_BLOCK_EDGES                                :: _1_DISABLE_ALL_SLICE_BLOCK_EDGES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_2_DISABLE_SLICE_BOUNDARIES_BLOCKS                              :: _2_DISABLE_SLICE_BOUNDARIES_BLOCKS;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_3_USE_TWO_STAGE_DEBLOCKING                                     :: _3_USE_TWO_STAGE_DEBLOCKING;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_4_DISABLE_CHROMA_BLOCK_EDGES                                   :: _4_DISABLE_CHROMA_BLOCK_EDGES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES               :: _5_DISABLE_CHROMA_BLOCK_EDGES_AND_LUMA_BOUNDARIES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAG_6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING :: _6_DISABLE_CHROMA_BLOCK_EDGES_AND_USE_LUMA_TWO_STAGE_DEBLOCKING;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264 :: struct {
    SupportFlags:                          D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264_FLAGS;
    DisableDeblockingFilterSupportedModes: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODE_FLAGS;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS :: enum_flags u32 {
    NONE                                        :: 0x0;
    BFRAME_LTR_COMBINED_SUPPORT                 :: 0x1;
    INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT    :: 0x2;
    CONSTRAINED_INTRAPREDICTION_SUPPORT         :: 0x4;
    SAO_FILTER_SUPPORT                          :: 0x8;
    ASYMETRIC_MOTION_PARTITION_SUPPORT          :: 0x10;
    ASYMETRIC_MOTION_PARTITION_REQUIRED         :: 0x20;
    TRANSFORM_SKIP_SUPPORT                      :: 0x40;
    DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT :: 0x80;
    P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES  :: 0x100;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_NONE                                        :: NONE;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_BFRAME_LTR_COMBINED_SUPPORT                 :: BFRAME_LTR_COMBINED_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT    :: INTRA_SLICE_CONSTRAINED_ENCODING_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_CONSTRAINED_INTRAPREDICTION_SUPPORT         :: CONSTRAINED_INTRAPREDICTION_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_SAO_FILTER_SUPPORT                          :: SAO_FILTER_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_SUPPORT          :: ASYMETRIC_MOTION_PARTITION_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_ASYMETRIC_MOTION_PARTITION_REQUIRED         :: ASYMETRIC_MOTION_PARTITION_REQUIRED;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_TRANSFORM_SKIP_SUPPORT                      :: TRANSFORM_SKIP_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT :: DISABLING_LOOP_FILTER_ACROSS_SLICES_SUPPORT;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAG_P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES  :: P_FRAMES_IMPLEMENTED_AS_LOW_DELAY_B_FRAMES;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE :: enum s32 {
    _8x8   :: 0;
    _16x16 :: 1;
    _32x32 :: 2;
    _64x64 :: 3;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_8x8   :: _8x8;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_16x16 :: _16x16;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_32x32 :: _32x32;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE_64x64 :: _64x64;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE :: enum s32 {
    _4x4   :: 0;
    _8x8   :: 1;
    _16x16 :: 2;
    _32x32 :: 3;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_4x4   :: _4x4;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_8x8   :: _8x8;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_16x16 :: _16x16;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE_32x32 :: _32x32;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC :: struct {
    SupportFlags:                        D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC_FLAGS;
    MinLumaCodingUnitSize:               D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MaxLumaCodingUnitSize:               D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MinLumaTransformUnitSize:            D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    MaxLumaTransformUnitSize:            D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    max_transform_hierarchy_depth_inter: u8;
    max_transform_hierarchy_depth_intra: u8;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT :: struct {
    DataSize: u32;
    union {
        pH264Support: *D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_H264;
        pHEVCSupport: *D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT_HEVC;
    }
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT :: struct {
    NodeIndex:          u32;
    Codec:              D3D12_VIDEO_ENCODER_CODEC;
    Profile:            D3D12_VIDEO_ENCODER_PROFILE_DESC;
    IsSupported:        BOOL;
    CodecSupportLimits: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_SUPPORT #align 8;
}

D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264 :: struct {
    MaxL0ReferencesForP:   u32;
    MaxL0ReferencesForB:   u32;
    MaxL1ReferencesForB:   u32;
    MaxLongTermReferences: u32;
    MaxDPBCapacity:        u32;
}

D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC :: struct {
    MaxL0ReferencesForP:   u32;
    MaxL0ReferencesForB:   u32;
    MaxL1ReferencesForB:   u32;
    MaxLongTermReferences: u32;
    MaxDPBCapacity:        u32;
}

D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT :: struct {
    DataSize: u32;
    union {
        pH264Support: *D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_H264;
        pHEVCSupport: *D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT_HEVC;
    }
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT :: struct {
    NodeIndex:      u32;
    Codec:          D3D12_VIDEO_ENCODER_CODEC;
    Profile:        D3D12_VIDEO_ENCODER_PROFILE_DESC;
    IsSupported:    BOOL;
    PictureSupport: D3D12_VIDEO_ENCODER_CODEC_PICTURE_CONTROL_SUPPORT #align 8;
}

D3D12_VIDEO_ENCODER_SUPPORT_FLAGS :: enum_flags u32 {
    NONE                                             :: 0x0;
    GENERAL_SUPPORT_OK                               :: 0x1;
    RATE_CONTROL_RECONFIGURATION_AVAILABLE           :: 0x2;
    RESOLUTION_RECONFIGURATION_AVAILABLE             :: 0x4;
    RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE           :: 0x8;
    RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE            :: 0x10;
    RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS      :: 0x20;
    RATE_CONTROL_DELTA_QP_AVAILABLE                  :: 0x40;
    SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE       :: 0x80;
    RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE       :: 0x100;
    RATE_CONTROL_INITIAL_QP_AVAILABLE                :: 0x200;
    RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE            :: 0x400;
    SEQUENCE_GOP_RECONFIGURATION_AVAILABLE           :: 0x800;
    MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE :: 0x1000;

    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_NONE                                             :: NONE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_GENERAL_SUPPORT_OK                               :: GENERAL_SUPPORT_OK;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_RECONFIGURATION_AVAILABLE           :: RATE_CONTROL_RECONFIGURATION_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RESOLUTION_RECONFIGURATION_AVAILABLE             :: RESOLUTION_RECONFIGURATION_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE           :: RATE_CONTROL_VBV_SIZE_CONFIG_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE            :: RATE_CONTROL_FRAME_ANALYSIS_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS      :: RECONSTRUCTED_FRAMES_REQUIRE_TEXTURE_ARRAYS;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_DELTA_QP_AVAILABLE                  :: RATE_CONTROL_DELTA_QP_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE       :: SUBREGION_LAYOUT_RECONFIGURATION_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE       :: RATE_CONTROL_ADJUSTABLE_QP_RANGE_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_INITIAL_QP_AVAILABLE                :: RATE_CONTROL_INITIAL_QP_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE            :: RATE_CONTROL_MAX_FRAME_SIZE_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_SEQUENCE_GOP_RECONFIGURATION_AVAILABLE           :: SEQUENCE_GOP_RECONFIGURATION_AVAILABLE;
    D3D12_VIDEO_ENCODER_SUPPORT_FLAG_MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE :: MOTION_ESTIMATION_PRECISION_MODE_LIMIT_AVAILABLE;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS :: enum_flags u32 {
    NONE                                   :: 0x0;
    USE_CONSTRAINED_INTRAPREDICTION        :: 0x1;
    USE_ADAPTIVE_8x8_TRANSFORM             :: 0x2;
    ENABLE_CABAC_ENCODING                  :: 0x4;
    ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES :: 0x8;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_NONE                                   :: NONE;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_CONSTRAINED_INTRAPREDICTION        :: USE_CONSTRAINED_INTRAPREDICTION;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_USE_ADAPTIVE_8x8_TRANSFORM             :: USE_ADAPTIVE_8x8_TRANSFORM;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ENABLE_CABAC_ENCODING                  :: ENABLE_CABAC_ENCODING;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES :: ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES :: enum s32 {
    DISABLED :: 0;
    TEMPORAL :: 1;
    SPATIAL  :: 2;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_DISABLED :: DISABLED;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_TEMPORAL :: TEMPORAL;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES_SPATIAL  :: SPATIAL;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264 :: struct {
    ConfigurationFlags:            D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_FLAGS;
    DirectModeConfig:              D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_DIRECT_MODES;
    DisableDeblockingFilterConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264_SLICES_DEBLOCKING_MODES;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS :: enum_flags u32 {
    NONE                                   :: 0x0;
    DISABLE_LOOP_FILTER_ACROSS_SLICES      :: 0x1;
    ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES :: 0x2;
    ENABLE_SAO_FILTER                      :: 0x4;
    ENABLE_LONG_TERM_REFERENCES            :: 0x8;
    USE_ASYMETRIC_MOTION_PARTITION         :: 0x10;
    ENABLE_TRANSFORM_SKIPPING              :: 0x20;
    USE_CONSTRAINED_INTRAPREDICTION        :: 0x40;

    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_NONE                                   :: NONE;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_DISABLE_LOOP_FILTER_ACROSS_SLICES      :: DISABLE_LOOP_FILTER_ACROSS_SLICES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES :: ALLOW_REQUEST_INTRA_CONSTRAINED_SLICES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_SAO_FILTER                      :: ENABLE_SAO_FILTER;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_LONG_TERM_REFERENCES            :: ENABLE_LONG_TERM_REFERENCES;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_ASYMETRIC_MOTION_PARTITION         :: USE_ASYMETRIC_MOTION_PARTITION;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_ENABLE_TRANSFORM_SKIPPING              :: ENABLE_TRANSFORM_SKIPPING;
    D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAG_USE_CONSTRAINED_INTRAPREDICTION        :: USE_CONSTRAINED_INTRAPREDICTION;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC :: struct {
    ConfigurationFlags:                  D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_FLAGS;
    MinLumaCodingUnitSize:               D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MaxLumaCodingUnitSize:               D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_CUSIZE;
    MinLumaTransformUnitSize:            D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    MaxLumaTransformUnitSize:            D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC_TUSIZE;
    max_transform_hierarchy_depth_inter: u8;
    max_transform_hierarchy_depth_intra: u8;
}

D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION :: struct {
    DataSize: u32;
    union {
        pH264Config: *D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_H264;
        pHEVCConfig: *D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION_HEVC;
    }
}

D3D12_VIDEO_ENCODER_INTRA_REFRESH :: struct {
    Mode:                 D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    IntraRefreshDuration: u32;
}

D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE :: enum s32 {
    MAXIMUM       :: 0;
    FULL_PIXEL    :: 1;
    HALF_PIXEL    :: 2;
    QUARTER_PIXEL :: 3;

    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_MAXIMUM       :: MAXIMUM;
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_FULL_PIXEL    :: FULL_PIXEL;
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_HALF_PIXEL    :: HALF_PIXEL;
    D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE_QUARTER_PIXEL :: QUARTER_PIXEL;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS :: struct {
    MaxSubregionsNumber:          u32;
    MaxIntraRefreshFrameDuration: u32;
    SubregionBlockPixelsSize:     u32;
    QPMapRegionPixelsSize:        u32;
}

D3D12_VIDEO_ENCODER_VALIDATION_FLAGS :: enum_flags u32 {
    NONE                                     :: 0x0;
    CODEC_NOT_SUPPORTED                      :: 0x1;
    INPUT_FORMAT_NOT_SUPPORTED               :: 0x8;
    CODEC_CONFIGURATION_NOT_SUPPORTED        :: 0x10;
    RATE_CONTROL_MODE_NOT_SUPPORTED          :: 0x20;
    RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED :: 0x40;
    INTRA_REFRESH_MODE_NOT_SUPPORTED         :: 0x80;
    SUBREGION_LAYOUT_MODE_NOT_SUPPORTED      :: 0x100;
    RESOLUTION_NOT_SUPPORTED_IN_LIST         :: 0x200;
    GOP_STRUCTURE_NOT_SUPPORTED              :: 0x800;

    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_NONE                                     :: NONE;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_NOT_SUPPORTED                      :: CODEC_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INPUT_FORMAT_NOT_SUPPORTED               :: INPUT_FORMAT_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_CODEC_CONFIGURATION_NOT_SUPPORTED        :: CODEC_CONFIGURATION_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_MODE_NOT_SUPPORTED          :: RATE_CONTROL_MODE_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED :: RATE_CONTROL_CONFIGURATION_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_INTRA_REFRESH_MODE_NOT_SUPPORTED         :: INTRA_REFRESH_MODE_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_SUBREGION_LAYOUT_MODE_NOT_SUPPORTED      :: SUBREGION_LAYOUT_MODE_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_RESOLUTION_NOT_SUPPORTED_IN_LIST         :: RESOLUTION_NOT_SUPPORTED_IN_LIST;
    D3D12_VIDEO_ENCODER_VALIDATION_FLAG_GOP_STRUCTURE_NOT_SUPPORTED              :: GOP_STRUCTURE_NOT_SUPPORTED;
}

D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264 :: struct {
    GOPLength:                         u32;
    PPicturePeriod:                    u32;
    pic_order_cnt_type:                u8;
    log2_max_frame_num_minus4:         u8;
    log2_max_pic_order_cnt_lsb_minus4: u8;
}

D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC :: struct {
    GOPLength:                         u32;
    PPicturePeriod:                    u32;
    log2_max_pic_order_cnt_lsb_minus4: u8;
}

D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE :: struct {
    DataSize: u32;
    union {
        pH264GroupOfPictures: *D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_H264;
        pHEVCGroupOfPictures: *D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE_HEVC;
    }
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_SUPPORT :: struct {
    NodeIndex:                   u32;
    Codec:                       D3D12_VIDEO_ENCODER_CODEC;
    InputFormat:                 DXGI_FORMAT;
    CodecConfiguration:          D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION #align 8;
    CodecGopSequence:            D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE;
    RateControl:                 D3D12_VIDEO_ENCODER_RATE_CONTROL;
    IntraRefresh:                D3D12_VIDEO_ENCODER_INTRA_REFRESH_MODE;
    SubregionFrameEncoding:      D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    ResolutionsListCount:        u32;
    pResolutionList:             *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    MaxReferenceFramesInDPB:     u32;
    ValidationFlags:             D3D12_VIDEO_ENCODER_VALIDATION_FLAGS;
    SupportFlags:                D3D12_VIDEO_ENCODER_SUPPORT_FLAGS;
    SuggestedProfile:            D3D12_VIDEO_ENCODER_PROFILE_DESC #align 8;
    SuggestedLevel:              D3D12_VIDEO_ENCODER_LEVEL_SETTING;
    pResolutionDependentSupport: *D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOLUTION_SUPPORT_LIMITS;
}

D3D12_FEATURE_DATA_VIDEO_ENCODER_RESOURCE_REQUIREMENTS :: struct {
    NodeIndex:                                u32;
    Codec:                                    D3D12_VIDEO_ENCODER_CODEC;
    Profile:                                  D3D12_VIDEO_ENCODER_PROFILE_DESC;
    InputFormat:                              DXGI_FORMAT;
    PictureTargetResolution:                  D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    IsSupported:                              BOOL;
    CompressedBitstreamBufferAccessAlignment: u32;
    EncoderMetadataBufferAccessAlignment:     u32;
    MaxEncoderOutputMetadataBufferSize:       u32;
}

D3D12_VIDEO_ENCODER_FLAGS :: enum_flags u32 {
    D3D12_VIDEO_ENCODER_FLAG_NONE :: 0x0;
}

D3D12_VIDEO_ENCODER_DESC :: struct {
    NodeMask:                     u32;
    Flags:                        D3D12_VIDEO_ENCODER_FLAGS;
    EncodeCodec:                  D3D12_VIDEO_ENCODER_CODEC;
    EncodeProfile:                D3D12_VIDEO_ENCODER_PROFILE_DESC #align 8;
    InputFormat:                  DXGI_FORMAT;
    CodecConfiguration:           D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION #align 8;
    MaxMotionEstimationPrecision: D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE;
}


ID3D12VideoEncoder_UUID :: "2E0D212D-8DF9-44A6-A770-BB289B182737";
ID3D12VideoEncoder :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12videoencoder_vtable: *ID3D12VideoEncoder_VTable;
}
ID3D12VideoEncoder_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetNodeMask: (this: *ID3D12VideoEncoder) -> u32 #cpp_method;
    GetEncoderFlags: (this: *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_FLAGS #cpp_method;
    GetCodec: (this: *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_CODEC #cpp_method;
    GetCodecProfile: (this: *ID3D12VideoEncoder, dstProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC) -> HRESULT #cpp_method;
    GetCodecConfiguration: (this: *ID3D12VideoEncoder, dstCodecConfig: D3D12_VIDEO_ENCODER_CODEC_CONFIGURATION) -> HRESULT #cpp_method;
    GetInputFormat: (this: *ID3D12VideoEncoder) -> DXGI_FORMAT #cpp_method;
    GetMaxMotionEstimationPrecision: (this: *ID3D12VideoEncoder) -> D3D12_VIDEO_ENCODER_MOTION_ESTIMATION_PRECISION_MODE #cpp_method;
}
vtable :: (obj: *ID3D12VideoEncoder) -> *ID3D12VideoEncoder_VTable { return obj.id3d12videoencoder_vtable; }



ID3D12VideoEncoderHeap_UUID :: "22B35D96-876A-44C0-B25E-FB8C9C7F1C4A";
ID3D12VideoEncoderHeap :: struct {
    #as using id3d12pageable: ID3D12Pageable;
    #place id3d12pageable; id3d12videoencoderheap_vtable: *ID3D12VideoEncoderHeap_VTable;
}
ID3D12VideoEncoderHeap_VTable :: struct #type_info_none {
    using id3d12devicechild: ID3D12DeviceChild_VTable;
    GetNodeMask: (this: *ID3D12VideoEncoderHeap) -> u32 #cpp_method;
    GetEncoderHeapFlags: (this: *ID3D12VideoEncoderHeap) -> D3D12_VIDEO_ENCODER_HEAP_FLAGS #cpp_method;
    GetCodec: (this: *ID3D12VideoEncoderHeap) -> D3D12_VIDEO_ENCODER_CODEC #cpp_method;
    GetCodecProfile: (this: *ID3D12VideoEncoderHeap, dstProfile: D3D12_VIDEO_ENCODER_PROFILE_DESC) -> HRESULT #cpp_method;
    GetCodecLevel: (this: *ID3D12VideoEncoderHeap, dstLevel: D3D12_VIDEO_ENCODER_LEVEL_SETTING) -> HRESULT #cpp_method;
    GetResolutionListCount: (this: *ID3D12VideoEncoderHeap) -> u32 #cpp_method;
    GetResolutionList: (this: *ID3D12VideoEncoderHeap, ResolutionsListCount: u32, pResolutionList: *D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoEncoderHeap) -> *ID3D12VideoEncoderHeap_VTable { return obj.id3d12videoencoderheap_vtable; }



ID3D12VideoDevice3_UUID :: "4243ADB4-3A32-4666-973C-0CCC5625DC44";
ID3D12VideoDevice3 :: struct {
    #as using id3d12videodevice2: ID3D12VideoDevice2;
    #place id3d12videodevice2; id3d12videodevice3_vtable: *ID3D12VideoDevice3_VTable;
}
ID3D12VideoDevice3_VTable :: struct #type_info_none {
    using id3d12videodevice2: ID3D12VideoDevice2_VTable;
    CreateVideoEncoder: (this: *ID3D12VideoDevice3, pDesc: *D3D12_VIDEO_ENCODER_DESC, riid: *IID, ppVideoEncoder: **void) -> HRESULT #cpp_method;
    CreateVideoEncoderHeap: (this: *ID3D12VideoDevice3, pDesc: *D3D12_VIDEO_ENCODER_HEAP_DESC, riid: *IID, ppVideoEncoderHeap: **void) -> HRESULT #cpp_method;
}
vtable :: (obj: *ID3D12VideoDevice3) -> *ID3D12VideoDevice3_VTable { return obj.id3d12videodevice3_vtable; }


/* interface __MIDL_itf_d3d12video_0000_0025 */
/* [local] */
D3D12_VIDEO_ENCODER_FRAME_TYPE_H264 :: enum s32 {
    I_FRAME   :: 0;
    P_FRAME   :: 1;
    B_FRAME   :: 2;
    IDR_FRAME :: 3;

    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_I_FRAME   :: I_FRAME;
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_P_FRAME   :: P_FRAME;
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_B_FRAME   :: B_FRAME;
    D3D12_VIDEO_ENCODER_FRAME_TYPE_H264_IDR_FRAME :: IDR_FRAME;
}

D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264 :: struct {
    ReconstructedPictureResourceIndex: u32;
    IsLongTermReference:               BOOL;
    LongTermPictureIdx:                u32;
    PictureOrderCountNumber:           u32;
    FrameDecodingOrderNumber:          u32;
    TemporalLayerIndex:                u32;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS :: enum_flags u32 {
    NONE                             :: 0x0;
    REQUEST_INTRA_CONSTRAINED_SLICES :: 0x1;

    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_NONE                             :: NONE;
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES :: REQUEST_INTRA_CONSTRAINED_SLICES;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION :: struct {
    memory_management_control_operation: u8;
    difference_of_pic_nums_minus1:       u32;
    long_term_pic_num:                   u32;
    long_term_frame_idx:                 u32;
    max_long_term_frame_idx_plus1:       u32;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION :: struct {
    modification_of_pic_nums_idc: u8;
    abs_diff_pic_num_minus1:      u32;
    long_term_pic_num:            u32;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264 :: struct {
    Flags:                                       D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_FLAGS;
    FrameType:                                   D3D12_VIDEO_ENCODER_FRAME_TYPE_H264;
    pic_parameter_set_id:                        u32;
    idr_pic_id:                                  u32;
    PictureOrderCountNumber:                     u32;
    FrameDecodingOrderNumber:                    u32;
    TemporalLayerIndex:                          u32;
    List0ReferenceFramesCount:                   u32;
    pList0ReferenceFrames:                       *u32;
    List1ReferenceFramesCount:                   u32;
    pList1ReferenceFrames:                       *u32;
    ReferenceFramesReconPictureDescriptorsCount: u32;
    pReferenceFramesReconPictureDescriptors:     *D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_H264;
    adaptive_ref_pic_marking_mode_flag:          u8;
    RefPicMarkingOperationsCommandsCount:        u32;
    pRefPicMarkingOperationsCommands:            *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_MARKING_OPERATION;
    List0RefPicModificationsCount:               u32;
    pList0RefPicModifications:                   *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION;
    List1RefPicModificationsCount:               u32;
    pList1RefPicModifications:                   *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264_REFERENCE_PICTURE_LIST_MODIFICATION_OPERATION;
    QPMapValuesCount:                            u32;
    pRateControlQPMap:                           *s8;
}

D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC :: enum s32 {
    I_FRAME   :: 0;
    P_FRAME   :: 1;
    B_FRAME   :: 2;
    IDR_FRAME :: 3;

    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_I_FRAME   :: I_FRAME;
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_P_FRAME   :: P_FRAME;
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_B_FRAME   :: B_FRAME;
    D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC_IDR_FRAME :: IDR_FRAME;
}

D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC :: struct {
    ReconstructedPictureResourceIndex: u32;
    IsRefUsedByCurrentPic:             BOOL;
    IsLongTermReference:               BOOL;
    PictureOrderCountNumber:           u32;
    TemporalLayerIndex:                u32;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS :: enum_flags u32 {
    NONE                             :: 0x0;
    REQUEST_INTRA_CONSTRAINED_SLICES :: 0x1;

    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_NONE                             :: NONE;
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAG_REQUEST_INTRA_CONSTRAINED_SLICES :: REQUEST_INTRA_CONSTRAINED_SLICES;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC :: struct {
    Flags:                                       D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC_FLAGS;
    FrameType:                                   D3D12_VIDEO_ENCODER_FRAME_TYPE_HEVC;
    slice_pic_parameter_set_id:                  u32;
    PictureOrderCountNumber:                     u32;
    TemporalLayerIndex:                          u32;
    List0ReferenceFramesCount:                   u32;
    pList0ReferenceFrames:                       *u32;
    List1ReferenceFramesCount:                   u32;
    pList1ReferenceFrames:                       *u32;
    ReferenceFramesReconPictureDescriptorsCount: u32;
    pReferenceFramesReconPictureDescriptors:     *D3D12_VIDEO_ENCODER_REFERENCE_PICTURE_DESCRIPTOR_HEVC;
    List0RefPicModificationsCount:               u32;
    pList0RefPicModifications:                   *u32;
    List1RefPicModificationsCount:               u32;
    pList1RefPicModifications:                   *u32;
    QPMapValuesCount:                            u32;
    pRateControlQPMap:                           *s8;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA :: struct {
    DataSize: u32;
    union {
        pH264PicData: *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_H264;
        pHEVCPicData: *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA_HEVC;
    }
}

D3D12_VIDEO_ENCODE_REFERENCE_FRAMES :: struct {
    NumTexture2Ds: u32;
    ppTexture2Ds:  **ID3D12Resource;
    pSubresources: *u32;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS :: enum_flags u32 {
    NONE                      :: 0x0;
    USED_AS_REFERENCE_PICTURE :: 0x1;

    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_NONE                      :: NONE;
    D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAG_USED_AS_REFERENCE_PICTURE :: USED_AS_REFERENCE_PICTURE;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC :: struct {
    IntraRefreshFrameIndex:  u32;
    Flags:                   D3D12_VIDEO_ENCODER_PICTURE_CONTROL_FLAGS;
    PictureControlCodecData: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_CODEC_DATA;
    ReferenceFrames:         D3D12_VIDEO_ENCODE_REFERENCE_FRAMES;
}

D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS :: enum_flags u32 {
    NONE                    :: 0x0;
    RESOLUTION_CHANGE       :: 0x1;
    RATE_CONTROL_CHANGE     :: 0x2;
    SUBREGION_LAYOUT_CHANGE :: 0x4;
    REQUEST_INTRA_REFRESH   :: 0x8;
    GOP_SEQUENCE_CHANGE     :: 0x10;

    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_NONE                    :: NONE;
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RESOLUTION_CHANGE       :: RESOLUTION_CHANGE;
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_RATE_CONTROL_CHANGE     :: RATE_CONTROL_CHANGE;
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_SUBREGION_LAYOUT_CHANGE :: SUBREGION_LAYOUT_CHANGE;
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_REQUEST_INTRA_REFRESH   :: REQUEST_INTRA_REFRESH;
    D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAG_GOP_SEQUENCE_CHANGE     :: GOP_SEQUENCE_CHANGE;
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES :: struct {
    union {
        MaxBytesPerSlice:            u32;
        NumberOfCodingUnitsPerSlice: u32;
        NumberOfRowsPerSlice:        u32;
        NumberOfSlicesPerFrame:      u32;
    }
}

D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA :: struct {
    DataSize: u32;
    union {
        pSlicesPartition_H264: *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES;
        pSlicesPartition_HEVC: *D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA_SLICES;
    }
}

D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC :: struct {
    Flags:                     D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_FLAGS;
    IntraRefreshConfig:        D3D12_VIDEO_ENCODER_INTRA_REFRESH;
    RateControl:               D3D12_VIDEO_ENCODER_RATE_CONTROL #align 8;
    PictureTargetResolution:   D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    SelectedLayoutMode:        D3D12_VIDEO_ENCODER_FRAME_SUBREGION_LAYOUT_MODE;
    FrameSubregionsLayoutData: D3D12_VIDEO_ENCODER_PICTURE_CONTROL_SUBREGIONS_LAYOUT_DATA #align 8;
    CodecGopSequence:          D3D12_VIDEO_ENCODER_SEQUENCE_GOP_STRUCTURE;
}

D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS :: struct {
    SequenceControlDesc:               D3D12_VIDEO_ENCODER_SEQUENCE_CONTROL_DESC;
    PictureControlDesc:                D3D12_VIDEO_ENCODER_PICTURE_CONTROL_DESC;
    pInputFrame:                       *ID3D12Resource;
    InputFrameSubresource:             u32;
    CurrentFrameBitstreamMetadataSize: u32;
}

D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM :: struct {
    pBuffer:          *ID3D12Resource;
    FrameStartOffset: u64;
}

D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE :: struct {
    pReconstructedPicture:           *ID3D12Resource;
    ReconstructedPictureSubresource: u32;
}

D3D12_VIDEO_ENCODER_FRAME_SUBREGION_METADATA :: struct {
    bSize:        u64;
    bStartOffset: u64;
    bHeaderSize:  u64;
}

D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAGS :: enum_flags u32 {
    NO_ERROR                                     :: 0x0;
    CODEC_PICTURE_CONTROL_NOT_SUPPORTED          :: 0x1;
    SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED :: 0x2;
    INVALID_REFERENCE_PICTURES                   :: 0x4;
    RECONFIGURATION_REQUEST_NOT_SUPPORTED        :: 0x8;
    INVALID_METADATA_BUFFER_SOURCE               :: 0x10;

    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_NO_ERROR                                     :: NO_ERROR;
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_CODEC_PICTURE_CONTROL_NOT_SUPPORTED          :: CODEC_PICTURE_CONTROL_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED :: SUBREGION_LAYOUT_CONFIGURATION_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_REFERENCE_PICTURES                   :: INVALID_REFERENCE_PICTURES;
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_RECONFIGURATION_REQUEST_NOT_SUPPORTED        :: RECONFIGURATION_REQUEST_NOT_SUPPORTED;
    D3D12_VIDEO_ENCODER_ENCODE_ERROR_FLAG_INVALID_METADATA_BUFFER_SOURCE               :: INVALID_METADATA_BUFFER_SOURCE;
}

D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS :: struct {
    AverageQP:                         u64;
    IntraCodingUnitsCount:             u64;
    InterCodingUnitsCount:             u64;
    SkipCodingUnitsCount:              u64;
    AverageMotionEstimationXDirection: u64;
    AverageMotionEstimationYDirection: u64;
}

D3D12_VIDEO_ENCODER_OUTPUT_METADATA :: struct {
    EncodeErrorFlags:                  u64;
    EncodeStats:                       D3D12_VIDEO_ENCODER_OUTPUT_METADATA_STATISTICS;
    EncodedBitstreamWrittenBytesCount: u64;
    WrittenSubregionsCount:            u64;
}

D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER :: struct {
    pBuffer: *ID3D12Resource;
    Offset:  u64;
}

D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS :: struct {
    EncoderCodec:                      D3D12_VIDEO_ENCODER_CODEC;
    EncoderProfile:                    D3D12_VIDEO_ENCODER_PROFILE_DESC #align 8;
    EncoderInputFormat:                DXGI_FORMAT;
    EncodedPictureEffectiveResolution: D3D12_VIDEO_ENCODER_PICTURE_RESOLUTION_DESC;
    HWLayoutMetadata:                  D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
}

D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS :: struct {
    ResolvedLayoutMetadata: D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
}

D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS :: struct {
    Bitstream:             D3D12_VIDEO_ENCODER_COMPRESSED_BITSTREAM;
    ReconstructedPicture:  D3D12_VIDEO_ENCODER_RECONSTRUCTED_PICTURE;
    EncoderOutputMetadata: D3D12_VIDEO_ENCODER_ENCODE_OPERATION_METADATA_BUFFER;
}


ID3D12VideoEncodeCommandList2_UUID :: "895491e2-e701-46a9-9a1f-8d3480ed867a";
ID3D12VideoEncodeCommandList2 :: struct {
    #as using id3d12videoencodecommandlist1: ID3D12VideoEncodeCommandList1;
    #place id3d12videoencodecommandlist1; id3d12videoencodecommandlist2_vtable: *ID3D12VideoEncodeCommandList2_VTable;
}
ID3D12VideoEncodeCommandList2_VTable :: struct #type_info_none {
    using id3d12videoencodecommandlist1: ID3D12VideoEncodeCommandList1_VTable;
    EncodeFrame: (this: *ID3D12VideoEncodeCommandList2, pEncoder: *ID3D12VideoEncoder, pHeap: *ID3D12VideoEncoderHeap, pInputArguments: *D3D12_VIDEO_ENCODER_ENCODEFRAME_INPUT_ARGUMENTS, pOutputArguments: *D3D12_VIDEO_ENCODER_ENCODEFRAME_OUTPUT_ARGUMENTS) -> void #cpp_method;
    ResolveEncoderOutputMetadata: (this: *ID3D12VideoEncodeCommandList2, pInputArguments: *D3D12_VIDEO_ENCODER_RESOLVE_METADATA_INPUT_ARGUMENTS, pOutputArguments: *D3D12_VIDEO_ENCODER_RESOLVE_METADATA_OUTPUT_ARGUMENTS) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoEncodeCommandList2) -> *ID3D12VideoEncodeCommandList2_VTable { return obj.id3d12videoencodecommandlist2_vtable; }



ID3D12VideoEncodeCommandList3_UUID :: "7f027b22-1515-4e85-aa0d-026486580576";
ID3D12VideoEncodeCommandList3 :: struct {
    #as using id3d12videoencodecommandlist2: ID3D12VideoEncodeCommandList2;
    #place id3d12videoencodecommandlist2; id3d12videoencodecommandlist3_vtable: *ID3D12VideoEncodeCommandList3_VTable;
}
ID3D12VideoEncodeCommandList3_VTable :: struct #type_info_none {
    using id3d12videoencodecommandlist2: ID3D12VideoEncodeCommandList2_VTable;
    Barrier: (this: *ID3D12VideoEncodeCommandList3, NumBarrierGroups: u32, pBarrierGroups: *D3D12_BARRIER_GROUP) -> void #cpp_method;
}
vtable :: (obj: *ID3D12VideoEncodeCommandList3) -> *ID3D12VideoEncodeCommandList3_VTable { return obj.id3d12videoencodecommandlist3_vtable; }


#scope_file

d3d12 :: #foreign_system_library "d3d12";
