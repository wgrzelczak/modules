#load "d3d12_bindings.jai";
#load "d3d12_helpers.jai";
#if USE_DEBUG #load "d3d12_bindings_debug.jai";

LONG_PTR :: u64;
UCHAR :: u8;

WKPDID_D3DDebugObjectName :: "429b8c22-9188-4b0c-8742-acb0bf85c200";

// Defined in both d3dcommon.h and d3d12shader.h...
D3D_SHADER_FEATURE_ADVANCED_TEXTURE_OPS :: 0x20000000;
D3D_SHADER_FEATURE_WRITEABLE_MSAA_TEXTURES :: 0x40000000;

D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING :: (src_0 : int, src_1 : int, src_2 : int, src_3 : int) -> u32 #expand {
    return
      ((src_0 & D3D12_SHADER_COMPONENT_MAPPING_MASK) << (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 0))
    | ((src_1 & D3D12_SHADER_COMPONENT_MAPPING_MASK) << (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 1))
    | ((src_2 & D3D12_SHADER_COMPONENT_MAPPING_MASK) << (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 2))
    | ((src_3 & D3D12_SHADER_COMPONENT_MAPPING_MASK) << (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 3))
    | D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES;
}
D3D12_DECODE_SHADER_4_COMPONENT_MAPPING :: (component_to_extract : D3D12_SHADER_COMPONENT_MAPPING, mapping : D3D12_SHADER_COMPONENT_MAPPING) -> u32 #expand {
    return mapping >> (D3D12_SHADER_COMPONENT_MAPPING_SHIFT * component_to_extract) & D3D12_SHADER_COMPONENT_MAPPING_MASK;
}
D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING :: #run D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING(0,1,2,3);

D3D12_ENCODE_BASIC_FILTER :: (min : int, mag : int, mip : int, reduction : int) -> D3D12_FILTER {
    return cast(D3D12_FILTER)
    ((min & D3D12_FILTER_TYPE_MASK) << D3D12_MIN_FILTER_SHIFT) |
    ((mag & D3D12_FILTER_TYPE_MASK) << D3D12_MAG_FILTER_SHIFT) |
    ((mip & D3D12_FILTER_TYPE_MASK) << D3D12_MIP_FILTER_SHIFT) |
    ((reduction & D3D12_FILTER_REDUCTION_TYPE_MASK) << D3D12_FILTER_REDUCTION_TYPE_SHIFT);
}
D3D12_ENCODE_ANISOTROPIC_FILTER :: (reduction : int) -> D3D12_FILTER {
    return D3D12_ANISOTROPIC_FILTERING_BIT | D3D12_ENCODE_BASIC_FILTER(cast(int)D3D12_FILTER_TYPE_LINEAR, cast(int)D3D12_FILTER_TYPE_LINEAR, cast(int)D3D12_FILTER_TYPE_LINEAR, reduction);
}
D3D12_DECODE_MIN_FILTER :: (filter : D3D12_FILTER) -> D3D12_FILTER_TYPE {
    return cast(D3D12_FILTER_TYPE) (filter >> D3D12_MIN_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK;
}
D3D12_DECODE_MAG_FILTER :: (filter : D3D12_FILTER) -> D3D12_FILTER_TYPE {
    return cast(D3D12_FILTER_TYPE) (filter >> D3D12_MAG_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK;
}
D3D12_DECODE_MIP_FILTER :: (filter : D3D12_FILTER) -> D3D12_FILTER_TYPE {
    return cast(D3D12_FILTER_TYPE) (filter >> D3D12_MIP_FILTER_SHIFT) & D3D12_FILTER_TYPE_MASK;
}
D3D12_DECODE_FILTER_REDUCTION :: (filter : D3D12_FILTER) -> D3D12_FILTER_REDUCTION_TYPE {
    return cast(D3D12_FILTER_REDUCTION_TYPE) (filter >> D3D12_FILTER_REDUCTION_TYPE_SHIFT) & D3D12_FILTER_REDUCTION_TYPE_MASK; 
}
D3D12_DECODE_IS_COMPARISON_FILTER :: (filter : D3D12_FILTER) -> bool {
    return D3D12_DECODE_FILTER_REDUCTION(filter) == D3D12_FILTER_REDUCTION_TYPE_COMPARISON;
}
D3D12_DECODE_IS_ANISOTROPIC_FILTER :: (filter : D3D12_FILTER) -> bool {
    return
    (filter & D3D12_ANISOTROPIC_FILTERING_BIT) &&
    (D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER(filter)) && 
    (D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER(filter)) && 
    (D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER(filter));  
} 

D3D12_MAKE_COARSE_SHADING_RATE :: (x : int, y: int) -> int #expand { 
    return (x << D3D12_SHADING_RATE_X_AXIS_SHIFT) | y;
}
D3D12_GET_COARSE_SHADING_RATE_X_AXIS :: (x : int)   -> int #expand {
    return (x >> D3D12_SHADING_RATE_X_AXIS_SHIFT) & D3D12_SHADING_RATE_VALID_MASK;
}
D3D12_GET_COARSE_SHADING_RATE_Y_AXIS :: (y : int)   -> int #expand {
    return y & D3D12_SHADING_RATE_VALID_MASK;
}
